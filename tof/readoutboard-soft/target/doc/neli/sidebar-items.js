window.SIDEBAR_ITEMS = {"constant":[["MAX_NL_LENGTH","Max supported message length for netlink messages supported by the kernel."]],"macro":[["deserialize","This macro can be used to declaratively define deserialization for a struct."],["deserialize_type_size","This macro calculates size from [`type_size`][crate::Nl::type_size] methods and returns an error if [`type_size`][crate::Nl::type_size] evaluates to [`None`]."],["drive_deserialize","This macro can be used to deserialize a single field in a struct."],["drive_serialize","This macro can be used to serialize a single field in a struct."],["impl_flags","Implement a container for bit flag enums where the set of flags will be condensed into a single value."],["impl_trait","For generating a marker trait that flags a new enum as usable in a field that accepts a generic type. This way, the type parameter can be constrained by a trait bound to only accept enums that implement the marker trait."],["impl_var","For naming a new enum, passing in what type it serializes to and deserializes from, and providing a mapping from variants to expressions (such as libc consts) that will ultimately be used in the serialization/deserialization step when sending the netlink message over the wire."],["serialize","This macro can be used to declaratively define serialization for a struct."]],"mod":[["attr","Shared attribute code for all types of netlink attributes."],["consts","High level notes"],["err","This is the module that contains the error types used in `neli`"],["genl","This module contains generic netlink parsing data structures. This is all handled by the [`Genlmsghdr`][crate::genl::Genlmsghdr] header struct which contains all of the information needed for the generic netlink layer."],["iter","Module for iteration over netlink responses"],["nl","This module contains the top level netlink header code. Every netlink message will be encapsulated in a top level `Nlmsghdr`."],["rtnl","This module provides an implementation of routing netlink structures and the routing attributes that are at the end of most routing netlink responses."],["socket","This module provides code that glues all of the other modules together and allows message send and receive operations."],["types","Module containing various types used across the various netlink structures used in `neli`."],["utils","A module containing utilities for working with constructs like bitflags and other low level operations."]],"struct":[["BeU64","A `u64` data type that will always be serialized as big endian"]],"trait":[["Nl","Trait defining basic actions required for netlink communication. Implementations for basic and `neli`â€™s types are provided (see below). Create new implementations if you have to work with a Netlink API that uses values of more unusual types."]]};