#include <stdlib.h>
#include <stdio.h>
#include <TF1.h>
#include <TGraph.h>
#include <TMath.h>

/* Waveform stuff. */
#include "../include/EventGAPS.h"

// Some useful macros
#define SQR(A)               ( (A) * (A) )
#define ABS(A)               ( ( (A<0) ? -(A) : (A) ) )

using namespace std;

////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////
// Default constructor
EventGAPS::EventGAPS(GAPS::Waveform *wave[], GAPS::Waveform *wch9[] ) {

  for (int i=324; i<326; i++) {
    wave[i]->SetPedBegin(10);
    wave[i]->SetPedRange(90);
    //wave[i]->CalcPedestalRange(); 
    float ch9RMS = wave[i]->GetPedsigma();
    printf("%d-%.2f..", i, ch9RMS);
  }
  printf("\n");
  // Initialize some variables
  InitializeVariables(ch);

}
////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////


////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////
EventGAPS::EventGAPS (int size) {
// This constructor is used to create a Waveform from scratch. The
// whole trace is flat at 0 mV, with 0 varinace and 0 pedestal.

}


////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////
// Default destructor
EventGAPS::~EventGAPS(void) {

}
////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////


////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////
void EventGAPS::InitializeVariables(int no_acq) {
  
  // stuff related to the peaks

}
////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////
// PmtThreshold should be set to the value used by vmedaq.
void EventGAPS::SetThreshold(float PmtThreshold){
  //Threshold = PmtThreshold; 
  /*
  if (PmtThreshold > 0){
    Threshold = -PmtThreshold ;
  }else {
    char txt[1000];
    sprintf(txt,"PMT Threshold is %.2f.  It must be a POSITIVE number!!!",
            PmtThreshold);
    Message(txt);
  }
  */
}
////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////

//==================END OF PEAK STUFF======================

void EventGAPS::Message(const char *s) {
  //cerr << s << endl;
}

