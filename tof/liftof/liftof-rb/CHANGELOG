# LELEWAA series

## v0.10.4

## v0.10.3
* suppress error about skipped events when we are in 
  trace suppression mode (skipped events are a feature then)
* removes annoying creation of 'Unknown.tof.gaps' in case 
  we don't write any data

## v0.10.2
* allow to read out drs4 deadtime for every
  event

## v0.10.1
* set preamp bias voltages from config file
* removes eventid testing from commandline 
  options
* removes --to-local-file. It will be set auto
  matically when taking data or calibrations 
  locally
* declutters command interface. All "setting"
  tasks should be done by other binaries
  (as in tof-control)
* database is now a feature (since diesel pulls
  in sqlite dependency which causes compiler 
  issues with musl

## v0.10.0
* adapt to new ReadoutBoard model in 
  the database
* introduces error bit checks on channels

# HAHALUA series

## v0.9.5
* revamps configuration - use the same
  .toml file as liftof-cc
* redoes command line arguments
  use CommandRB now to set the 
  listen flag
* removes a bunch of outdated
  commandline arguments
* prepare to actually listen to liftof-cc


## v0.9.3/0.9.4
* adopts to upstream changes

## v0.9.2
* fixes 4 packet calibration bug by using a 
  a workaround for now

## v0.9.1
* does not care if run by systemd or not, makes 
  handling simpler
* removes  --calibration since it is duplicated
* changes default local filenames, add timestamps

## v0.9.0
* preamp, powerboard and LTB monitoring
* integration of Paolo's command suite

# NIUHI series

## v0.8.6
* logo show to welcome user
* adapting to upstream changes in RunConfig
* New TofOperationMode RBHighThroughput will
  allow to just forward RB buffer content 
  without reading it
* removes -n command line argument. Just use
  the number of events from the config file
* adds --listen flag. If this instance should
  listen to the central cc server, then add
  --listen. This flag needs to be set to be
  able to receive commands, e.g. run start/stop
  signals
* removes --moni-interval-l1 and --moni-interval-l2
  in the future this will be controlled through 
  the runconfig
* change to named threads instead of ThreadPool.
  RATIONALE: More fine grained control, possibility
  for heatrbeat, naming allows easier debugging in 
  case a thread panics.

## v0.8.5
* removes event cache
* performance boost
* new SOFT_RESET routine

## v0.8.2
* based on updated tof-dataclasses, which fix the 
  calibration timing bin bug

## v0.8,2
* changed event processing engine to RBEventMemoryStreamer

## v0.8,1
* upstream changes in tof-control (removes panic) should 
  allow more stable monitoring
* adds new flags --moni-interval-l1 and --moni-interval-l2 to 
  set the intervals for fast and slow monitoring through the 
  command line

## v0.8.0


# OMILU seris
v0.7.3
* implements new version of request/reply pattern

v0.7.2
* fixes a bug where te data formats for header only and 
  memory view where switched
* removes usage of deprecated RBEventPayload

v0.7.1
* inclusion of calibration routines into the liftof-rb code!
* --calibration flag to run both timing and voltage claibrations
* removes commandline flags to set self triggers


v0.7.0
* changed RunConfig class upstream. Keep in mind
  when setting the run config (-r)

# KIHIKIHI series
v0.6.0


# UHU series

v0.5.0

* includes readoutboard monitoring data
* -> This now makes the code depending on tof-control
* TODO: remotely change RunParams
* CRITICAL FIX - systemd recongnition routine

# MOA series

v0.4.2
* Switch from depreacted RunParams to RunConfig struct
* Includes the possibility to use a json config file
* New feature - use only a subset of channels
* Send only header information

v0.4.0
* FUTURE/FEATURE not yet available: Waveform analysis possible directly on the board
  A new `--analyze` flag will take that into account
* Simplified --vcal, --tcal, --noi flags for calibration

# MANINI series

v0.3.4
* New feature, random self trigger mode with 
  randomly space triggers in time.

v0.3.3
* Various bugfixes, code cleanup
* Fixes issue with testing mode with self-trigger

v0.3.0
* Changed the runner - the runner will now read out 
  the buffers as well. This saves an entire thread.
* The buffer handler determines the active buffer by 
  checking dma_ptr. 
* These should require significanlty less checking of
  the registers and usage of less CPU resources.
* slight API change/WIP
* introduces CTRL+C to stop data taking (disables triggers
  and breaks the infinite loop in main)

v0.2.3
* Changed the buffer readout model to hopefully be more 
  reliable and resourceful

v0.2.2
* Reworked the command routine and the handling of RunParams

v0.2.1

* Changed 0MQ scheme. RBs will prefix their packets with "RBXX"
* 0MQ command channel is now SUB


