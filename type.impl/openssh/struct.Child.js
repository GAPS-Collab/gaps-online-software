(function() {var type_impls = {
"openssh":[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Child%3CS%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/openssh/child.rs.html#204-209\">source</a><a href=\"#impl-Child%3CS%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;S: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.78.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>&gt; <a class=\"struct\" href=\"openssh/struct.Child.html\" title=\"struct openssh::Child\">Child</a>&lt;S&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.session\" class=\"method\"><a class=\"src rightside\" href=\"src/openssh/child.rs.html#206-208\">source</a><h4 class=\"code-header\">pub fn <a href=\"openssh/struct.Child.html#tymethod.session\" class=\"fn\">session</a>(&amp;self) -&gt; S</h4></section></summary><div class=\"docblock\"><p>Access the SSH session that this remote process was spawned from.</p>\n</div></details></div></details>",0,"openssh::RemoteChild"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Child%3CS%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/openssh/child.rs.html#89-202\">source</a><a href=\"#impl-Child%3CS%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;S&gt; <a class=\"struct\" href=\"openssh/struct.Child.html\" title=\"struct openssh::Child\">Child</a>&lt;S&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.disconnect\" class=\"method\"><a class=\"src rightside\" href=\"src/openssh/child.rs.html#112-114\">source</a><h4 class=\"code-header\">pub async fn <a href=\"openssh/struct.Child.html#tymethod.disconnect\" class=\"fn\">disconnect</a>(self) -&gt; <a class=\"type\" href=\"https://doc.rust-lang.org/1.78.0/std/io/error/type.Result.html\" title=\"type std::io::error::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.78.0/std/primitive.unit.html\">()</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Disconnect from this given remote child process.</p>\n<p>Note that disconnecting does <em>not</em> kill the remote process, it merely kills the local\nhandle to that remote process.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.wait\" class=\"method\"><a class=\"src rightside\" href=\"src/openssh/child.rs.html#124-130\">source</a><h4 class=\"code-header\">pub async fn <a href=\"openssh/struct.Child.html#tymethod.wait\" class=\"fn\">wait</a>(self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.78.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.78.0/std/process/struct.ExitStatus.html\" title=\"struct std::process::ExitStatus\">ExitStatus</a>, <a class=\"enum\" href=\"openssh/enum.Error.html\" title=\"enum openssh::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Waits for the remote child to exit completely, returning the status that it exited with.</p>\n<p>This function will continue to have the same return value after it has been called at least\nonce.</p>\n<p>The stdin handle to the child process, if any, will be closed before waiting. This helps\navoid deadlock: it ensures that the child does not block waiting for input from the parent,\nwhile the parent waits for the child to exit.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.wait_with_output\" class=\"method\"><a class=\"src rightside\" href=\"src/openssh/child.rs.html#142-185\">source</a><h4 class=\"code-header\">pub async fn <a href=\"openssh/struct.Child.html#tymethod.wait_with_output\" class=\"fn\">wait_with_output</a>(self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.78.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.78.0/std/process/struct.Output.html\" title=\"struct std::process::Output\">Output</a>, <a class=\"enum\" href=\"openssh/enum.Error.html\" title=\"enum openssh::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Simultaneously waits for the remote child to exit and collect all remaining output on the\nstdout/stderr handles, returning an <code>Output</code> instance.</p>\n<p>The stdin handle to the child process, if any, will be closed before waiting. This helps\navoid deadlock: it ensures that the child does not block waiting for input from the parent,\nwhile the parent waits for the child to exit.</p>\n<p>By default, stdin, stdout and stderr are inherited from the parent. In order to capture the\noutput into this <code>Result&lt;Output&gt;</code> it is necessary to create new pipes between parent and\nchild. Use <code>stdout(Stdio::piped())</code> or <code>stderr(Stdio::piped())</code>, respectively.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.stdin\" class=\"method\"><a class=\"src rightside\" href=\"src/openssh/child.rs.html#188-190\">source</a><h4 class=\"code-header\">pub fn <a href=\"openssh/struct.Child.html#tymethod.stdin\" class=\"fn\">stdin</a>(&amp;mut self) -&gt; &amp;mut <a class=\"enum\" href=\"https://doc.rust-lang.org/1.78.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"struct\" href=\"openssh/struct.ChildStdin.html\" title=\"struct openssh::ChildStdin\">ChildStdin</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Access the handle for reading from the remote child’s standard input (stdin), if requested.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.stdout\" class=\"method\"><a class=\"src rightside\" href=\"src/openssh/child.rs.html#194-196\">source</a><h4 class=\"code-header\">pub fn <a href=\"openssh/struct.Child.html#tymethod.stdout\" class=\"fn\">stdout</a>(&amp;mut self) -&gt; &amp;mut <a class=\"enum\" href=\"https://doc.rust-lang.org/1.78.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"struct\" href=\"openssh/struct.ChildStdout.html\" title=\"struct openssh::ChildStdout\">ChildStdout</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Access the handle for reading from the remote child’s standard output (stdout), if\nrequested.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.stderr\" class=\"method\"><a class=\"src rightside\" href=\"src/openssh/child.rs.html#199-201\">source</a><h4 class=\"code-header\">pub fn <a href=\"openssh/struct.Child.html#tymethod.stderr\" class=\"fn\">stderr</a>(&amp;mut self) -&gt; &amp;mut <a class=\"enum\" href=\"https://doc.rust-lang.org/1.78.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"struct\" href=\"openssh/struct.ChildStderr.html\" title=\"struct openssh::ChildStderr\">ChildStderr</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Access the handle for reading from the remote child’s standard error (stderr), if requested.</p>\n</div></details></div></details>",0,"openssh::RemoteChild"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Debug-for-Child%3CS%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/openssh/child.rs.html#79\">source</a><a href=\"#impl-Debug-for-Child%3CS%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;S: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.78.0/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.78.0/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a> for <a class=\"struct\" href=\"openssh/struct.Child.html\" title=\"struct openssh::Child\">Child</a>&lt;S&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/openssh/child.rs.html#79\">source</a><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.78.0/core/fmt/trait.Debug.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/1.78.0/core/fmt/struct.Formatter.html\" title=\"struct core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"type\" href=\"https://doc.rust-lang.org/1.78.0/core/fmt/type.Result.html\" title=\"type core::fmt::Result\">Result</a></h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"https://doc.rust-lang.org/1.78.0/core/fmt/trait.Debug.html#tymethod.fmt\">Read more</a></div></details></div></details>","Debug","openssh::RemoteChild"]]
};if (window.register_type_impls) {window.register_type_impls(type_impls);} else {window.pending_type_impls = type_impls;}})()