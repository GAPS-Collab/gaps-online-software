searchState.loadedDescShard("parquet_format_safe", 0, "Bit packed encoding.  This can only be used if the data …\nAn embedded BSON document\nEncoding for floating-point data. K byte-streams are …\nBloom filter header is stored at beginning of Bloom filter …\nEnum to annotate whether lists of min/max elements inside …\nEmbedded BSON logical type annotation\nDescription for ColumnIndex. Each [i] refers to the page …\nDescription for column metadata\nSupported compression algorithms.\nDEPRECATED: Common types used by frameworks(e.g. hive, …\nA Date\nA decimal value.\nDelta encoding for integers. This can be used for int …\nIncremental-encoded byte array. Prefix lengths are encoded …\nEncoding for byte arrays to separate the length values and …\nData page header\nNew page format allowing reading levels without …\nDecimal logical type annotation\nThe dictionary page must be placed at the first position …\nan enum is converted into a binary field\nEncodings supported by Parquet.  Not all encodings are …\nRepresentation of Schemas\nCrypto metadata for files with encrypted footer *\nDescription for file metadata\nAn interval of time\nA signed integer value.\nInteger logical type annotation\nAn embedded JSON document\nEmbedded JSON logical type annotation\nWrapper struct to store key values\na list is converted into an optional field containing a …\na map is converted as an optional field containing a …\na key/value pair is converted into a group of two fields\nTime units for logical types\nLogical type to annotate a column that is always null.\nThe field is optional (can be null) and each record has 0 …\nDefault encoding. BOOLEAN - 1 bit per value. 0 is false; 1 …\nDeprecated: Dictionary encoding. The values in the …\nstatistics of a given page type and encoding\nThe field is repeated and can contain 0 or more values\nThis field is required (can not be null) and each record …\nGroup packed run length encoding. Usable for …\nDictionary encoding: the ids are encoded using the RLE …\nRepresents a element inside a schema definition.\nWrapper struct to specify sort order\nBlock-based algorithm type annotation. *\nStatistics per row group and per page All fields are …\nEmpty structs to use as logical type annotations\nA date/time combination\nA date/time combination\nA time.\nA time\nTime logical type annotation\nTimestamp logical type annotation\nTypes supported by Parquet.  These types are intended to …\nEmpty struct to signal the order defined by the physical …\nAn unsigned integer value.\na BYTE_ARRAY actually contains UTF8 encoded chars\nThe compression used in the Bloom filter.\nHash strategy type annotation. xxHash is an extremely fast …\nUnique file identifier part of AAD suffix *\nUnique file identifier part of AAD suffix *\nAAD prefix *\nAAD prefix *\nThe algorithm for setting bits. *\nByte offset from beginning of file to Bloom filter data. *\nStores whether both min_values and max_values are orderd …\nCompression codec *\nThe column index (in this row group) *\nSize of ColumnChunk’s ColumnIndex, in bytes *\nFile offset of ColumnChunk’s ColumnIndex *\nSort order used for the min_value and max_value fields in …\nMetadata for each column chunk in this row group. This …\nCompressed (and potentially encrypted) page size in bytes, …\nSize of the page, including header. Sum of …\nThe compression used in the Bloom filter *\nDEPRECATED: When the schema is the result of a conversion …\nnumber of pages of this type with this encoding *\nThe 32bit CRC for the page, to be be calculated as follows:\nString for application that wrote this file.  This should …\nCrypto metadata of encrypted columns *\nByte offset from beginning of file to first data page *\nEncoding used for definition levels *\nlength of the definition levels\nIf true, indicates this column is sorted in descending …\nByte offset from the beginning of file to first (only) …\ncount of distinct values occurring\nEncoding used for this data page *\nEncoding using this dictionary page *\nEncoding used for data in this page *\nencoding of the page *\nSet of all encodings used for pages in this column chunk. …\nSet of all encodings used for this column. The purpose is …\nEncrypted column metadata for this chunk *\nEncryption algorithm. This field is set only in encrypted …\nEncryption algorithm. This field is only used for files …\nWhen the original schema supports field ids, this will …\nByte offset in file_path to the ColumnMetaData *\nByte offset from beginning of file to first page (data or …\nFile where column data is stored.  If not set, assumed to …\nIndex within the RowGroup of the first row of the page; …\nRetrieval metadata of key used for signing the footer. …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe hash function used for Bloom filter. *\nByte offset from beginning of file to root index page *\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nwhether the values are compressed. Which means the section …\nIf true, the entries in the dictionary are sorted in …\nRetrieval metadata of column encryption key *\nRetrieval metadata of key used for encryption of footer, …\nOptional key/value metadata *\nOptional key/value metadata *\nThe logical type of this SchemaElement\nDEPRECATED: min and max value of the column. Use min_value …\nMin and max values for the column, determined by its …\nColumn metadata for this chunk. This is the same content …\nTwo lists containing lower and upper bounds for the values …\nName of the field in the schema\ncount of null value in the column\nA list containing the number of null values for each page *\nA list of Boolean values to determine the validity of the …\nIf true, nulls will come before non-null values, otherwise,\nThe size of bitset in bytes *\nNested fields.  Since thrift does not support nested …\nNumber of NULL values, in this data page. Number of …\nNumber of rows in this data page. which means pages change …\nNumber of rows in this row group *\nNumber of rows in this file *\nNumber of values, including NULLs, in this data page. *\nNumber of values in the dictionary *\nNumber of values, including NULLs, in this data page. *\nNumber of values in this column *\nOffset of the page in the file *\nSize of ColumnChunk’s OffsetIndex, in bytes *\nFile offset of ColumnChunk’s OffsetIndex *\nRow group ordinal in the file *\nPageLocations, ordered by increasing PageLocation.offset. …\nthe page type (data/dic/…) *\nPath in schema *\nColumn path in schema *\nEncoding used for repetition levels *\nlength of the repetition levels\nrepetition of the field. The root of the schema does not …\nRow groups in this file *\nDEPRECATED: Used when this column contains decimal data. …\nParquet schema for this file.  This schema contains …\nIf set, specifies a sort ordering of the rows in this …\nOptional statistics for the data in this page*\noptional statistics for the data in this page *\noptional statistics for this column chunk\nIn files encrypted with AAD prefix without storing it, …\nIn files encrypted with AAD prefix without storing it, …\nTotal byte size of all the uncompressed column data in …\ntotal byte size of all compressed, and potentially …\nTotal byte size of all compressed (and potentially …\ntotal byte size of all uncompressed pages in this column …\nData type for this field. Not set if the current element …\nthe type of the page: indicates which of the *_header …\nType of this column *\nIf type is FIXED_LEN_BYTE_ARRAY, this is the byte length …\nUncompressed page size in bytes (not including this …\nVersion of this file *\nThe transport channel cannot be opened because it was …\nErrors encountered within auto-generated code, or when …\nInformation about errors in auto-generated code or in …\nAuto-generated or user-implemented code error categories.\nReceived an out-of-order Thrift message.\nUnsupported or unknown Thrift protocol version.\nReached the maximum nested depth to which an encoded …\nA read could not complete because no bytes were available.\nContains the error value\nError type returned by all runtime library functions.\nAuto-generated code failed unexpectedly.\nAn invalid argument was supplied to a library function, or …\nReceived an unknown Thrift message type. That is, not one …\nThrift endpoint requested, or is using, an unsupported …\n<em>Unknown</em>. Included only for compatibility with existing …\nService reply is missing required fields.\nAn invalid (buffer/message) size was requested or received.\nAn invalid size was received in an encoded field.\nUnsupported Thrift protocol, server or field type.\nAn I/O operation was attempted when the transport channel …\nContains the success value\nErrors encountered during runtime-library processing.\nInformation about errors that occur in the runtime library.\nThrift protocol error. When possible use …\nRuntime library error categories.\nResult type returned by all runtime library functions.\nToo large a buffer or message size was requested or …\nThrift message or field was too long.\nAn I/O operation timed out.\nErrors encountered while operating on I/O channels.\nInformation about I/O errors.\nI/O error categories.\nCatch-all I/O error.\nCatch-all runtime-library error.\nCatch-all application error.\nMade service call to an unknown service method.\nThrift endpoint requested, or is using, an unsupported …\nMethod name in a service reply does not match the name of …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nI/O error variant.\nProtocol error variant.\nApplication error variant.\nHuman-readable error message.\nHuman-readable error message.\nHuman-readable error message.\nCreate a new <code>TransportError</code>.\nCreate a new <code>ProtocolError</code>.\nCreate a new <code>ApplicationError</code>.\nCreate a new <code>Error</code> instance of type <code>Application</code> that wraps …\nCreate a new <code>Error</code> instance of type <code>Protocol</code> that wraps a …\nCreate a new <code>Error</code> instance of type <code>Transport</code> that wraps a …\nTypes used to send and receive primitives between a Thrift …\nCreate an <code>ApplicationError</code> from its wire representation.\nConvert an <code>ApplicationError</code> into its wire representation …\nBoolean.\nService-call request.\nDouble-precision number.\nUnexpected error in the remote service.\nSigned 8-bit int.\nSigned 16-bit int.\nSigned 32-bit int.\nSigned 64-bit int.\nList.\nMap.\nOne-way service-call request (no response is expected).\nService-call response.\nSet.\nIndicates that there are no more serialized fields in this …\nUTF-8 string.\nThrift struct.\nRead messages encoded in the Thrift compact protocol.\nWrite messages using the Thrift compact protocol.\nThrift field identifier.\nConverts a stream of bytes into Thrift identifiers, …\nThrift list identifier.\nThrift map identifier.\nThrift message identifier.\nThrift message types.\nConverts Thrift identifiers, primitives, containers or …\nThrift set identifier.\nThrift struct identifier.\nThrift struct-field types.\nUTF-16 string. <em>Unsupported</em>.\nUTF-7 string. <em>Unsupported</em>.\nUTF-8 string.\nVoid (<code>()</code>) field.\nType of the elements in the list.\nType of the elements in the set.\nExtract the field id from a Thrift field identifier.\nField type.\nFlush buffered bytes to the underlying transport.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThrift field id.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMap key type.\nMessage type.\nService call the message is associated with.\nName of the encoded Thrift struct.\nName of the Thrift field.\nCreate a <code>TCompactInputProtocol</code> that reads bytes from <code>reader</code>…\nCreate a <code>TCompactOutputProtocol</code> that writes bytes to …\nCreate a <code>TMessageIdentifier</code> for a Thrift service-call …\nCreate a <code>TStructIdentifier</code> for a struct named <code>name</code>.\nCreate a <code>TFieldIdentifier</code> for a field named <code>name</code> with type …\nCreate a <code>TListIdentifier</code> for a list with <code>size</code> elements of …\nCreate a <code>TSetIdentifier</code> for a set with <code>size</code> elements of …\nCreate a <code>TMapIdentifier</code> for a map with <code>size</code> entries of type\nRead a bool.\nRead an unsigned byte.\nRead a fixed-length byte array.\nRead a 64-bit float.\nRead the beginning of a Thrift struct field.\nRead the end of a Thrift struct field.\nRead a 16-bit signed integer.\nRead a 32-bit signed integer.\nRead a 64-bit signed integer.\nRead a word.\nRead the beginning of a list.\nRead the end of a list.\nRead the beginning of a map.\nRead the end of a map.\nRead the beginning of a Thrift message.\nRead the end of a Thrift message.\nRead the beginning of a set.\nRead the end of a set.\nRead a fixed-length string (not null terminated).\nRead the beginning of a Thrift struct.\nRead the end of a Thrift struct.\nOrdered sequence number identifying the message.\nNumber of elements in the list.\nNumber of elements in the set.\nNumber of entries in the map.\nSkip a field with type <code>field_type</code> recursively until the …\nSkip a field with type <code>field_type</code> recursively up to <code>depth</code> …\nMap value type.\nCompare the expected message type <code>expected</code> with the …\nCompare the expected message sequence number <code>expected</code> with …\nCompare the expected service-call name <code>expected</code> with the …\nCheck if a required Thrift struct field exists.\nWrite a bool.\nWrite an unsigned byte.\nWrite a fixed-length byte array.\nWrite a 64-bit float.\nWrite the beginning of a Thrift field.\nWrite the end of a Thrift field.\nWrite a STOP field indicating that all the fields in a …\nWrite a 16-bit signed integer.\nWrite a 32-bit signed integer.\nWrite a 64-bit signed integer.\nWrite an 8-bit signed integer.\nWrite the beginning of a list.\nWrite the end of a list.\nWrite the beginning of a map.\nWrite the end of a map.\nWrite the beginning of a Thrift message.\nWrite the end of a Thrift message.\nWrite the beginning of a set.\nWrite the end of a set.\nWrite a fixed-length string.\nWrite the beginning of a Thrift struct.\nWrite the end of a Thrift struct.\nVarint (variable length integer) encoding, as described in …\nA trait for reading VarInts from any other <code>Reader</code>.\nA trait for writing integers in VarInt encoding to any …\nDecode a value from the slice. Returns the value and the …\nEncode a value into the slice. The slice must be at least …\nHelper: Encode a value and return the encoded form as Vec. …\nHelper: Encode a value and return the encoded form as Vec. …\nReturns either the decoded integer, or an error.\nReturns the number of bytes this number needs in its …")