searchState.loadedDescShard("argmin", 0, "A pure Rust optimization framework\nRelease an <code>T</code> from an <code>Option&lt;T&gt;</code> if it is not <code>None</code>. If it is …\nCore functionality Argmin Optimizaton toolbox core\nCreates an <code>ArgminKV</code> at compile time in order to avoid …\nDefinition of all relevant traits and types\nSolvers\nReuse a list of trait bounds by giving it a name, e.g. …\nAborted\nAcceped stall iter exceeded\nCall observer in every iteration\nCreate checkpoint in every iteration\nAdd a <code>T</code> to <code>self</code>\nCheckpoint\nReturn the conjugate\n(Pointwise) Divide a <code>T</code> by <code>self</code>\nDot/scalar product of <code>T</code> and <code>self</code>\nArgmin error type\nIdentity matrix\nTrait alias to simplify common trait bounds\nCompute the inverse (<code>T</code>) of <code>self</code>\nThe datastructure which is returned by the <code>next_iter</code> …\nA simple key-value storage\nDefines a common interface for line search methods.\nMinimum and Maximum of type <code>T</code>\n(Pointwise) Multiply a <code>T</code> with <code>self</code>\nCommon interface for beta update methods (Nonlinear-CG)\nCompute the l2-norm (<code>U</code>) of <code>self</code>\nThis trait needs to be implemented for every operator/cost …\nCreate a random number\nFinal struct returned by the <code>run</code> method of <code>Executor</code>.\nAdd a <code>T</code> scaled by an <code>U</code> to <code>self</code>\nSubtract a <code>T</code> scaled by an <code>U</code> from <code>self</code>\nThis type is necessary in order to be able to implement …\nA logger based on <code>slog</code>\nSubtract a <code>T</code> from <code>self</code>\nTransposing a type\nDefines a common interface to methods which calculate …\nDot/scalar product of <code>T</code> and <code>self</code> weighted by W (p^TWv)\nReturn param vector of all zeros (for now, this is a hack. …\nZero for dynamically sized objects\nBest stall iter exceeded\nBincode\nDefines at which intervals a checkpoint is saved.\nCheckpoint was not found\nIndicates that a condition is violated\nThe <code>Error</code> type, a wrapper around a dynamic error type.\nCall observer every N iterations\nCreate checkpoint every N iterations\nPrecision of floats\nType of Hessian\nIndicates an impossible error\nIndicates and invalid parameter\nMaintains the state from iteration to iteration of a solver\nJSON\nType of Jacobian\nCondition for Line search met\nMaximum number of iterations reached\nMinimal No-op operator which does nothing, really.\nName of the solver\nNever call the observer\nNever create checkpoint\nCall observer when new best is found\nCost function value did not change\nFake Operators for testing No-op operator with free choice …\nIndicates that a function is not implemented\nIndicates that a function is not initialized\nIn case it has not terminated yet\nDefines the interface every Observer needs to expose\nContainer for observers which acts just like a single …\nThis is used to indicate how often the observer will …\nThis wraps an operator and keeps track of how often the …\nOutput of the operator\nType of the parameter vector\nSolver\nTarget cost function value reached\nTarget precision reached\nTarget tolerance reached\nIndicates why the optimization algorithm stopped\nWrite parameter vectors to file\nDifferent kinds of serializers\nAdd a <code>T</code> to <code>self</code>\nApplies the operator/cost function to parameters\nDo nothing, really.\nDo nothing, really.\nCalls the <code>apply</code> method of <code>op</code> and increments <code>cost_func_count</code>…\nGet the backtrace for this Error.\nSet the current best cost function value. This shifts the …\nCurrent best cost function value\nSet best paramater vector. This shifts the stored best …\nCurrent best parameter vector\nAn iterator of the chain of source errors contained by …\nReturn conjugate\nAdds function evaluation counts of another operator.\nConsumes an operator by increasing the function call …\nWrap the error value with additional context.\nSet the current cost function value. This shifts the …\nSet cost function value\nCurrent cost function value\nNumber of cost function evaluations so far\nNumber of cost function evaluations\nThe default is <code>Always</code>\nGet directory of checkpoint\n(Pointwise) Divide a <code>T</code> by <code>self</code>\nDot/scalar product of <code>T</code> and <code>self</code>\nAttempt to downcast the error object to a concrete type.\nDowncast this error object by mutable reference.\nDowncast this error object by reference.\nExecutor\nIdentity matrix of size <code>n</code>\nIdentity matrix of same size as <code>self</code>\nOutput parameter vectors to file\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns current best cost function value\nReturns best parameter vector\nReturns current cost function value\nGet cost function value\nReturns current cost function evaluation count\nReturns gradient\nGet gradient\nReturns current gradient function evaluation count\nReturns current Hessian\nGet Hessian\nReturns current Hessian function evaluation count\nReturns current number of iterations\nReturns current Jacobian\nGet Jacobian\nReturns current Jacobian function evaluation count\nReturn KV\nReturns iteration number where the last best parameter …\nReturns maximum number of iterations\nReturns current Modify function evaluation count\nReturns the operator <code>op</code> by taking ownership of <code>self</code>.\nReturns current parameter vector\nGet parameter vector\nReturns population\nGet reference to population\nReturns previous best cost function value\nReturns previous best parameter vector\nReturns previous cost function value\nReturns previous gradient\nReturns previous Hessian\nReturns previous Jacobian\nReturns previous parameter vector\nReturns target cost\nGet termination_reason\nGet termination reason\nGet time required so far\nSet gradient. This shifts the stored gradient to the …\nSet gradient\nCurrent gradient\nNumber of gradient evaluations so far\nNumber of gradient function evaluations\nComputes the gradient at the given parameters\nDo nothing, really.\nDo nothing, really.\nCalls the <code>gradient</code> method of <code>op</code> and increments …\nComputes the Hessian at the given parameters\nSet Hessian. This shifts the stored Hessian to the …\nDo nothing, really.\nDo nothing, really.\nCalls the <code>hessian</code> method of <code>op</code> and increments …\nSet Hessian\nCurrent Hessian\nNumber of Hessian evaluations so far\nNumber of Hessian function evaluations\nIncrement cost function evaluation count by <code>num</code>\nIncrement all function evaluation counts by the evaluation …\nIncrement gradient function evaluation count by <code>num</code>\nIncrement Hessian function evaluation count by <code>num</code>\nIncrement the number of iterations by one\nIncrement Jacobian function evaluation count by <code>num</code>\nIncrement modify function evaluation count by <code>num</code>\nInitializes the algorithm\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCompute the inverse\nReturns true if <code>E</code> is the type held by this error object.\nReturns whether the current parameter vector is also the …\nCurrent iteration\nComputes the Hessian at the given parameters\nSet Jacobian. This shifts the stored Jacobian to the …\nCalls the <code>jacobian</code> method of <code>op</code> and increments …\nSet Jacobian\nCurrent Jacobian\nNumber of Jacobian evaluations so far\nNumber of Jacobian function evaluations\nAdds an <code>ArgminKV</code>\nKey value store\nThe actual key value storage\nSet iteration number where the previous best parameter …\nIteration number of last best cost\nLoad a checkpoint from disk\nMacros\nSelect piecewise maximum\nSet maximum number of iterations\nMaximum number of iterations\nMerge another <code>kv</code> into <code>self.kv</code>\nSelect piecewise minimum\nModifies a parameter vector. Comes with a variable that …\nDo nothing, really.\nDo nothing, really.\nCalls the <code>modify</code> method of <code>op</code> and increments …\nNumber of modify evaluations so far\nNumber of <code>modify</code> function evaluations\nCreate a new error object from a printable error message.\n(Pointwise) Multiply a <code>T</code> with <code>self</code>\nGet name of checkpoint\nCreate a new error object from any error type.\nCreate new IterState from <code>param</code>\nConstructor\nConstructor\nConstructor\nConstructor\nConstructor\nConstructor\nDefine a new checkpoint\nConstructor\nIndicate that a new best parameter vector was found\nConstruct struct from other <code>OpWrapper</code>. Takes the operator …\nComputes one iteration of the algorithm.\nCompute the l2-norm (<code>U</code>) of <code>self</code>\nCalled once at the beginning of the execution of the …\nCalled once at the beginning of the execution of the …\nInitial observation This is called after the …\nCalled at every iteration of the solver\nCalled at every iteration of the solver\nThis is called after every iteration and gets the current …\nOperator\nReturn handle to operator\noperator\nSet parameter vector. This shifts the stored parameter …\nSet parameter vector\nCurrent parameter vector\nSet population\nSet Population\nAll members for population-based algorithms as (param, …\nPrevious best cost function value\nPrevious best parameter vector\nPrevious cost function value\nPrevious gradient\nPrevious Hessian\nPrevious Jacobian\nPrevious parameter vector\nPush a key-value pair to the <code>kv</code> vector.\nPush another <code>Observe</code> to the <code>observer</code> field\nGet a random element between min and max,\nReset the cost function counts to zero.\nThe lowest level cause of this error — this error’s …\nAdd a <code>T</code> scaled by an <code>U</code> to <code>self</code>\nSubtract a <code>T</code> scaled by an <code>U</code> from <code>self</code>\nSet directory of checkpoint\nSet all function evaluation counts to the evaluation …\nSet the initial step length\nSet mode of checkpoint\nSet name of checkpoint\nSet the initial step length\nSet the search direction\nLoggers based on the <code>slog</code> crate\nReturn handle to state\niteration state\nWrite checkpoint to disk\nWrite checkpoint based on the desired <code>CheckpointMode</code>\nSubtract a <code>T</code> from <code>self</code>\nTranspose\nMoves the operator out of the struct and replaces it with …\nSet target cost value\nTarget cost function value\nChecks whether the algorithm must be terminated\nChecks whether basic termination reasons apply.\nReturn whether the algorithm has terminated or not\nReturns <code>true</code> if a solver terminated and <code>false</code> otherwise\nSet termination_reason\nSet termination reason\nReason of termination\nReturns a texual representation of what happened\nSet time required so far\nTime required so far\nUpdate beta Parameter 1: \\nabla f_k Parameter 2: \\nabla f_…\nDot/scalar product of <code>T</code> and <code>self</code>\nReturn zero(s)\nReturn zero(s)\nText\nText\nText\nText\nText\nText\nExecutes a solver\nAttaches a observer which implements <code>ArgminLog</code> to the …\nSet checkpoint directory\nSet the checkpoint mode\nSet checkpoint name\nSet cost value\nTurn Ctrl-C handling on or off (default: on)\nReturns the argument unchanged.\nCreate a new executor from a checkpoint\nSet Gradient\nSet Hessian\nCalls <code>U::from(self)</code>.\nSet Jacobian\nSet maximum number of iterations\nCreate a new executor with a <code>solver</code> and an initial …\noperator\nRun the executor\nSet target cost value\nBincode\nJSON\nWrite parameter vectors to file\nDifferent kinds of serializers\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new <code>WriteToFile</code> struct\nSet serializer\nThis type is necessary in order to be able to implement …\nA logger based on <code>slog</code>\nLog JSON to a file in a blocking way\nLog JSON to a file in a non-blocking way (in case of …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nKey value store\nLog general info\nThis should be used to log iteration data only (because …\nLog to the terminal in a blocking way\nLog to the terminal in a non-blocking way (in case of …\nA generic interface for casting between machine scalars …\nNumbers which have upper and lower bounds\nPerforms addition that returns <code>None</code> instead of wrapping …\nPerforms division that returns <code>None</code> instead of panicking …\nPerforms multiplication that returns <code>None</code> instead of …\nPerforms negation that returns <code>None</code> if the result can’t …\nPerforms an integral remainder that returns <code>None</code> instead …\nPerforms a left shift that returns <code>None</code> on shifts larger …\nPerforms a right shift that returns <code>None</code> on shifts larger …\nPerforms subtraction that returns <code>None</code> instead of wrapping …\nDefines an associated constant representing the …\nDefines an associated constant representing the additive …\nReturn Euler’s number.\nReturn <code>1.0 / π</code>.\nReturn <code>1.0 / sqrt(2.0)</code>.\nReturn <code>2.0 / π</code>.\nReturn <code>2.0 / sqrt(π)</code>.\nReturn <code>π / 2.0</code>.\nReturn <code>π / 3.0</code>.\nReturn <code>π / 4.0</code>.\nReturn <code>π / 6.0</code>.\nReturn <code>π / 8.0</code>.\nGeneric trait for floating point numbers\nA generic trait for converting a number to a value.\nUnary operator for retrieving the multiplicative inverse, …\nReturn <code>ln(10.0)</code>.\nReturn <code>ln(2.0)</code>.\nReturn <code>log10(2.0)</code>.\nReturn <code>log10(e)</code>.\nReturn <code>log2(10.0)</code>.\nReturn <code>log2(e)</code>.\nFused multiply-add. Computes <code>(self * a) + b</code> with only one …\nThe fused multiply-add assignment operation …\nThe base trait for numeric types, covering <code>0</code> and <code>1</code> values, …\nThe trait for <code>Num</code> types which also implement assignment …\nGeneric trait for types implementing numeric assignment …\nThe trait for <code>NumAssign</code> types which also implement …\nAn interface for casting between machine scalars.\nGeneric trait for types implementing basic numeric …\nThe trait for <code>Num</code> types which also implement numeric …\nThe multiplicative identity element of <code>Self</code>, <code>1</code>.\nDefines a multiplicative identity element for <code>Self</code>.\nThe result after applying the operator.\nThe resulting type after applying the fused multiply-add.\nThe result after applying the operator.\nReturn Archimedes’ constant <code>π</code>.\nBinary operator for raising a value to a power.\nGeneric trait for primitive integers.\nThe trait for <code>Num</code> references which implement numeric …\nReturn <code>sqrt(2.0)</code>.\nSaturating math operations. Deprecated, use <code>SaturatingAdd</code>, …\nPerforms addition that saturates at the numeric bounds …\nPerforms multiplication that saturates at the numeric …\nPerforms subtraction that saturates at the numeric bounds …\nUseful functions for signed numbers (i.e. numbers that can …\nReturn the full circle constant <code>τ</code>.\nA generic trait for converting a value to a number.\nA trait for values which cannot be negative\nPerforms addition that wraps around on overflow.\nPerforms multiplication that wraps around on overflow.\nPerforms a negation that does not panic.\nPerforms a left shift that does not panic.\nPerforms a right shift that does not panic.\nPerforms subtraction that wraps around on overflow.\nThe additive identity element of <code>Self</code>, <code>0</code>.\nDefines an additive identity element for <code>Self</code>.\nComputes the absolute value.\nComputes the absolute value of <code>self</code>. Returns <code>Float::nan()</code> …\nComputes the absolute value.\nThe positive difference of two numbers.\nThe positive difference of two numbers.\nThe positive difference of two numbers.\nComputes the arccosine of a number. Return value is in …\nInverse hyperbolic cosine function.\nConvert a value to another, using the <code>as</code> operator.\nComputes the arcsine of a number. Return value is in …\nInverse hyperbolic sine function.\nComputes the arctangent of a number. Return value is in …\nComputes the four quadrant arctangent of <code>self</code> (<code>y</code>) and <code>other</code>…\nInverse hyperbolic tangent function.\nCast from one machine scalar to another.\nTake the cubic root of a number.\nReturns the smallest integer greater than or equal to a …\nAdds two numbers, checking for overflow. If overflow …\nDivides two numbers, checking for underflow, overflow and …\nPerforms euclid division that returns <code>None</code> instead of …\nReturns both the quotient and remainder from checked …\nMultiplies two numbers, checking for underflow or …\nNegates a number, returning <code>None</code> for results that can’t …\nRaises a value to the power of exp, returning <code>None</code> if an …\nFinds the remainder of dividing two numbers, checking for …\nFinds the euclid remainder of dividing two numbers, …\nChecked shift left. Computes <code>self &lt;&lt; rhs</code>, returning <code>None</code> …\nChecked shift right. Computes <code>self &gt;&gt; rhs</code>, returning <code>None</code> …\nSubtracts two numbers, checking for underflow. If …\nA value bounded by a minimum and a maximum\nClamps a value between a min and max.\nA value bounded by a maximum value\nA value bounded by a minimum value\nReturns the floating point category of the number. If only …\nReturns a number composed of the magnitude of <code>self</code> and the …\nComputes the cosine of a number (in radians).\nHyperbolic cosine function.\nReturns the number of ones in the binary representation of …\nReturns the number of zeros in the binary representation …\nCalculates Euclidean division, the matching method for …\nReturns both the quotient and remainder from Euclidean …\nReturns epsilon, a small positive value.\nReturns <code>e^(self)</code>, (the exponential function).\nReturns <code>2^(self)</code>.\nReturns <code>e^(self) - 1</code> in a way that is accurate even if the …\nReturns the largest integer less than or equal to a number.\nReturns the fractional part of a number.\nCreates a number from another value that can be converted …\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert an integer from big endian to the target’s …\nCreate a number from its representation as a byte array in …\nConverts a <code>f32</code> to return an optional value of this type. …\nConverts a <code>f64</code> to return an optional value of this type. …\nConverts an <code>i128</code> to return an optional value of this type. …\nConverts an <code>i16</code> to return an optional value of this type. …\nConverts an <code>i32</code> to return an optional value of this type. …\nConverts an <code>i64</code> to return an optional value of this type. …\nConverts an <code>i8</code> to return an optional value of this type. …\nConverts an <code>isize</code> to return an optional value of this …\nConvert an integer from little endian to the target’s …\nCreate a number from its representation as a byte array in …\nCreate a number from its memory representation as a byte …\nConvert from a string and radix (typically <code>2..=36</code>).\nConverts an <code>u128</code> to return an optional value of this type. …\nConverts an <code>u16</code> to return an optional value of this type. …\nConverts an <code>u32</code> to return an optional value of this type. …\nConverts an <code>u64</code> to return an optional value of this type. …\nConverts an <code>u8</code> to return an optional value of this type. …\nConverts a <code>usize</code> to return an optional value of this type. …\nCalculate the length of the hypotenuse of a right-angle …\nReturns the infinite value.\nReturns the mantissa, base 2 exponent, and sign as …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the multiplicative inverse of <code>self</code>.\nReturns <code>true</code> if this number is neither infinite nor <code>NaN</code>.\nReturns <code>true</code> if this value is positive infinity or …\nReturns <code>true</code> if this value is <code>NaN</code> and false otherwise.\nReturns true if the number is negative and false if the …\nReturns <code>true</code> if the number is neither zero, infinite, …\nReturns <code>true</code> if <code>self</code> is equal to the multiplicative …\nReturns true if the number is positive and false if the …\nReturns <code>true</code> if <code>self</code> is negative, including <code>-0.0</code>, …\nReturns <code>true</code> if <code>self</code> is positive, including <code>+0.0</code>, …\nReturns <code>true</code> if the number is subnormal.\nReturns <code>true</code> if <code>self</code> is equal to the additive identity.\nReturns the number of leading ones in the binary …\nReturns the number of leading zeros in the binary …\nReturns the natural logarithm of the number.\nReturns <code>ln(1+n)</code> (natural logarithm) more accurately than if\nReturns the logarithm of the number with respect to an …\nReturns the base 10 logarithm of the number.\nReturns the base 2 logarithm of the number.\nReturns the maximum of the two numbers.\nReturns the largest finite number this type can represent\nReturns the largest finite value that this type can …\nReturns the minimum of the two numbers.\nReturns the smallest positive, normalized value that this …\nReturns the smallest finite number this type can represent\nReturns the smallest finite value that this type can …\nFused multiply-add. Computes <code>(self * a) + b</code> with only one …\nPerforms the fused multiply-add operation <code>(self * a) + b</code>\nPerforms the fused multiply-add assignment operation …\nReturns the <code>NaN</code> value.\nReturns the negative infinite value.\nReturns <code>-0.0</code>.\nReturns the multiplicative identity, <code>1</code>.\nReturns the multiplicative identity element of <code>Self</code>, <code>1</code>.\nRaises a value to the power of exp, using exponentiation …\nRaises self to the power of <code>exp</code>, using exponentiation by …\nReturns <code>self</code> to the power <code>rhs</code>.\nRaise a number to a floating point power.\nRaise a number to an integer power.\nTake the reciprocal (inverse) of a number, <code>1/x</code>.\nCalculates the least nonnegative remainder of <code>self (mod v)</code>.\nReverses the order of bits in the integer.\nShifts the bits to the left by a specified amount, <code>n</code>, …\nShifts the bits to the right by a specified amount, <code>n</code>, …\nReturns the nearest integer to a number. Round half-way …\nSaturating addition operator. Returns a+b, saturating at …\nSaturating addition. Computes <code>self + other</code>, saturating at …\nSaturating multiplication. Computes <code>self * other</code>, …\nSaturating subtraction operator. Returns a-b, saturating …\nSaturating subtraction. Computes <code>self - other</code>, saturating …\nSets <code>self</code> to the multiplicative identity element of <code>Self</code>, <code>1</code>…\nSets <code>self</code> to the additive identity element of <code>Self</code>, <code>0</code>.\nShifts the bits to the left by a specified amount, <code>n</code>, …\nShifts the bits to the right by a specified amount, <code>n</code>, …\nReturns the sign of the number.\nReturns a number that represents the sign of <code>self</code>.\nReturns the sign of the number.\nComputes the sine of a number (in radians).\nSimultaneously computes the sine and cosine of the number, …\nHyperbolic sine function.\nTake the square root of a number.\nReverses the byte order of the integer.\nComputes the tangent of a number (in radians).\nHyperbolic tangent function.\nConvert <code>self</code> to big endian from the target’s endianness.\nReturn the memory representation of this number as a byte …\nConverts radians to degrees.\nConverts the value of <code>self</code> to an <code>f32</code>. Overflows may map to …\nConverts the value of <code>self</code> to an <code>f64</code>. Overflows may map to …\nConverts the value of <code>self</code> to an <code>i128</code>. If the value cannot …\nConverts the value of <code>self</code> to an <code>i16</code>. If the value cannot …\nConverts the value of <code>self</code> to an <code>i32</code>. If the value cannot …\nConverts the value of <code>self</code> to an <code>i64</code>. If the value cannot …\nConverts the value of <code>self</code> to an <code>i8</code>. If the value cannot be\nConverts the value of <code>self</code> to an <code>isize</code>. If the value …\nConvert <code>self</code> to little endian from the target’s …\nReturn the memory representation of this number as a byte …\nReturn the memory representation of this number as a byte …\nConverts degrees to radians.\nConverts the value of <code>self</code> to a <code>u128</code>. If the value cannot …\nConverts the value of <code>self</code> to a <code>u16</code>. If the value cannot be\nConverts the value of <code>self</code> to a <code>u32</code>. If the value cannot be\nConverts the value of <code>self</code> to a <code>u64</code>. If the value cannot be\nConverts the value of <code>self</code> to a <code>u8</code>. If the value cannot be …\nConverts the value of <code>self</code> to a <code>usize</code>. If the value cannot …\nReturns the number of trailing ones in the binary …\nReturns the number of trailing zeros in the binary …\nReturn the integer part of a number.\nShifts the bits to the left by a specified amount, <code>n</code>, …\nShifts the bits to the right by a specified amount, <code>n</code>, …\nWrapping (modular) addition. Computes <code>self + other</code>, …\nWrapping (modular) multiplication. Computes <code>self * other</code>, …\nWrapping (modular) negation. Computes <code>-self</code>, wrapping …\nPanic-free bitwise shift-left; yields <code>self &lt;&lt; mask(rhs)</code>, …\nPanic-free bitwise shift-right; yields <code>self &gt;&gt; mask(rhs)</code>, …\nWrapping (modular) subtraction. Computes <code>self - other</code>, …\nReturns the additive identity, <code>0</code>.\nReturns the additive identity element of <code>Self</code>, <code>0</code>.\nNumbers which have upper and lower bounds\nNumbers which have lower bounds\nNumbers which have upper bounds\nReturns the largest finite number this type can represent\nReturns the largest finite number this type can represent\nReturns the smallest finite number this type can represent\nReturns the smallest finite number this type can represent\nA generic interface for casting between machine scalars …\nA generic trait for converting a number to a value.\nAn interface for casting between machine scalars.\nA generic trait for converting a value to a number.\nConvert a value to another, using the <code>as</code> operator.\nCast from one machine scalar to another.\nCreates a number from another value that can be converted …\nConverts a <code>f32</code> to return an optional value of this type. …\nConverts a <code>f64</code> to return an optional value of this type. …\nConverts an <code>i128</code> to return an optional value of this type. …\nConverts an <code>i16</code> to return an optional value of this type. …\nConverts an <code>i32</code> to return an optional value of this type. …\nConverts an <code>i64</code> to return an optional value of this type. …\nConverts an <code>i8</code> to return an optional value of this type. …\nConverts an <code>isize</code> to return an optional value of this …\nConverts an <code>u128</code> to return an optional value of this type. …\nConverts an <code>u16</code> to return an optional value of this type. …\nConverts an <code>u32</code> to return an optional value of this type. …\nConverts an <code>u64</code> to return an optional value of this type. …\nConverts an <code>u8</code> to return an optional value of this type. …\nConverts a <code>usize</code> to return an optional value of this type. …\nConverts the value of <code>self</code> to an <code>f32</code>. Overflows may map to …\nConverts the value of <code>self</code> to an <code>f64</code>. Overflows may map to …\nConverts the value of <code>self</code> to an <code>i128</code>. If the value cannot …\nConverts the value of <code>self</code> to an <code>i16</code>. If the value cannot …\nConverts the value of <code>self</code> to an <code>i32</code>. If the value cannot …\nConverts the value of <code>self</code> to an <code>i64</code>. If the value cannot …\nConverts the value of <code>self</code> to an <code>i8</code>. If the value cannot be\nConverts the value of <code>self</code> to an <code>isize</code>. If the value …\nConverts the value of <code>self</code> to a <code>u128</code>. If the value cannot …\nConverts the value of <code>self</code> to a <code>u16</code>. If the value cannot be\nConverts the value of <code>self</code> to a <code>u32</code>. If the value cannot be\nConverts the value of <code>self</code> to a <code>u64</code>. If the value cannot be\nConverts the value of <code>self</code> to a <code>u8</code>. If the value cannot be …\nConverts the value of <code>self</code> to a <code>usize</code>. If the value cannot …\nReturn Euler’s number.\nReturn <code>1.0 / π</code>.\nReturn <code>1.0 / sqrt(2.0)</code>.\nReturn <code>2.0 / π</code>.\nReturn <code>2.0 / sqrt(π)</code>.\nReturn <code>π / 2.0</code>.\nReturn <code>π / 3.0</code>.\nReturn <code>π / 4.0</code>.\nReturn <code>π / 6.0</code>.\nReturn <code>π / 8.0</code>.\nGeneric trait for floating point numbers\nGeneric trait for floating point numbers that works with …\nReturn <code>ln(10.0)</code>.\nReturn <code>ln(2.0)</code>.\nReturn <code>log10(2.0)</code>.\nReturn <code>log10(e)</code>.\nReturn <code>log2(10.0)</code>.\nReturn <code>log2(e)</code>.\nReturn Archimedes’ constant <code>π</code>.\nReturn <code>sqrt(2.0)</code>.\nReturn the full circle constant <code>τ</code>.\nTrait for floating point numbers that provide an …\nComputes the absolute value of <code>self</code>. Returns <code>Float::nan()</code> …\nComputes the absolute value of <code>self</code>. Returns …\nThe positive difference of two numbers.\nComputes the arccosine of a number. Return value is in …\nInverse hyperbolic cosine function.\nComputes the arcsine of a number. Return value is in …\nInverse hyperbolic sine function.\nComputes the arctangent of a number. Return value is in …\nComputes the four quadrant arctangent of <code>self</code> (<code>y</code>) and <code>other</code>…\nInverse hyperbolic tangent function.\nTake the cubic root of a number.\nReturns the smallest integer greater than or equal to a …\nReturns the smallest integer greater than or equal to a …\nA value bounded by a minimum and a maximum\nClamps a value between a min and max.\nReturns the floating point category of the number. If only …\nReturns the floating point category of the number. If only …\nReturns a number composed of the magnitude of <code>self</code> and the …\nComputes the cosine of a number (in radians).\nHyperbolic cosine function.\nReturns epsilon, a small positive value.\nReturns epsilon, a small positive value.\nReturns <code>e^(self)</code>, (the exponential function).\nReturns <code>2^(self)</code>.\nReturns <code>e^(self) - 1</code> in a way that is accurate even if the …\nReturns the largest integer less than or equal to a number.\nReturns the largest integer less than or equal to a number.\nReturns the fractional part of a number.\nReturns the fractional part of a number.\nCalculate the length of the hypotenuse of a right-angle …\nReturns positive infinity.\nReturns the infinite value.\nReturns the mantissa, base 2 exponent, and sign as …\nReturns the mantissa, base 2 exponent, and sign as …\nReturns <code>true</code> if this number is neither infinite nor <code>NaN</code>.\nReturns <code>true</code> if the number is neither infinite or NaN.\nReturns <code>true</code> if this value is positive infinity or …\nReturns <code>true</code> if the number is infinite.\nReturns <code>true</code> if this value is <code>NaN</code> and false otherwise.\nReturns <code>true</code> if the number is NaN.\nReturns <code>true</code> if the number is neither zero, infinite, …\nReturns <code>true</code> if the number is neither zero, infinite, …\nReturns <code>true</code> if <code>self</code> is negative, including <code>-0.0</code>, …\nReturns <code>true</code> if <code>self</code> is negative, including <code>-0.0</code> and …\nReturns <code>true</code> if <code>self</code> is positive, including <code>+0.0</code>, …\nReturns <code>true</code> if <code>self</code> is positive, including <code>+0.0</code> and …\nReturns <code>true</code> if the number is subnormal.\nReturns <code>true</code> if the number is subnormal.\nReturns the natural logarithm of the number.\nReturns <code>ln(1+n)</code> (natural logarithm) more accurately than if\nReturns the logarithm of the number with respect to an …\nReturns the base 10 logarithm of the number.\nReturns the base 2 logarithm of the number.\nReturns the maximum of the two numbers.\nReturns the maximum of the two numbers.\nReturns the largest finite value that this type can …\nReturns the largest finite value that this type can …\nReturns the minimum of the two numbers.\nReturns the minimum of the two numbers.\nReturns the smallest positive, normalized value that this …\nReturns the smallest positive, normalized value that this …\nReturns the smallest finite value that this type can …\nReturns the smallest finite value that this type can …\nFused multiply-add. Computes <code>(self * a) + b</code> with only one …\nReturns NaN.\nReturns the <code>NaN</code> value.\nReturns negative infinity.\nReturns the negative infinite value.\nReturns <code>-0.0</code>.\nReturns <code>-0.0</code>.\nRaise a number to a floating point power.\nRaise a number to an integer power.\nRaise a number to an integer power.\nTake the reciprocal (inverse) of a number, <code>1/x</code>.\nReturns the reciprocal (multiplicative inverse) of the …\nReturns the nearest integer to a number. Round half-way …\nReturns the nearest integer to a number. Round half-way …\nReturns a number that represents the sign of <code>self</code>.\nReturns a number that represents the sign of <code>self</code>.\nComputes the sine of a number (in radians).\nSimultaneously computes the sine and cosine of the number, …\nHyperbolic sine function.\nTake the square root of a number.\nComputes the tangent of a number (in radians).\nHyperbolic tangent function.\nConverts to degrees, assuming the number is in radians.\nConverts radians to degrees.\nConverts to radians, assuming the number is in degrees.\nConverts degrees to radians.\nReturn the ordering between <code>self</code> and <code>other</code>.\nReturn the integer part of a number.\nReturn the integer part of a number.\nDefines an associated constant representing the …\nDefines an associated constant representing the additive …\nThe multiplicative identity element of <code>Self</code>, <code>1</code>.\nDefines a multiplicative identity element for <code>Self</code>.\nThe additive identity element of <code>Self</code>, <code>0</code>.\nDefines an additive identity element for <code>Self</code>.\nReturns <code>true</code> if <code>self</code> is equal to the multiplicative …\nReturns <code>true</code> if <code>self</code> is equal to the additive identity.\nReturns the multiplicative identity, <code>1</code>.\nReturns the multiplicative identity element of <code>Self</code>, <code>1</code>.\nSets <code>self</code> to the multiplicative identity element of <code>Self</code>, <code>1</code>…\nSets <code>self</code> to the additive identity element of <code>Self</code>, <code>0</code>.\nReturns the additive identity, <code>0</code>.\nReturns the additive identity element of <code>Self</code>, <code>0</code>.\nGeneric trait for primitive integers.\nReturns the number of ones in the binary representation of …\nReturns the number of zeros in the binary representation …\nConvert an integer from big endian to the target’s …\nConvert an integer from little endian to the target’s …\nReturns the number of leading ones in the binary …\nReturns the number of leading zeros in the binary …\nRaises self to the power of <code>exp</code>, using exponentiation by …\nReverses the order of bits in the integer.\nShifts the bits to the left by a specified amount, <code>n</code>, …\nShifts the bits to the right by a specified amount, <code>n</code>, …\nShifts the bits to the left by a specified amount, <code>n</code>, …\nShifts the bits to the right by a specified amount, <code>n</code>, …\nReverses the byte order of the integer.\nConvert <code>self</code> to big endian from the target’s endianness.\nConvert <code>self</code> to little endian from the target’s …\nReturns the number of trailing ones in the binary …\nReturns the number of trailing zeros in the binary …\nShifts the bits to the left by a specified amount, <code>n</code>, …\nShifts the bits to the right by a specified amount, <code>n</code>, …\nCreate a number from its representation as a byte array in …\nCreate a number from its representation as a byte array in …\nCreate a number from its memory representation as a byte …\nReturn the memory representation of this number as a byte …\nReturn the memory representation of this number as a byte …\nReturn the memory representation of this number as a byte …\nPerforms addition that returns <code>None</code> instead of wrapping …\nPerforms division that returns <code>None</code> instead of panicking …\nPerforms multiplication that returns <code>None</code> instead of …\nPerforms negation that returns <code>None</code> if the result can’t …\nPerforms an integral remainder that returns <code>None</code> instead …\nPerforms a left shift that returns <code>None</code> on shifts larger …\nPerforms a right shift that returns <code>None</code> on shifts larger …\nPerforms subtraction that returns <code>None</code> instead of wrapping …\nAdds two numbers, checking for overflow. If overflow …\nDivides two numbers, checking for underflow, overflow and …\nMultiplies two numbers, checking for underflow or …\nNegates a number, returning <code>None</code> for results that can’t …\nFinds the remainder of dividing two numbers, checking for …\nChecked shift left. Computes <code>self &lt;&lt; rhs</code>, returning <code>None</code> …\nChecked shift right. Computes <code>self &gt;&gt; rhs</code>, returning <code>None</code> …\nSubtracts two numbers, checking for underflow. If …\nPerforms euclid division that returns <code>None</code> instead of …\nReturns both the quotient and remainder from checked …\nFinds the euclid remainder of dividing two numbers, …\nCalculates Euclidean division, the matching method for …\nReturns both the quotient and remainder from Euclidean …\nCalculates the least nonnegative remainder of <code>self (mod v)</code>.\nUnary operator for retrieving the multiplicative inverse, …\nThe result after applying the operator.\nReturns the multiplicative inverse of <code>self</code>.\nFused multiply-add. Computes <code>(self * a) + b</code> with only one …\nThe fused multiply-add assignment operation …\nThe resulting type after applying the fused multiply-add.\nPerforms the fused multiply-add operation <code>(self * a) + b</code>\nPerforms the fused multiply-add assignment operation …\nPerforms addition with a flag for overflow.\nPerforms multiplication with a flag for overflow.\nPerforms substraction with a flag for overflow.\nReturns a tuple of the sum along with a boolean indicating …\nReturns a tuple of the product along with a boolean …\nReturns a tuple of the difference along with a boolean …\nSaturating math operations. Deprecated, use <code>SaturatingAdd</code>, …\nPerforms addition that saturates at the numeric bounds …\nPerforms multiplication that saturates at the numeric …\nPerforms subtraction that saturates at the numeric bounds …\nSaturating addition operator. Returns a+b, saturating at …\nSaturating addition. Computes <code>self + other</code>, saturating at …\nSaturating multiplication. Computes <code>self * other</code>, …\nSaturating subtraction operator. Returns a-b, saturating …\nSaturating subtraction. Computes <code>self - other</code>, saturating …\nPerforms addition that wraps around on overflow.\nPerforms multiplication that wraps around on overflow.\nPerforms a negation that does not panic.\nPerforms a left shift that does not panic.\nPerforms a right shift that does not panic.\nPerforms subtraction that wraps around on overflow.\nWrapping (modular) addition. Computes <code>self + other</code>, …\nWrapping (modular) multiplication. Computes <code>self * other</code>, …\nWrapping (modular) negation. Computes <code>-self</code>, wrapping …\nPanic-free bitwise shift-left; yields <code>self &lt;&lt; mask(rhs)</code>, …\nPanic-free bitwise shift-right; yields <code>self &gt;&gt; mask(rhs)</code>, …\nWrapping (modular) subtraction. Computes <code>self - other</code>, …\nThe result after applying the operator.\nBinary operator for raising a value to a power.\nRaises a value to the power of exp, returning <code>None</code> if an …\nRaises a value to the power of exp, using exponentiation …\nReturns <code>self</code> to the power <code>rhs</code>.\nA trait for real number types that do not necessarily have …\nComputes the absolute value of <code>self</code>. Returns <code>Float::nan()</code> …\nThe positive difference of two numbers.\nComputes the arccosine of a number. Return value is in …\nInverse hyperbolic cosine function.\nComputes the arcsine of a number. Return value is in …\nInverse hyperbolic sine function.\nComputes the arctangent of a number. Return value is in …\nComputes the four quadrant arctangent of <code>self</code> (<code>y</code>) and <code>other</code>…\nInverse hyperbolic tangent function.\nTake the cubic root of a number.\nReturns the smallest integer greater than or equal to a …\nComputes the cosine of a number (in radians).\nHyperbolic cosine function.\nReturns epsilon, a small positive value.\nReturns <code>e^(self)</code>, (the exponential function).\nReturns <code>2^(self)</code>.\nReturns <code>e^(self) - 1</code> in a way that is accurate even if the …\nReturns the largest integer less than or equal to a number.\nReturns the fractional part of a number.\nCalculate the length of the hypotenuse of a right-angle …\nReturns <code>true</code> if <code>self</code> is negative, including <code>-0.0</code>, …\nReturns <code>true</code> if <code>self</code> is positive, including <code>+0.0</code>, …\nReturns the natural logarithm of the number.\nReturns <code>ln(1+n)</code> (natural logarithm) more accurately than if\nReturns the logarithm of the number with respect to an …\nReturns the base 10 logarithm of the number.\nReturns the base 2 logarithm of the number.\nReturns the maximum of the two numbers.\nReturns the largest finite value that this type can …\nReturns the minimum of the two numbers.\nReturns the smallest positive, normalized value that this …\nReturns the smallest finite value that this type can …\nFused multiply-add. Computes <code>(self * a) + b</code> with only one …\nRaise a number to a real number power.\nRaise a number to an integer power.\nTake the reciprocal (inverse) of a number, <code>1/x</code>.\nReturns the nearest integer to a number. Round half-way …\nReturns a number that represents the sign of <code>self</code>.\nComputes the sine of a number (in radians).\nSimultaneously computes the sine and cosine of the number, …\nHyperbolic sine function.\nTake the square root of a number.\nComputes the tangent of a number (in radians).\nHyperbolic tangent function.\nConverts radians to degrees.\nConverts degrees to radians.\nReturn the integer part of a number.\nUseful functions for signed numbers (i.e. numbers that can …\nA trait for values which cannot be negative\nComputes the absolute value.\nComputes the absolute value.\nThe positive difference of two numbers.\nThe positive difference of two numbers.\nReturns true if the number is negative and false if the …\nReturns true if the number is positive and false if the …\nReturns the sign of the number.\nReturns the sign of the number.\nBrent’s method\nConjugate Gradient methods\nNewton Methods\nReferences:\nGradient descent methods\nLandweber iteration\nLine search methods\nReferences:\nNewton Methods\nReferences:\nQuasi-Newton methods\nSimulated AnnealingReferences\nArgmin Trust region methods\nBrent’s method\nError to be thrown if Brent is initialized with improper …\nf(min) and f(max) must have different signs\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConstructor The values <code>min</code> and <code>max</code> must bracketing the …\nBeta update methods for nonlinear CG\nConjugate gradient method\nNonlinear conjugate gradient method Important TODO: Find …\nFletcher and Reeves (FR) method TODO: Reference\nHestenes and Stiefel (HS) method TODO: Reference\nPolak and Ribiere (PR) method TODO: Reference\nPolak and Ribiere Plus (PR+) method TODO: Reference\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConstructor\nConstructor\nConstructor\nConstructor\nThe conjugate gradient method is a solver for systems of …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nConstructor\nPerform one iteration of CG algorithm\nReturn the current search direction (This is needed by …\nReturn the previous search direction (This is needed by …\nReturn the current residual (This is needed by NewtonCG …\nThe nonlinear conjugate gradient is a generalization of …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nConstructor (Polak Ribiere Conjugate Gradient (PR-CG))\nSpecifiy the number of iterations after which a restart …\nSet the value for the orthogonality measure. Setting this …\nGauss-Newton method with linesearch\nGauss-Newton method\nGauss-Newton method with linesearch\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nConstructor\nSet tolerance for the stopping criterion based on cost …\nGauss-Newton method\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nConstructor\nset gamma\nSet tolerance for the stopping criterion based on cost …\nGolden-section search\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nConstructor\nSet tolerance\nSteepest Descent method\nSteepest descent iteratively takes steps in the direction …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nConstructor\nThe Landweber iteration is a solver for ill-posed linear …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nConstructor\nBacktracking line search algorithm\nAcceptance conditions\nHager-Zhang line search algorithm\nMore-Thuente line search algorithm\nThe Backtracking line search is a simple method to find a …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nConstructor\nSet rho\nSet initial alpha value\nSet search direction\nArmijo Condition\nGoldstein conditions\nNeeds to be implemented by everything that wants to be a …\nStrong Wolfe conditions\nWolfe Condition\nEvaluate the condition\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConstructor\nConstructor\nConstructor\nConstructor\nIndicates whether this condition requires the computation …\nThe Hager-Zhang line search is a method to find a step …\nset alpha limits\nset delta\nset epsilon\nset eta\nReturns the argument unchanged.\nset gamma\nCalls <code>U::from(self)</code>.\nConstructor\nSet initial alpha value\nSet search direction\nset sigma\nset theta\nThe More-Thuente line search is a method to find a step …\nset alpha limits\nSet c1 and c2 where 0 &lt; c1 &lt; c2 &lt; 1.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nConstructor\nSet initial alpha value\nSet search direction\nNelder-Mead method\nset alpha\nReturns the argument unchanged.\nset gamma\nCalls <code>U::from(self)</code>.\nConstructor\nset rho\nSet Sample standard deviation tolerance\nset sigma\nAdd initial parameters\nNewton-CG method TODO: Stop when search direction is close …\nNewton’s method\nThe Newton-CG method (also called truncated Newton method) …\nSet curvature threshold\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nConstructor\nSet tolerance for the stopping criterion based on cost …\nNewton’s method iteratively finds the stationary points …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nConstructor\nset gamma\nA single particle\nParticle Swarm Optimization (PSO)\nPosition\nCost of particle\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConstructor\nPerform one iteration of algorithm\nPosition of particle\nReferences:\nReferences:\nReferences:\nReferences:\nReferences:\nBFGS method\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nConstructor\nSets tolerance for the stopping criterion based on the …\nSets tolerance for the stopping criterion based on the …\nDFP method\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nConstructor\nSets tolerance for the stopping criterion based on the …\nL-BFGS method\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nConstructor\nSets tolerance for the stopping criterion based on the …\nSets tolerance for the stopping criterion based on the …\nSR1 method (broken!)\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nConstructor\nSet r\nSets tolerance for the stopping criterion based on the …\nSets tolerance for the stopping criterion based on the …\nSR1 Trust Region method\nSet eta\nReturns the argument unchanged.\nprovide initial Hessian (if not provided, the algorithm …\nCalls <code>U::from(self)</code>.\nConstructor\nSet r\nset radius\nSets tolerance for the stopping criterion based on the …\n<code>t_i = t_init / ln(i)</code>\n<code>t_i = t_init * x^i</code>\nTemperature functions for Simulated Annealing.\nSimulated Annealing\n<code>t_i = t_init / i</code>\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConstructor\nPerform one iteration of SA algorithm\nStart reannealing after no accepted solution has been …\nStart reannealing after no new best solution has been …\nStart reannealing after <code>iter</code> iterations\nThe optimization stops after there has been no accepted …\nThe optimization stops after there has been no new best …\nSet temperature function to one of the options in …\nCauchy Point\nDogleg method\nComputes reduction ratio\nSteihaug method\nTrust region solver\nThe Cauchy point is the minimum of the quadratic …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nConstructor\nThe Dogleg method computes the intersection of the trust …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nConstructor\nThe Steihaug method is a conjugate gradients based …\nSet epsilon\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nset maximum number of iterations\nConstructor\nThe trust region method approximates the cost function …\nSet eta\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nSet maximum radius\nConstructor\nset radius")