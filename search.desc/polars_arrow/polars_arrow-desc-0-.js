searchState.loadedDescShard("polars_arrow", 0, "A <code>HashMap</code> using <code>RandomState</code> to hash the items. (Requires …\nThe enum <code>Either</code> with variants <code>Left</code> and <code>Right</code> is a general …\nA value of type <code>L</code>.\nA value of type <code>R</code>.\nContains the <code>Array</code> and <code>MutableArray</code> trait objects …\nConvert <code>&amp;mut Either&lt;L, R&gt;</code> to <code>Either&lt;&amp;mut L, &amp;mut R&gt;</code>.\nConvert <code>Pin&lt;&amp;mut Either&lt;L, R&gt;&gt;</code> to …\nConvert <code>Pin&lt;&amp;Either&lt;L, R&gt;&gt;</code> to <code>Either&lt;Pin&lt;&amp;L&gt;, Pin&lt;&amp;R&gt;&gt;</code>, …\nConvert <code>&amp;Either&lt;L, R&gt;</code> to <code>Either&lt;&amp;L, &amp;R&gt;</code>.\ncontains <code>Bitmap</code> and <code>MutableBitmap</code>, containers of <code>bool</code>.\nContains <code>Buffer</code>, an immutable container for all Arrow …\nMaps an <code>Either&lt;&amp;L, &amp;R&gt;</code> to an <code>Either&lt;L, R&gt;</code> by cloning the …\nMaps an <code>Either&lt;&amp;mut L, &amp;mut R&gt;</code> to an <code>Either&lt;L, R&gt;</code> by …\ncontains a wide range of compute operations (e.g. […\nMaps an <code>Either&lt;&amp;L, &amp;R&gt;</code> to an <code>Either&lt;L, R&gt;</code> by copying the …\nMaps an <code>Either&lt;&amp;mut L, &amp;mut R&gt;</code> to an <code>Either&lt;L, R&gt;</code> by …\nContains all metadata, such as <code>PhysicalType</code>, <code>ArrowDataType</code>…\nApply one of two functions depending on contents, unifying …\nConvert the contained value into <code>T</code>\nLike <code>either</code>, but provide some context to whichever of the …\nReturns the left value\nReturns the right value\nFactors out a homogenous type from an <code>Either</code> of <code>Result</code>.\nFactor out a homogeneous type from an either of pairs.\nConverts an <code>Either</code> of <code>Iterator</code>s to be an <code>Iterator</code> of <code>Either</code>…\nBorrows an <code>Either</code> of <code>Iterator</code>s to be an <code>Iterator</code> of <code>Either</code>s\nMutably borrows an <code>Either</code> of <code>Iterator</code>s to be an <code>Iterator</code> …\nFactors out <code>None</code> from an <code>Either</code> of <code>Option</code>.\nFactors out a homogenous type from an <code>Either</code> of <code>Result</code>.\nFactor out a homogeneous type from an either of pairs.\ncontains FFI bindings to import and export <code>Array</code> via Arrow…\nConvert <code>Either&lt;L, R&gt;</code> to <code>Either&lt;R, L&gt;</code>.\nReturns the argument unchanged.\nExamples\nReturns the argument unchanged.\nThis crates a hashmap from the provided iterator using …\nReturns a reference to the value corresponding to the key.\nReturns the key-value pair corresponding to the supplied …\nReturns a mutable reference to the value corresponding to …\nReturns a reference to the value corresponding to the …\nInserts a key-value pair into the map.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nExtract the value of an either over two equivalent types.\nConvert the inner value to an iterator.\nCreates a consuming iterator visiting all the keys in …\nCreates a consuming iterator visiting all the values in …\nContains modules to interface with other formats such as […\nReturn true if the value is the <code>Left</code> variant.\nReturn true if the value is the <code>Right</code> variant.\nBorrow the inner value as an iterator.\nMutably borrow the inner value as an iterator.\nConvert the left side of <code>Either&lt;L, R&gt;</code> to an <code>Option&lt;L&gt;</code>.\nApply the function <code>f</code> on the value in the <code>Left</code> variant if …\nReturn left value or given value\nReturn left or a default\nReturns left value or computes it from a closure\nMap <code>f</code> over the contained value and return the result in the\nApply the functions <code>f</code> and <code>g</code> to the <code>Left</code> and <code>Right</code> variants …\nSimilar to <code>map_either</code>, with an added context <code>ctx</code> …\nApply the function <code>f</code> on the value in the <code>Left</code> variant if …\nApply the function <code>f</code> on the value in the <code>Right</code> variant if …\nMemory maps regions defined on the IPC format into <code>Array</code>.\nThis crates a hashmap using RandomState::new which obtains …\nContains the declaration of <code>Offset</code>\nContains <code>RecordBatch</code>, a container of <code>Array</code> where every …\nRemoves a key from the map, returning the value at the key …\nConvert the right side of <code>Either&lt;L, R&gt;</code> to an <code>Option&lt;R&gt;</code>.\nApply the function <code>f</code> on the value in the <code>Right</code> variant if …\nReturn right value or given value\nReturn right or a default\nReturns right value or computes it from a closure\ncontains the <code>Scalar</code> trait object representing individual …\nConversion methods for dates and times.\nDeclares <code>TrustedLen</code>.\nSealed traits and implementations to handle all <em>physical </em>…\nReturns the left value\nReturns the right value\nMisc utilities used in different places in the crate.\nThis crates a hashmap with the specified capacity using …\nA trait representing an immutable Arrow array. Arrow …\nA <code>BinaryArray</code> is Arrow’s semantically equivalent of an …\nIterator of values of an <code>BinaryArray</code>.\nA <code>BooleanArray</code> is Arrow’s semantically equivalent of an …\nA type definition <code>PrimitiveArray</code> for <code>days_ms</code>\nA type definition <code>MutablePrimitiveArray</code> for <code>days_ms</code>\nAn <code>Array</code> whose values are stored as indices. This <code>Array</code> is …\nTrait denoting <code>NativeType</code>s that can be used as keys of a …\nThe Arrow’s equivalent to an immutable …\nThe Arrow’s equivalent to an immutable …\nA type definition <code>PrimitiveArray</code> for <code>f16</code>\nA type definition <code>MutablePrimitiveArray</code> for <code>f16</code>\nA type definition <code>PrimitiveArray</code> for <code>f32</code>\nA type definition <code>MutablePrimitiveArray</code> for <code>f32</code>\nA type definition <code>PrimitiveArray</code> for <code>f64</code>\nA type definition <code>MutablePrimitiveArray</code> for <code>f64</code>\nTrait that <code>BinaryArray</code> and <code>Utf8Array</code> implement for the …\nA type definition <code>PrimitiveArray</code> for <code>i128</code>\nA type definition <code>MutablePrimitiveArray</code> for <code>i128</code>\nA type definition <code>PrimitiveArray</code> for <code>i16</code>\nA type definition <code>MutablePrimitiveArray</code> for <code>i16</code>\nA type definition <code>PrimitiveArray</code> for <code>i256</code>\nA type definition <code>MutablePrimitiveArray</code> for <code>i256</code>\nA type definition <code>PrimitiveArray</code> for <code>i32</code>\nA type definition <code>MutablePrimitiveArray</code> for <code>i32</code>\nA type definition <code>PrimitiveArray</code> for <code>i64</code>\nA type definition <code>MutablePrimitiveArray</code> for <code>i64</code>\nA type definition <code>PrimitiveArray</code> for <code>i8</code>\nA type definition <code>MutablePrimitiveArray</code> for <code>i8</code>\nThe corresponding <code>IntegerType</code> of this key\nAn <code>Array</code> semantically equivalent to …\nIterator of values of a <code>ListArray</code>.\nAn array representing a (key, value), both of arbitrary …\nA type definition <code>PrimitiveArray</code> for <code>months_days_ns</code>\nA type definition <code>MutablePrimitiveArray</code> for <code>months_days_ns</code>\nA trait describing a mutable array; i.e. an array whose …\nThe Arrow’s equivalent to <code>Vec&lt;Option&lt;Vec&lt;u8&gt;&gt;&gt;</code>. …\nA <code>MutableArray</code> that builds a <code>BinaryArray</code>. It differs from …\nThe Arrow’s equivalent to <code>Vec&lt;Option&lt;bool&gt;&gt;</code>, but with …\nThe Arrow’s equivalent to a mutable …\nThe mutable version of <code>FixedSizeListArray</code>.\nThe mutable version of <code>ListArray</code>.\nA distinct type to disambiguate clashing methods\nThe Arrow’s equivalent to <code>Vec&lt;Option&lt;T&gt;&gt;</code> where <code>T</code> is …\nConverting a <code>MutableStructArray</code> into a <code>StructArray</code> is <code>O(1)</code>.\nA <code>MutableArray</code> that builds a <code>Utf8Array</code>. It differs from …\nA <code>MutableArray</code> that builds a <code>Utf8Array</code>. It differs from …\nThe concrete <code>Array</code> of <code>ArrowDataType::Null</code>.\nA <code>PrimitiveArray</code> is Arrow’s semantically equivalent of …\nA trait describing the ability of a struct to receive new …\nA <code>StructArray</code> is a nested <code>Array</code> with an optional validity …\nA trait describing the ability of a struct to create …\nA trait describing the ability of a struct to extend from …\nA trait describing the ability of a struct to receive new …\nA type definition <code>PrimitiveArray</code> for <code>u16</code>\nA type definition <code>MutablePrimitiveArray</code> for <code>u16</code>\nA type definition <code>PrimitiveArray</code> for <code>u32</code>\nA type definition <code>MutablePrimitiveArray</code> for <code>u32</code>\nA type definition <code>PrimitiveArray</code> for <code>u64</code>\nA type definition <code>MutablePrimitiveArray</code> for <code>u64</code>\nA type definition <code>PrimitiveArray</code> for <code>u8</code>\nA type definition <code>MutablePrimitiveArray</code> for <code>u8</code>\n<code>UnionArray</code> represents an array whose each slot can contain …\nA <code>Utf8Array</code> is arrow’s semantic equivalent of an …\nIterator of values of an <code>Utf8Array</code>.\nIf the key type always can be converted to <code>usize</code>.\nIf the key type always can be converted to <code>usize</code>.\nApplies a function <code>f</code> to the validity of this array.\nApplies a function <code>f</code> to the validity of this array.\nApplies a function <code>f</code> to the validity of this array.\nApplies a function <code>f</code> to the validity of this array.\nApplies a function <code>f</code> to the validity of this array.\nApplies a function <code>f</code> to the values of this array, cloning …\nApplies a function <code>f</code> to the values of this array, cloning …\nArcs this array into a <code>std::sync::Arc&lt;dyn Array&gt;</code>.\nArcs this array into a <code>std::sync::Arc&lt;dyn Array&gt;</code>.\nArcs this array into a <code>std::sync::Arc&lt;dyn Array&gt;</code>.\nArcs this array into a <code>std::sync::Arc&lt;dyn Array&gt;</code>.\nArcs this array into a <code>std::sync::Arc&lt;dyn Array&gt;</code>.\nArcs this array into a <code>std::sync::Arc&lt;dyn Array&gt;</code>.\nArcs this array into a <code>std::sync::Arc&lt;dyn Array&gt;</code>.\nArcs this array into a <code>std::sync::Arc&lt;dyn Array&gt;</code>.\nArcs this array into a <code>std::sync::Arc&lt;dyn Array&gt;</code>.\nArcs this array into a <code>std::sync::Arc&lt;dyn Array&gt;</code>.\nArcs this array into a <code>std::sync::Arc&lt;dyn Array&gt;</code>.\nArcs this array into a <code>std::sync::Arc&lt;dyn Array&gt;</code>.\nArcs this array into a <code>std::sync::Arc&lt;dyn Array&gt;</code>.\nConverts itself to a reference of <code>Any</code>, which enables …\nConvert to <code>Any</code>, to enable dynamic casting.\nConverts itself to a mutable reference of <code>Any</code>, which …\nConvert itself to an (immutable) atomically reference …\nConvert itself to an (immutable) <code>Array</code>.\nConvert to mutable <code>Any</code>, to enable dynamic casting.\nRepresents this key as a <code>usize</code>.\nRepresents this key as a <code>usize</code>.\nBoxes this array into a <code>Box&lt;dyn Array&gt;</code>.\nBoxes this array into a <code>Box&lt;dyn Array&gt;</code>.\nBoxes this array into a <code>Box&lt;dyn Array&gt;</code>.\nBoxes this array into a <code>Box&lt;dyn Array&gt;</code>.\nBoxes this array into a <code>Box&lt;dyn Array&gt;</code>.\nBoxes this array into a <code>Box&lt;dyn Array&gt;</code>.\nBoxes this array into a <code>Box&lt;dyn Array&gt;</code>.\nBoxes this array into a <code>Box&lt;dyn Array&gt;</code>.\nBoxes this array into a <code>Box&lt;dyn Array&gt;</code>.\nBoxes this array into a <code>Box&lt;dyn Array&gt;</code>.\nBoxes this array into a <code>Box&lt;dyn Array&gt;</code>.\nBoxes this array into a <code>Box&lt;dyn Array&gt;</code>.\nBoxes this array into a <code>Box&lt;dyn Array&gt;</code>.\nThe buffer index.\nReturns the capacity in number of items\nReturns the capacity of this array\nReturns the capacity of this <code>MutablePrimitiveArray</code>.\nReserves <code>additional</code> elements and <code>additional_values</code> on the …\nReturns the capacity in number of items\nClears the array, removing all values.\nClones a dynamic <code>Array</code>.\nThe <code>ArrowDataType</code> of the <code>Array</code>. In combination with …\nThe <code>ArrowDataType</code> of the array.\nReturns the <code>ArrowDataType</code> of this array.\nReturns the arrays’ <code>ArrowDataType</code>.\nReturns the <code>ArrowDataType</code> of this <code>DictionaryArray</code>\nReturns the arrays’ <code>ArrowDataType</code>.\nReturns the <code>ArrowDataType</code> of this array.\nReturns the default <code>ArrowDataType</code> of this container: …\nReturns the default <code>ArrowDataType</code>, <code>DataType::Binary</code> or …\nReturns the default <code>ArrowDataType</code> of this container: …\nReturns a default <code>ArrowDataType</code> of this array, which …\nReturns a <code>ArrowDataType</code> consistent with <code>FixedSizeListArray</code>.\nReturns a default <code>ArrowDataType</code>: inner field is named “…\nLogically compares two <code>Array</code>s. Two arrays are logically …\nExtends <code>MutableBooleanArray</code> by additional values of …\nExtends the <code>MutablePrimitiveArray</code> with a constant\nExtend with a fallible iterator\nExtend with a fallible iterator\nExtend with a fallible iterator\nExtend with a fallible iterator\nExtends the <code>MutablePrimitiveArray</code> from a slice\nExtends the <code>MutableBinaryValuesArray</code> from a <code>TrustedLen</code>\nExtends the <code>MutableBinaryArray</code> from an iterator of …\nExtends the <code>MutableBooleanArray</code> from an iterator of …\nExtends the <code>MutablePrimitiveArray</code> from an iterator of …\nExtends the <code>MutableUtf8Array</code> from an iterator of trusted …\nExtends the <code>MutableUtf8ValuesArray</code> from a <code>TrustedLen</code>\nExtends <code>MutableBinaryValuesArray</code> from an iterator of …\nExtends the <code>MutableBinaryArray</code> from an iterator of …\nExtends the <code>MutableBooleanArray</code> from an iterator of …\nExtends the <code>MutablePrimitiveArray</code> from an iterator of …\nExtends <code>MutableUtf8Array</code> from an iterator of trusted len.\nExtends <code>MutableUtf8ValuesArray</code> from an iterator of trusted …\nExtends the <code>MutableBinaryArray</code> from an iterator of trusted …\nExtends the <code>MutableBooleanArray</code> from an iterator of values …\nExtends the <code>MutablePrimitiveArray</code> from an iterator of …\nExtends the <code>MutableUtf8Array</code> from an iterator of values of …\nExtends the <code>MutableBinaryArray</code> from an <code>iterator</code> of values …\nExtends the <code>MutableBooleanArray</code> from an iterator of values …\nExtends the <code>MutablePrimitiveArray</code> from an iterator of …\nExtends the <code>MutableUtf8Array</code> from an iterator of values of …\nExtends the <code>MutableBinaryArray</code> from an iterator of values. …\nExtends the <code>MutableUtf8Array</code> from an iterator of values. …\nReturns the field (guaranteed to be a <code>Struct</code>)\nReturns the fields of this <code>StructArray</code>.\nThe fields.\nFills this entire array with the given value, leaving the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a new <code>MutableBinaryArray</code> from a slice of optional …\nReturns the argument unchanged.\nCreates a new <code>BinaryArray</code> from a slice of optional <code>&amp;[u8]</code>.\nCreates a new <code>MutableBooleanArray</code> out of a slice of …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a new <code>MutableFixedSizeBinaryArray</code> from a slice of …\nCreates a new <code>FixedSizeBinaryArray</code> from a slice of …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a new <code>MutableUtf8Array</code> from a slice of optional …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns a new <code>Utf8Array</code> from a slice of <code>&amp;str</code>.\nReturns the argument unchanged.\nSafety\nCreates a <code>[PrimitiveArray]</code> from its internal …\nCreates a <code>[BooleanArray]</code> from its internal representation. …\nCreates a <code>[PrimitiveArray]</code> from its internal …\nCreates a <code>FixedSizeBinaryArray</code> from an iterator of …\nCreates a new <code>MutableBinaryArray</code> from a <code>Iterator</code> of <code>&amp;[u8]</code>.\nReturns a new <code>BinaryArray</code> from a <code>Iterator</code> of <code>&amp;[u8]</code>.\nCreates a new <code>MutableUtf8Array</code> from a <code>Iterator</code> of <code>&amp;str</code>.\nCreates a new <code>Utf8Array</code> from a <code>Iterator</code> of <code>&amp;str</code>.\nCreates a new <code>BinaryArray</code> from slices of <code>&amp;[u8]</code>.\nCreates a new <code>MutableBooleanArray</code> from a slice of <code>bool</code>.\nCreates a new <code>BooleanArray</code> from a slice of <code>bool</code>.\nCreates a <code>FixedSizeBinaryArray</code> from a slice of arrays of …\nCreates a <code>MutablePrimitiveArray</code> from a slice of values.\nCreates a (non-null) <code>PrimitiveArray</code> from a slice of values.\nReturns a <code>Utf8Array</code> from a slice of <code>&amp;str</code>.\nCreates a <code>MutableBinaryValuesArray</code> from a <code>TrustedLen</code>\nCreates a <code>MutableBinaryArray</code> from an iterator of trusted …\nCreates a <code>BinaryArray</code> from a <code>TrustedLen</code>\nCreates a <code>BooleanArray</code> from a <code>TrustedLen</code>.\nCreates a <code>BooleanArray</code> from a <code>TrustedLen</code>.\nCreates a <code>MutablePrimitiveArray</code> from a <code>TrustedLen</code>.\nCreates a <code>PrimitiveArray</code> from a <code>TrustedLen</code> of optional …\nCreates a <code>MutableUtf8Array</code> from an iterator of trusted …\nCreates a <code>MutableUtf8ValuesArray</code> from a <code>TrustedLen</code>\nCreates a <code>Utf8Array</code> from an iterator of trusted length.\nReturns a new <code>MutableBinaryValuesArray</code> from an iterator of …\nCreates a <code>MutableBinaryArray</code> from an iterator of trusted …\nCreates a <code>BinaryArray</code> from an iterator of trusted length.\nCreates a <code>BooleanArray</code> from an iterator of trusted length. …\nCreates a <code>BooleanArray</code> from an iterator of trusted length. …\nCreates a <code>MutablePrimitiveArray</code> from an iterator of …\nCreates a <code>PrimitiveArray</code> from an iterator of optional …\nCreates a <code>MutableUtf8Array</code> from an iterator of trusted …\nReturns a new <code>MutableUtf8ValuesArray</code> from an iterator of …\nCreates a <code>Utf8Array</code> from an iterator of trusted length.\nCreates a new <code>BinaryArray</code> from a <code>TrustedLen</code> of <code>&amp;[u8]</code>.\nReturns a <code>BinaryArray</code> from an iterator of trusted length.\nCreates a new <code>MutableBooleanArray</code> from an <code>TrustedLen</code> of …\nCreates a new <code>BooleanArray</code> from an <code>TrustedLen</code> of <code>bool</code>.\nCreates a new <code>MutablePrimitiveArray</code> out an iterator over …\nCreates a (non-null) <code>PrimitiveArray</code> from a <code>TrustedLen</code> of …\nCreates a new <code>MutableUtf8Array</code> from a <code>TrustedLen</code> of <code>&amp;str</code>.\nReturns a (non-null) <code>Utf8Array</code> created from a <code>TrustedLen</code> …\nCreates a new <code>BinaryArray</code> from a <code>TrustedLen</code> of <code>&amp;[u8]</code>.\nCreates a new <code>MutableBooleanArray</code> from an <code>TrustedLen</code> of …\nCreates a new <code>BooleanArray</code> from an <code>TrustedLen</code> of <code>bool</code>. Use …\nCreates a new <code>MutablePrimitiveArray</code> from an iterator over …\nCreates a new <code>PrimitiveArray</code> from an iterator over values\nCreates a <code>MutableUtf8Array</code> from an iterator of trusted …\nCreates an empty <code>MutableDictionaryArray</code> preloaded with a …\nCreates a (non-null) <code>PrimitiveArray</code> from an iterator of …\nCreates a (non-null) <code>MutablePrimitiveArray</code> from a vector …\nCreates a (non-null) <code>PrimitiveArray</code> from a vector of …\nGarbage collect\nReturns the element at index <code>i</code> or <code>None</code> if it is null\nReturns the element at index <code>i</code> or <code>None</code> if it is null\nReturns the element at index <code>i</code> or <code>None</code> if it is null\nReturns the element at index <code>i</code> or <code>None</code> if it is null\nReturns the element at index <code>i</code> or <code>None</code> if it is null\nReturns a the inner <code>Field</code>\nReturns a the inner <code>ArrowDataType</code>\nReturns a function that writes the element of <code>array</code> at …\nReturns the fields the <code>DataType::Struct</code>.\nReturns all fields from <code>ArrowDataType::Union</code>.\nReturns an option of a mutable reference to the values of …\nSafety\nSafety\nReturns a function that writes the value of the element of …\nGet the values size that is still “visible” to the …\nContains the trait <code>Growable</code> and corresponding concreate …\nReturns the index and slot of the field to select from …\nReturns the index and slot of the field to select from …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConverts itself into an <code>Array</code>.\nConverts itself into an <code>Array</code>.\nconverts itself into <code>Arc&lt;dyn Array&gt;</code>\nConverts itself into an <code>Array</code>.\nConverts itself into an <code>Array</code>.\nConverts itself into an <code>Array</code>.\nConverts itself into an <code>Array</code>.\nconverts itself into <code>Box&lt;dyn Array&gt;</code>\nconverts itself into <code>Box&lt;dyn Array&gt;</code>\nDeconstructs the <code>StructArray</code> into its individual …\nExtract the low-end APIs from the <code>MutableUtf8Array</code>.\nCreates an empty <code>MutableDictionaryArray</code> retaining the same …\nExtract the low-end APIs from the <code>MutableBinaryValuesArray</code>.\nReturns its internal representation\nReturns its internal representation\nExtract the low-end APIs from the <code>MutablePrimitiveArray</code>.\nReturns its internal representation\nExtract the low-end APIs from the <code>MutableStructArray</code>.\nExtract the low-end APIs from the <code>MutableUtf8ValuesArray</code>.\nReturns its internal representation\nTry to convert this <code>BinaryArray</code> to a <code>MutableBinaryArray</code>\nTry to convert this <code>BooleanArray</code> to a <code>MutableBooleanArray</code>\nTry to convert this <code>PrimitiveArray</code> to a …\nTry to convert this <code>Utf8Array</code> to a <code>MutableUtf8Array</code>\nwhether the array is empty\nWhether the array is empty.\nReturns whether slot <code>i</code> is null.\nReturns whether slot <code>i</code> is null.\nReturns whether the values of this <code>DictionaryArray</code> are …\nReturns whether the <code>ArrowDataType::Union</code> is sparse or not.\nReturns whether slot <code>i</code> is valid.\nWhether <code>index</code> is valid / set.\nReturns an iterator of <code>Option&lt;&amp;T&gt;</code> over every element of …\nReturns an iterator of <code>&amp;[u8]</code>\nReturns an iterator of <code>Option&lt;&amp;[u8]&gt;</code>\nReturns an iterator of <code>Option&lt;&amp;[u8]&gt;</code> over every element of …\nReturns an iterator over the optional values of this …\nReturns an iterator over the optional values of this …\nReturns an iterator of <code>Option&lt;Box&lt;dyn Scalar&gt;&gt;</code>.\nconstructs a new iterator\nconstructs a new iterator\nReturns an iterator of <code>Option&lt;Box&lt;dyn Array&gt;&gt;</code>\nReturns an iterator of <code>Option&lt;Box&lt;dyn Array&gt;&gt;</code>\nReturns an iterator of <code>Option&lt;Box&lt;dyn Array&gt;&gt;</code>\nReturns an iterator over <code>Option&lt;T&gt;</code>\nReturns an iterator over the values and validity, …\nReturns an iterator of <code>Option&lt;Box&lt;dyn Array&gt;&gt;</code>\nconstructs a new iterator\nReturns an iterator of <code>Option&lt;&amp;str&gt;</code>\nReturns an iterator of <code>&amp;str</code>\nReturns an iterator of <code>Option&lt;&amp;str&gt;</code>\nReturns an iterator over the optional values of  …\nReturns iterator over the values of …\nReturns the keys’ value of the <code>DictionaryArray</code> as <code>usize</code>\nReturns the dictionary keys\nReturns the keys of the <code>DictionaryArray</code>. These keys can be …\nReturns an iterator of the keys’ of the <code>DictionaryArray</code> …\nReturns an iterator of the keys’ values of the …\nThe length of the <code>Array</code>. Every array has a length …\nThe length of the array.\nReturns the length of this array\nReturns the length of this array\nReturns the length of this array\nReturns the length of this array\nReturns the length of this array\nReturns the length of this array\nThe length of this array\nReturns the length of this array\nReturns the length of this array\nReturns the length of this array\nReturns the length of this array\nReturns the length of this array\nReturns the length of this array\nReturns the length of this array\nReturns the length of this array\nReturns the length of this array\nThe length of the string/bytes.\nThe values as a mutable reference\nThe values\nThe mutable values\nReturns an empty <code>MutableBinaryValuesArray</code>.\nCreates a new empty <code>MutableBinaryArray</code>.\nAlias for unwrapping <code>Self::try_new</code>\nCreates an new empty <code>MutableBooleanArray</code>.\nAlias to <code>Self::try_new().unwrap()</code>\nCreates an empty <code>MutableDictionaryArray</code>.\nCreates a new empty <code>MutableFixedSizeBinaryArray</code>.\nCreates a new <code>FixedSizeBinaryArray</code>.\nCreates a new <code>MutableFixedSizeListArray</code> from a <code>MutableArray</code>…\nAlias to <code>Self::try_new(...).unwrap()</code>\nCreates a new empty <code>MutableListArray</code>.\nCreates a new <code>ListArray</code>.\nCreates a new <code>MapArray</code>.\nReturns a new <code>NullArray</code>.\nReturns a new <code>MutableNullArray</code>.\nCreates a new empty <code>MutablePrimitiveArray</code>.\nAlias for <code>Self::try_new(..).unwrap()</code>.\nCreates a new <code>MutableStructArray</code>.\nReturns a new <code>StructArray</code>\nReturns a new <code>UnionArray</code>.\nInitializes a new empty <code>MutableUtf8Array</code>.\nReturns an empty <code>MutableUtf8ValuesArray</code>.\nCreates a new <code>Utf8Array</code>.\nCreates an empty <code>BinaryViewArrayGeneric</code>, i.e. whose <code>.len</code> …\nCreates an empty <code>BinaryArray</code>, i.e. whose <code>.len</code> is zero.\nReturns a new empty <code>BooleanArray</code>.\nReturns a new empty <code>DictionaryArray</code>.\nReturns a new empty <code>FixedSizeBinaryArray</code>.\nReturns a new empty <code>FixedSizeListArray</code>.\nReturns a new empty <code>ListArray</code>.\nReturns a new empty <code>MapArray</code>.\nReturns a new empty <code>NullArray</code>.\nReturns a new empty (zero-length) <code>PrimitiveArray</code>.\nCreates an empty <code>StructArray</code>.\nCreates a new empty <code>UnionArray</code>.\nReturns a new empty <code>Utf8Array</code>.\nCreates a new <code>Array</code> with a <code>Array::len</code> of 0.\nCreates a new <code>MutableFixedSizeListArray</code> from a <code>MutableArray</code>…\nCreates a new <code>MutableListArray</code> from a <code>MutableArray</code> and …\nCreates a new <code>MutableListArray</code> from a <code>MutableArray</code>, <code>Offsets</code>…\nReturns a new null <code>BinaryViewArrayGeneric</code> of <code>length</code>.\nCreates an null <code>BinaryArray</code>, i.e. whose …\nReturns a new <code>BooleanArray</code> whose all slots are null / <code>None</code>.\nReturns an <code>DictionaryArray</code> whose all elements are null\nReturns a new null <code>FixedSizeBinaryArray</code>.\nReturns a new null <code>FixedSizeListArray</code>.\nReturns a new null <code>ListArray</code>.\nReturns a new null <code>MapArray</code> of <code>length</code>.\nReturns a new <code>NullArray</code>.\nReturns a new <code>PrimitiveArray</code> where all slots are null / …\nCreates a null <code>StructArray</code> of length <code>length</code>.\nCreates a new null <code>UnionArray</code>.\nReturns a new <code>Utf8Array</code> whose all slots are null / <code>None</code>.\nCreates a new <code>Array</code> of <code>ArrowDataType</code> <code>data_type</code> and <code>length</code>. …\nSafety\nCreates a new <code>BinaryArray</code> without checking invariants.\nSafety\nCreate a <code>MutableUtf8Array</code> out of low-end APIs.\nReturns a <code>MutableUtf8ValuesArray</code> created from its internal …\nCreates a new <code>Utf8Array</code> without checking for offsets …\nCreate a new BinaryViewArray but initialize a statistics …\nCreates a new <code>MutableListArray</code> from a <code>MutableArray</code> and …\nCreates a new <code>MutableFixedSizeListArray</code> from a <code>MutableArray</code>…\nCreates a new <code>MutableListArray</code> from a <code>MutableArray</code>.\nReturns an iterator of the non-null values.\nReturns an iterator of the non-null values.\nReturns an iterator of the non-null values.\nReturns an iterator of the non-null values <code>Box&lt;dyn Array&gt;</code>.\nReturns an iterator of the non-null values <code>T</code>.\nReturns an iterator of the non-null values `&amp;str.\nReturns an iterator of the non-null values.\nThe number of null slots on this <code>Array</code>.\nThe offset into the buffer.\nThe offsets of the array\nreturns its offsets.\nreturns its offsets.\nReturns the offsets of this <code>BinaryArray</code>.\nThe offsets\nThe offsets [<code>Buffer</code>].\nreturns the offsets\nThe optional offsets.\nreturns its offsets.\nreturns its offsets.\nReturns the offsets of this <code>Utf8Array</code>.\nPop the last entry from <code>MutableBinaryValuesArray</code>. This …\nPop the last entry from <code>MutableBinaryArray</code>. This function …\nPop an entry from <code>MutableBooleanArray</code>. Note If the values …\nPop the last entry from <code>MutableFixedSizeBinaryArray</code>. This …\nPop a value from the array. Note if the values is empty, …\nPop the last entry from <code>MutableUtf8Array</code>. This function …\nPop the last entry from <code>MutableUtf8ValuesArray</code>. This …\nFirst 4 bytes of string/bytes data.\nPushes a new item to the array.\nPushes a new element to the array.\nPushes a new entry to <code>MutableBooleanArray</code>.\npushes a new entry to <code>MutableFixedSizeBinaryArray</code>.\nAdds a new value to the array.\nCall this once for each “row” of children you push.\nPushes a new element to the array.\nPushes a new item to the array.\nAdds a new null element to the array.\npushes a null value\nPush a new element that holds the invariants of the struct.\nSafety\nNeeds to be called when a valid value was extended to this …\nSafety\nReserves additional slots to its capacity.\nReserves <code>additional</code> elements and <code>additional_buffer</code> on the …\nReserves <code>additional</code> elements and <code>additional_values</code> on the …\nReserves <code>additional</code> elements and <code>additional_values</code> on the …\nReserves <code>additional</code> slots.\nReserves <code>additional</code> slots.\nReserves <code>additional</code> slots.\nReserves <code>additional</code> slots.\nReserves <code>additional</code> slots.\nReserves <code>additional</code> entries.\nReserves <code>additional</code> entries.\nReserves <code>additional</code> elements and <code>additional_values</code> on the …\nReserves <code>additional</code> elements and <code>additional_values</code> on the …\nSets position <code>index</code> to <code>value</code>. Note that if it is the first …\nSets position <code>index</code> to <code>value</code>. Note that if it is the first …\nSets position <code>index</code> to <code>value</code>. Note that if it is the first …\nSets the validity of this array.\nSets the validity of this array.\nSets the validity of this array.\nSets the validity of this array.\nSets the validity of this array.\nSets the validity of the keys of this <code>DictionaryArray</code>.\nSets the validity of this array.\nSets the validity of this array.\nSets the validity of this array.\nSets the validity of this array.\nSets the validity.\nSets the validity of this array.\nSets the validity of this array.\nSets the validity.\nSets the validity of this array.\nSets the values of this <code>BooleanArray</code>.\nSets values.\nUpdate the values of this <code>PrimitiveArray</code>.\nShrink the array to fit its length.\nShrinks the capacity of the <code>MutableBinaryValuesArray</code> to …\nShrinks the capacity of the <code>MutableBinaryArray</code> to fit its …\nShrinks the capacity of the <code>MutableBooleanArray</code> to fit its …\nShrinks the capacity of the <code>MutableDictionaryArray</code> to fit …\nShrinks the capacity of the <code>MutableFixedSizeBinaryArray</code> to …\nShrinks the capacity of the <code>MutableFixedSizeListArray</code> to …\nShrinks the capacity of the <code>MutableListArray</code> to fit its …\nShrinks the capacity of the <code>MutablePrimitiveArray</code> to fit …\nShrinks the capacity of the <code>MutableStructArray</code> to fit its …\nShrinks the capacity of the <code>MutableUtf8Array</code> to fit its …\nShrinks the capacity of the <code>MutableUtf8ValuesArray</code> to fit …\nreturns the (fixed) size of the <code>MutableFixedSizeBinaryArray</code>…\nReturns the size\nReturns the size (number of elements per slot) of this …\nReturns the size (number of elements per slot) of this …\nSlices this <code>Array</code>.\nSlices this <code>BinaryArray</code>.\nSlices this <code>BooleanArray</code>.\nSlices this <code>DictionaryArray</code>.\nSlices this <code>FixedSizeBinaryArray</code>.\nSlices this <code>FixedSizeListArray</code>.\nSlices this <code>ListArray</code>.\nReturns a slice of this <code>MapArray</code>.\nReturns a slice of the <code>NullArray</code>.\nSlices this <code>PrimitiveArray</code> by an offset and length.\nSlices this <code>StructArray</code>.\nReturns a slice of this <code>UnionArray</code>.\nSlices this <code>Utf8Array</code>.\nSlices the <code>Array</code>.\nSlices this <code>BinaryArray</code>.\nSlices this <code>BooleanArray</code>.\nSlices this <code>DictionaryArray</code>.\nSlices this <code>FixedSizeBinaryArray</code>.\nSlices this <code>FixedSizeListArray</code>.\nSlices this <code>ListArray</code>.\nReturns a slice of this <code>MapArray</code>.\nReturns a slice of the <code>NullArray</code>.\nSlices this <code>PrimitiveArray</code> by an offset and length.\nSlices this <code>StructArray</code>.\nReturns a slice of this <code>UnionArray</code>.\nSlices this <code>Utf8Array</code>.\nReturns a slice of this <code>Array</code>.\nReturns this array sliced.\nReturns this array sliced.\nReturns this array sliced.\nReturns this array sliced.\nReturns this array sliced.\nReturns this array sliced.\nReturns this array sliced.\nReturns this array sliced.\nReturns this array sliced.\nReturns this array sliced.\nReturns this array sliced.\nReturns this array sliced.\nReturns this array sliced.\nReturns a slice of this <code>Array</code>.\nReturns this array sliced.\nReturns this array sliced.\nReturns this array sliced.\nReturns this array sliced.\nReturns this array sliced.\nReturns this array sliced.\nReturns this array sliced.\nReturns this array sliced.\nReturns this array sliced.\nReturns this array sliced.\nReturns this array sliced.\nReturns this array sliced.\nReturns this array sliced.\nTakes the validity of this array, leaving it without a …\nTakes the validity of this array, leaving it without a …\nTakes the validity of this array, leaving it without a …\nTakes the validity of this array, leaving it without a …\nTakes the validity of this array, leaving it without a …\nTakes the validity of this array, leaving it without a …\nTakes the validity of this array, leaving it without a …\nTakes the validity of this array, leaving it without a …\nTakes the validity of this array, leaving it without a …\nTakes the validity of this array, leaving it without a …\nReturns a new <code>FixedSizeBinaryArray</code> with a different …\nChanges the arrays’ <code>ArrowDataType</code>, returning a new …\nReturns a new <code>PrimitiveArray</code> with a different logical type.\nClone a <code>&amp;dyn Array</code> to an owned <code>Box&lt;dyn Array&gt;</code>.\nSame as <code>into_empty</code> but clones the inner value map instead …\nConvert <code>BinaryViewArray</code> to <code>Utf8ViewArray</code>.\nConvert <code>BinaryViewArray</code> to <code>Utf8ViewArray</code>.\nConvert <code>BinaryViewArray</code> to <code>Utf8ViewArray</code> without checking …\nConvert <code>BinaryViewArray</code> to <code>Utf8ViewArray</code> without checking …\nGet the length of bytes that are stored in the variadic …\nGet the total length of bytes that it would take to …\nTransmute this PrimitiveArray into another PrimitiveArray.\nCreates an empty <code>MutableDictionaryArray</code> from a given empty …\nFallible version of <code>Extend::extend</code>.\nThis is infallible and is implemented for consistency with …\nThis is infalible and is implemented for consistency with …\nThis is infallible and is implemented for consistency with …\nExpand this array, using elements from the underlying …\nTries to extend itself with elements from <code>other</code>, failing …\nReturns a new <code>MutableBinaryValuesArray</code> from an iterator.\nCreates a new <code>MutableFixedSizeBinaryArray</code> from an iterator …\nCreates a <code>FixedSizeBinaryArray</code> from an fallible iterator …\nReturns a new <code>MutableUtf8ValuesArray</code> from an iterator.\nReturns a new <code>DictionaryArray</code>.\nCreates a <code>MutableBinaryArray</code> from an falible iterator of …\nCreates a <code>BinaryArray</code> from an fallible iterator of trusted …\nCreates a <code>BooleanArray</code> from a <code>TrustedLen</code>.\nCreates a <code>BooleanArray</code> from a <code>TrustedLen</code>.\nCreates a <code>MutablePrimitiveArray</code> from an fallible iterator …\nCreates a <code>MutableUtf8Array</code> from an falible iterator of …\nCreates a <code>Utf8Array</code> from an fallible iterator of trusted …\nCreates a <code>MutableBinaryArray</code> from an falible iterator of …\nCreates a <code>BinaryArray</code> from an falible iterator of trusted …\nCreates a <code>BooleanArray</code> from an falible iterator of trusted …\nCreates a <code>BooleanArray</code> from an falible iterator of trusted …\nCreates a <code>MutablePrimitiveArray</code> from an fallible iterator …\nCreates a <code>MutableUtf8Array</code> from an falible iterator of …\nCreates a <code>Utf8Array</code> from an falible iterator of trusted …\nReturns a the inner <code>Field</code>\nReturns a <code>MutableBinaryValuesArray</code> created from its …\nReturns a <code>MutableBinaryArray</code> created from its internal …\nReturns a <code>BinaryArray</code> created from its internal …\nThe canonical method to create a <code>MutableBooleanArray</code> out …\nThe canonical method to create a <code>BooleanArray</code> out of …\nReturns a new <code>DictionaryArray</code>.\nCreates a new <code>MutableFixedSizeBinaryArray</code>.\nCreates a new <code>FixedSizeBinaryArray</code>.\nCreates a new <code>FixedSizeListArray</code>.\nCreates a new <code>ListArray</code>.\nReturns a new <code>MapArray</code>.\nReturns a new <code>NullArray</code>.\nThe canonical method to create a <code>MutablePrimitiveArray</code> out …\nThe canonical method to create a <code>PrimitiveArray</code> out of its …\nCreate a <code>MutableStructArray</code> out of low-end APIs.\nReturns a new <code>StructArray</code>.\nReturns a new <code>UnionArray</code>.\nReturns a <code>MutableUtf8Array</code> created from its internal …\nReturns a <code>MutableUtf8ValuesArray</code> created from its internal …\nReturns a <code>Utf8Array</code> created from its internal …\nReturns a new <code>DictionaryArray</code>.\nTries to push a new element.\nThis is infallible and is implemented for consistency with …\nThis is infalible and is implemented for consistency with …\ntries to push a new entry to <code>MutableFixedSizeBinaryArray</code>.\nThis is infalible and is implemented for consistency with …\nNeeds to be called when a valid value was extended to this …\nNeeds to be called when a valid value was extended to this …\nThe types.\nValidate the underlying bytes on UTF-8.\nValidate the underlying bytes on UTF-8.\nThe validity of the <code>Array</code>: every array has an optional …\nThe optional validity of the array.\nThe optional validity.\nReturns the optional validity.\nThe optional validity. Equivalent to <code>self.keys().validity()</code>…\nThe optional validity.\nThe optional validity.\nThe optional validity.\nReturns the optional validity.\nThe optional validity.\nThe optional validity.\nReturns the element at index <code>i</code>\nReturns the value of the element at index <code>i</code>.\nReturns the element at index <code>i</code>\nReturns the value at index <code>i</code>\nReturns the value of the <code>DictionaryArray</code> at position <code>i</code>.\nReturns the element at index <code>i</code> as <code>&amp;[u8]</code>\nReturns value at position <code>i</code>.\nReturns the <code>Vec&lt;T&gt;</code> at position <code>i</code>.\nReturns the element at index <code>i</code>\nReturns the element at index <code>i</code>.\nReturns the value at slot <code>i</code>.\nReturn the <code>i</code>th child array.\nReturns the slot <code>index</code> as a <code>Scalar</code>.\nReturns the value of the element at index <code>i</code>, ignoring the …\nReturns the value of the element at index <code>i</code>.\nReturns the value of the element at index <code>i</code>, ignoring the …\nSafety\nReturns the element at index <code>i</code>\nReturns the element at index <code>i</code>\nReturns the value of the element at index <code>i</code>.\nReturns the element at index <code>i</code>\nReturns the element at index <code>i</code> as bool\nReturns the element at index <code>i</code> as <code>&amp;[u8]</code>\nReturns the element at index <code>i</code> as &amp;str\nReturns the <code>Vec&lt;T&gt;</code> at position <code>i</code>.\nReturns the element at index <code>i</code> as &amp;str\nReturns the element at index <code>i</code>.\nReturns the value at index <code>i</code>. The value on null slots is …\nReturns the slot <code>index</code> as a <code>Scalar</code>.\nReturns the value of the element at index <code>i</code>, ignoring the …\nReturns the value of the element at index <code>i</code>.\nReturns the value of the element at index <code>i</code>, ignoring the …\nThe values of the array\nreturns its values.\nreturns its values.\nReturns the values of this <code>BinaryArray</code>.\nReturns its values.\nThe values <code>Bitmap</code>. Values on null slots are undetermined …\nreturns a reference to the inner values.\nReturns the values of the <code>DictionaryArray</code>.\nReturns its values.\nReturns the values allocated on this <code>FixedSizeBinaryArray</code>.\nThe inner values\nReturns the inner array.\nThe values\nThe values.\nReturns its values.\nThe values <code>Buffer</code>. Values on null slots are undetermined …\nThe values\nReturns the values of this <code>StructArray</code>.\nreturns its values.\nreturns its values.\nReturns the values of this <code>Utf8Array</code>.\nReturns an iterator of <code>&amp;[u8]</code> over every element of this …\nReturns an iterator of <code>&amp;[u8]</code> over every element of this …\nReturns an iterator over the values of this array\nReturns an iterator of <code>&amp;[u8]</code> over every element of this …\nReturns an iterator over the values of this …\nReturns an iterator over the values of this <code>BooleanArray</code>.\nReturns an iterator of <code>Box&lt;dyn Scalar&gt;</code>\nReturns iterator over the values of <code>FixedSizeBinaryArray</code>\nReturns an iterator of <code>Box&lt;dyn Array&gt;</code>\nReturns an iterator of <code>Box&lt;dyn Array&gt;</code>\nReturns an iterator of <code>Box&lt;dyn Array&gt;</code>\nReturns an iterator of <code>T</code>\nReturns an iterator of the values, <code>&amp;T</code>, ignoring the arrays…\nReturns an iterator of <code>Box&lt;dyn Array&gt;</code>\nReturns an iterator of <code>&amp;str</code>\nReturns an iterator of <code>&amp;str</code>\nReturns an iterator over the values [<code>V::IterValue</code>].\nReturns a mutable slice of values.\nReturns a mutable slice of values.\nInitializes a new <code>MutableBinaryValuesArray</code> with a …\nInitializes a new <code>MutableBinaryArray</code> with a pre-allocated …\nInitializes a new <code>MutableUtf8Array</code> with a pre-allocated …\nInitializes a new <code>MutableUtf8ValuesArray</code> with a …\nInitializes a new <code>MutableBinaryValuesArray</code> with a …\nInitializes a new <code>MutableBinaryArray</code> with a pre-allocated …\nCreates an new <code>MutableBooleanArray</code> with a capacity of …\nCreates a new <code>MutableFixedSizeBinaryArray</code> with capacity …\nCreates a new <code>MutableListArray</code> with a capacity.\nCreates a new <code>MutablePrimitiveArray</code> with a capacity.\nInitializes a new <code>MutableUtf8Array</code> with a pre-allocated …\nInitializes a new <code>MutableUtf8ValuesArray</code> with a …\nCreates a new <code>MutablePrimitiveArray</code> from a capacity and …\nApply a function that temporarily freezes this <code>MutableArray</code>…\nClones this <code>Array</code> with a new new assigned bitmap.\nReturns this array with a new validity.\nReturns this array with a new validity.\nReturns this array with a new validity.\nReturns this array with a new validity.\nReturns this array with a new validity.\nReturns this <code>DictionaryArray</code> with a new validity.\nReturns this array with a new validity.\nReturns this array with a new validity.\nReturns this array with a new validity.\nReturns this array with a new validity.\nReturns this array with a new validity.\nReturns this array with a new validity.\nReturns this array with a new validity.\nReturns a clone of this <code>BooleanArray</code> with new values.\nReturns this <code>PrimitiveArray</code> with new values.\nDescribes a struct that can be extended from slices of …\nConcrete <code>Growable</code> for the <code>BinaryArray</code>.\nConcrete <code>Growable</code> for the [<code>BinaryArray</code>].\nConcrete <code>Growable</code> for the <code>BooleanArray</code>.\nConcrete <code>Growable</code> for the <code>DictionaryArray</code>.\nConcrete <code>Growable</code> for the <code>FixedSizeBinaryArray</code>.\nConcrete <code>Growable</code> for the <code>FixedSizeListArray</code>.\nConcrete <code>Growable</code> for the <code>ListArray</code>.\nConcrete <code>Growable</code> for the <code>NullArray</code>.\nConcrete <code>Growable</code> for the <code>PrimitiveArray</code>.\nConcrete <code>Growable</code> for the <code>StructArray</code>.\nConcrete <code>Growable</code> for the <code>Utf8Array</code>.\nConverts this <code>Growable</code> to an <code>Arc&lt;dyn Array&gt;</code>, thereby …\nConverts this <code>Growable</code> to an <code>Box&lt;dyn Array&gt;</code>, thereby …\nExtends this <code>Growable</code> with elements from the bounded <code>Array</code> …\nSame as extend, except it repeats the extension <code>copies</code> …\nSafety\nIgnores the buffers and doesn’t update the view. This is …\nExtends this <code>Growable</code> with null elements, disregarding the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe current length of the <code>Growable</code>.\nCreates a new <code>Growable</code> from an arbitrary number of <code>Array</code>s.\nCreates a new <code>GrowableBinary</code> bound to <code>arrays</code> with a …\nCreates a new <code>GrowableBoolean</code> bound to <code>arrays</code> with a …\nCreates a new <code>GrowableFixedSizeBinary</code> bound to <code>arrays</code> with …\nCreates a new <code>GrowableNull</code>.\nCreates a new <code>GrowablePrimitive</code> bound to <code>arrays</code> with a …\nCreates a new <code>GrowableList</code> bound to <code>arrays</code> with a …\nCreates a new <code>GrowableStruct</code> bound to <code>arrays</code> with a …\nCreates a new <code>GrowableFixedSizeList</code> bound to <code>arrays</code> with a …\nCreates a new <code>GrowableUtf8</code> bound to <code>arrays</code> with a …\nCreates a new <code>GrowableDictionary</code> bound to <code>arrays</code> with a …\nCreates a new <code>GrowableBinaryViewArray</code> bound to <code>arrays</code> with …\nSealed trait representing access to a value of an array.\nIterator of values of an <code>ArrayAccessor</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new <code>ArrayValuesIter</code>\nSafety\nHelper trait to support <code>Offset</code> and <code>OffsetBuffer</code>\nError\nAn immutable container semantically equivalent to …\nA container of booleans. <code>MutableBitmap</code> is semantically …\nReturns the bits of this <code>Bitmap</code> as a <code>AlignedBitmapSlice</code>.\nCompute bitwise A AND B operation.\nCompute bitwise A AND NOT B operation.\nReturns the slice of bytes of this <code>MutableBitmap</code>. Note …\nReturns the byte slice of this <code>Bitmap</code>.\nReturns the slice of bytes of this <code>MutableBitmap</code>. Note …\nApply a bitwise operation <code>op</code> to two inputs and return the …\nApply a bitwise binary operation to a <code>MutableBitmap</code>.\nReturns the capacity of <code>MutableBitmap</code> in number of bits.\nCreates a <code>Vec&lt;u8&gt;</code> from a <code>TrustedLen</code> of <code>BitChunk</code>.\nReturns an iterator over bits in bit chunks <code>BitChunk</code>.\nEmpties the <code>MutableBitmap</code>.\nExtends <code>MutableBitmap</code> by <code>additional</code> values of constant …\nExtends the <code>MutableBitmap</code> from a <code>Bitmap</code>.\nExtends the <code>MutableBitmap</code> from a slice of bytes with …\nExtends the <code>MutableBitmap</code> from a slice of bytes with …\nExtends <code>self</code> from a <code>TrustedLen</code> iterator.\nExtends <code>self</code> from an iterator of trusted len.\nReturns a fast iterator that gives 32 bits at a time. Has …\nReturns a fast iterator that gives 56 bits at a time. Has …\nReturns a fast iterator that gives 64 bits at a time. Has …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a <code>[Bitmap]</code> from its internal representation. This …\nInitializes a <code>MutableBitmap</code> with all values set to valid/ …\nInitializes a zeroed <code>MutableBitmap</code>.\nCreates a new <code>Bitmap</code> from an iterator of booleans.\nCreates a new <code>MutableBitmap</code> from an iterator of booleans.\nCreates a new <code>Bitmap</code> from an iterator of booleans.\nCreates a new <code>MutableBitmap</code> from an iterator of booleans.\nCreates a new <code>Bitmap</code> from a slice and length.\nAlias for <code>Bitmap::try_new().unwrap()</code> This function is <code>O(1)</code>\nInitializes a <code>MutableBitmap</code> from a <code>Vec&lt;u8&gt;</code> and a length. …\nReturns whether the bit at position <code>i</code> is set.\nReturns whether the position <code>index</code> is set.\nReturns whether the bit at position <code>i</code> is set.\nUnsafely returns whether the bit at position <code>i</code> is set.\nReturns whether the position <code>index</code> is set.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConverts this <code>Bitmap</code> to <code>MutableBitmap</code>, returning itself if …\nReturns whether <code>Bitmap</code> is empty\nReturns whether <code>MutableBitmap</code> is empty.\nReturns a new iterator of <code>bool</code> over this bitmap\nconstructs a new iterator over the bits of <code>MutableBitmap</code>.\nReturns the number of set bits on this <code>Bitmap</code> if it is …\nReturns the number of unset bits on this <code>Bitmap</code> if it is …\nReturns the length of the <code>Bitmap</code>.\nReturns the length of the <code>MutableBitmap</code>.\nConverts this <code>Bitmap</code> into a <code>MutableBitmap</code>, cloning its …\nInitializes an empty <code>Bitmap</code>.\nInitializes an empty <code>MutableBitmap</code>.\nInitializes an new <code>Bitmap</code> filled with the given value.\nInitializes an new <code>Bitmap</code> filled with unset values.\nReturns the number of unset bits on this <code>MutableBitmap</code>.\nCounts the nulls (unset bits) starting from <code>offset</code> bits …\nCompute bitwise A OR B operation.\nCompute bitwise A OR NOT B operation.\nPop the last bit from the <code>MutableBitmap</code>. Note if the …\nPushes a new bit to the <code>MutableBitmap</code>, re-sizing it if …\nPushes a new bit to the <code>MutableBitmap</code>\nApply a bitwise operation <code>op</code> to four inputs and return the …\nReserves <code>additional</code> bits in the <code>MutableBitmap</code>, potentially …\nSets the position <code>index</code> to <code>value</code>\nReturns the number of set bits on this <code>Bitmap</code>.\nSets the position <code>index</code> to <code>value</code>\nShrinks the capacity of the <code>MutableBitmap</code> to fit its …\nSlices <code>self</code>, offsetting by <code>offset</code> and truncating up to …\nSlices <code>self</code>, offsetting by <code>offset</code> and truncating up to …\nSlices <code>self</code>, offsetting by <code>offset</code> and truncating up to …\nSlices <code>self</code>, offsetting by <code>offset</code> and truncating up to …\nApply a bitwise operation <code>op</code> to three inputs and return …\nReturns an iterator that only iterates over the set bits.\nCreates a new <code>Bitmap</code> from a fallible iterator of booleans.\nCreates a new <code>MutableBitmap</code> from an iterator of booleans.\nCreates a new <code>Bitmap</code> from a fallible iterator of booleans.\nCreates a new <code>MutableBitmap</code> from an falible iterator of …\nInitializes a new <code>Bitmap</code> from vector of bytes and a length.\nInitializes a new <code>MutableBitmap</code> from a <code>Vec&lt;u8&gt;</code> and a …\nApply a bitwise operation <code>op</code> to one input and return the …\nApplies a function to every bit of this <code>MutableBitmap</code> in …\nReturns the number of unset bits on this <code>Bitmap</code>.\nReturns the number of unset bits on this <code>MutableBitmap</code>.\nUpdates the count of the number of set bits on this <code>Bitmap</code>.\nGeneral utilities for bitmaps representing items where LSB …\nInitializes a pre-allocated <code>MutableBitmap</code> with capacity …\nCompute bitwise XOR operation.\nRepresents a bitmap split in three portions, a prefix, a …\nThe length (in bits) of the portion of the bitmap found in …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe length (in bits) of the portion of the bitmap found in …\nThe length (in bits) of the portion of the bitmap found in …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nComputes the index of the nth set bit after start.\nComputes the index of the nth set bit before end, counting …\nSafety\nThis crates’ equivalent of <code>std::vec::IntoIter</code> for <code>Bitmap</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new <code>IntoIter</code> from a <code>Bitmap</code>\nReturns the remainder bits and how many there are, …\nReturns the remainder bits and how many there are, …\nReturns the remainder bits and how many there are, …\nA chunk of bits. This is used to create masks of a given …\nTrait representing an exact iterator over bytes in <code>BitChunk</code>…\nThis struct is used to efficiently iterate over bit masks …\nAn iterator over a slice of bytes in <code>BitChunk</code>s.\nAn iterator over mutable slices of bytes of exact size.\nAn iterator over bits according to the LSB, i.e. the bytes …\nThere are null values\nThere are no null values\nIterator over a bitmap that returns slices of set regions …\nAn <code>Iterator</code> over <code>Option&lt;T&gt;</code> This enum can be used in two …\nAn <code>Iterator</code> over validity and values.\nReturns the number of bytes required to hold <code>bits</code> bits.\nReturns the number of zero bits in the slice offsetted by …\nFormats <code>bytes</code> taking into account an offset and length of …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nconvert itself from bytes.\nReturns whether bit at position <code>i</code> in <code>bytes</code> is set.\nReturns whether bit at position <code>i</code> in <code>bytes</code> is set or not.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns whether there are still elements in this iterator\nReturns whether bit at position <code>i</code> in <code>byte</code> is set or not\nReturns the number of chunks of this iterator\nCreates a new <code>BitChunksExact</code>.\nCreates a <code>BitChunks</code>.\nReturns a new <code>BitChunksExactMut</code>\nCreates a new <code>BitmapIter</code>.\nCreates a new <code>SlicesIterator</code>\nCreates a new <code>ZipValidityIter</code>.\nReturns a new <code>ZipValidity</code>\nReturns a new <code>ZipValidity</code> and drops the <code>validity</code> if all …\nThe remainder of the iterator.\nReturns the remaining <code>BitChunk</code>. It is zero iff <code>len / 8 == 0</code>…\nReturns the remainder <code>BitChunk</code>.\nThe remainder slice\nAn iterator over individual items of the remainder\nAn iterator over individual items of the remainder\nThe number of items in the remainder\nReturns the remainder bits in <code>BitChunks::remainder</code>.\nThe length of the remainder slice in bits.\nSets bit at position <code>i</code> in <code>byte</code>.\nSets bit at position <code>i</code> in <code>bytes</code>.\nSets bit at position <code>i</code> in <code>bytes</code> without doing bound checks\nReturns the total number of slots. It corresponds to the …\nconvert itself into bytes.\nUnwrap into an iterator that has null values.\nUnwrap into an iterator that has no null values.\n<code>Buffer</code> is a contiguous memory region that can be shared …\nBytes representation.\nReturns the byte slice stored in this buffer\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns a mutable reference to its slice, if possible.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns a mutable reference to its underlying <code>Vec</code>, if …\nReturns whether the buffer is empty.\nReturns whether underlying data is sliced. If sliced the …\nReturns the number of bytes in the buffer\nCreates an empty <code>Buffer</code>.\nReturns the start offset of this buffer within the …\nSafety\nGet the strong count of underlying <code>Arc</code> data buffer.\nGet the weak count of underlying <code>Arc</code> data buffer.\nSlices this buffer starting at <code>offset</code>.\nSlices this buffer starting at <code>offset</code>.\nReturns a new <code>Buffer</code> that is a slice of this buffer …\nReturns a new <code>Buffer</code> that is a slice of this buffer …\nContains different aggregation functions\nDefines kernels suitable to perform operations to …\nDefines generics suitable to perform operations to …\nContains bitwise operators: <code>or</code>, <code>and</code>, <code>xor</code> and <code>not</code>.\nnull-preserving operators such as <code>and</code>, <code>or</code> and <code>not</code>.\nBoolean operators of Kleene logic.\nDefines different casting operators such as <code>cast</code> or […\nExample:\nDefines take kernel for <code>Array</code>\nDefines temporal kernels for time and date related …\nObject that can reduce itself to a number. This is used in …\nWhether <code>sum</code> supports <code>data_type</code>\nReturns the total (heap) allocated size of the array in …\nReduces this element to a single value.\nReturns the sum of all elements in <code>array</code> as a <code>Scalar</code> of …\nReturns the sum of values in the array.\nCompute the sum of a slice\nApplies a binary operations to two primitive arrays. This …\nVersion of binary that creates a mutable bitmap that is …\nVersion of binary that returns an array and bitmap. Used …\nVersion of binary that checks for errors in the closure …\nVersion of unary that checks for errors in the closure …\nApplies an unary and infallible function to a …\nVersion of unary that creates a mutable bitmap that is …\nVersion of unary that returns an array and bitmap. Used …\nApplies a binary function to two <code>PrimitiveArray</code>s, …\nApplies an unary function to a <code>PrimitiveArray</code>, optionally …\nPerforms <code>AND</code> operation on two <code>PrimitiveArray</code>s.\nPerforms <code>AND</code> operation between a <code>PrimitiveArray</code> and scalar.\nReturns a new <code>PrimitiveArray</code> with the bitwise <code>not</code>.\nPerforms <code>OR</code> operation on two <code>PrimitiveArray</code>s.\nPerforms <code>OR</code> operation between a <code>PrimitiveArray</code> and scalar.\nPerforms <code>XOR</code> operation between two <code>PrimitiveArray</code>s.\nPerforms <code>XOR</code> operation between a <code>PrimitiveArray</code> and scalar.\nReturns whether all values in the array are <code>true</code>.\nPerforms <code>&amp;&amp;</code> operation on two <code>BooleanArray</code>, combining the …\nPerforms <code>AND</code> operation on an array and a scalar value. If …\nReturns whether any of the values in the array are <code>true</code>.\nReturns a non-null <code>BooleanArray</code> with whether each value of …\nReturns a non-null <code>BooleanArray</code> with whether each value of …\nPerforms unary <code>NOT</code> operation on an arrays. If value is …\nPerforms <code>||</code> operation on two <code>BooleanArray</code>, combining the …\nPerforms <code>OR</code> operation on an array and a scalar value. If …\nReturns whether all values in the array are <code>true</code>.\nLogical ‘and’ operation on two arrays with Kleene logic\nLogical ‘and’ operation on an array and a scalar value …\nReturns whether any of the values in the array are <code>true</code>.\nLogical ‘or’ operation on two arrays with Kleene logic\nLogical ‘or’ operation on an array and a scalar value …\noptions defining how Cast kernels behave\nConversion of binary\nCast <code>BinaryArray</code> to <code>DictionaryArray</code>, also known as packing.\nConversion of binary\nConversion to utf8\nConversion of binary\nConversion to utf8\nCasts the <code>BooleanArray</code> to a [<code>BinaryArray</code>], casting trues …\nCasts the <code>BooleanArray</code> to a <code>PrimitiveArray</code>.\nCast <code>array</code> to the provided data type and return a new <code>Array</code>…\nConversion of dates\nConversion of dates\nCasts <code>days_ms</code>s to <code>months_days_ns</code>. This operation is …\nReturns a <code>PrimitiveArray&lt;i128&gt;</code> with the casted values. …\nReturns a <code>PrimitiveArray&lt;i128&gt;</code> with the casted values. …\nReturns a <code>PrimitiveArray&lt;i128&gt;</code> with the casted values. …\nCasts a <code>DictionaryArray</code> to a new <code>DictionaryArray</code> backed by …\nCasts a <code>DictionaryArray</code> to a new <code>DictionaryArray</code> by …\nCasts f16 into f32\nConversion of <code>FixedSizeBinary</code> to <code>Binary</code>.\nReturns a <code>PrimitiveArray&lt;i128&gt;</code> with the casted values. …\nReturns the argument unchanged.\nReturns a <code>PrimitiveArray&lt;i128&gt;</code> with the casted values. …\nCalls <code>U::from(self)</code>.\nCasts months represented as <code>i32</code>s to <code>months_days_ns</code>. This …\nReturns a <code>Utf8Array</code> where every element is the utf8 …\ndefault to false whether to cast to an integer at the …\nCast <code>PrimitiveArray</code> as a <code>PrimitiveArray</code> Same as …\nReturns a <code>BooleanArray</code> where every element is different …\nCast <code>PrimitiveArray</code> to <code>DictionaryArray</code>. Also known as …\nCast <code>PrimitiveArray</code> to a <code>PrimitiveArray</code> of another …\nCast <code>PrimitiveArray</code> to a <code>PrimitiveArray</code> of the same …\nConversion of time\nConversion of times\nConversion of times\nConversion of time\nConversion of times\nConversion of times\nConversion of timestamp\nConversion of timestamp\nConversion of timestamp\nReturns a <code>Utf8Array</code> where every element is the utf8 …\nConversion of utf8\nConversion to binary\nCast <code>Utf8Array</code> to <code>DictionaryArray</code>, also known as packing.\nConversion of utf8\ndefault to false whether an overflowing cast should be …\nSimilar to dictionary_to_dictionary_keys, but overflowing …\nSimilar to dictionary_to_dictionary_values, but …\nConcatenate multiple Array of the same type into a single …\nConcatenate the validities of multiple Arrays into a …\nReturns a new <code>Array</code> with only indices at <code>indices</code>. Null …\nChecks if an array of type <code>datatype</code> can perform day …\nChecks if an array of type <code>datatype</code> can perform hour …\nChecks if an array of type <code>data_type</code> can perform ISO week …\nChecks if an array of type <code>datatype</code> can perform minute …\nChecks if an array of type <code>datatype</code> can perform month …\nChecks if an array of type <code>datatype</code> can perform nanosecond …\nChecks if an array of type <code>datatype</code> can perform second …\nChecks if an array of type <code>data_type</code> can perform weekday …\nChecks if an array of type <code>datatype</code> can perform year …\nExtracts the days of a temporal array as <code>PrimitiveArray&lt;i8&gt;</code>…\nExtracts the hours of a temporal array as …\nExtracts ISO week of a temporal array as <code>PrimitiveArray&lt;i8&gt;</code>\nExtracts the minutes of a temporal array as …\nExtracts the months of a temporal array as …\nExtracts the nanoseconds of a temporal array as …\nExtracts the seconds of a temporal array as …\nExtracts weekday of a temporal array as <code>PrimitiveArray&lt;i8&gt;</code>.\nExtracts the years of a temporal array as …\nThe set of supported logical types in this crate.\nAn ordered sequence of <code>Field</code>s with associated <code>Metadata</code>.\nOpaque binary data of variable length.\nOpaque binary data of variable length whose offsets are …\nA binary type that inlines small values and can intern …\nA binary type that inlines small values and can intern …\nA boolean represented as a single bit.\n<code>true</code> and <code>false</code>.\nAn <code>i32</code> representing the elapsed time since UNIX epoch …\nAn <code>i64</code> representing the elapsed time since UNIX epoch …\nThe number of elapsed days and milliseconds, stored as 2 …\nDecimal value with precision and scale precision is the …\nDecimal backed by 256 bits\nDense union\nA dictionary encoded array by <code>IntegerType</code>.\nA dictionary encoded array (<code>key_type</code>, <code>value_type</code>), where …\nMeasure of elapsed time. This elapsed time is a physical …\nExtension type.\nRepresents Arrow’s metadata of a “column”.\nOpaque binary data of fixed size.\nOpaque binary data of fixed size. Enum parameter specifies …\nA list of some data type with fixed length.\nA list of some logical data type with a fixed number of …\nAn 16-bit float\nA <code>f32</code>\nA <code>f64</code>\nA signed 16-bit integer.\nAn <code>i16</code>\nA signed 32-bit integer.\nAn <code>i32</code>\nA signed 64-bit integer.\nAn <code>i64</code>\nA signed 8-bit integer.\nAn <code>i8</code>\nthe set of valid indices types of a dictionary-encoded …\nA “calendar” interval modeling elapsed time that takes …\nInterval units defined in Arrow\nOpaque binary data of variable length and 64-bit offsets.\nOpaque binary data of variable length whose offsets are …\nA list of some data type with variable length and 64-bit …\nA list of some logical data type whose offsets are …\nA variable-length string in Unicode with UFT-8 encoding …\nA variable-length UTF-8 encoded string whose offsets are …\nA list of some data type with variable length.\nA list of some logical data type whose offsets are …\nA nested type.\nA nested type that is represented as\ntypedef for BTreeMap&lt;String, String&gt; denoting <code>Field</code>’s …\nTime in microseconds.\nTime in milliseconds.\nThe number of elapsed months (i32), days (i32) and …\nTime in nanoseconds.\nA Null with no allocation.\nNull type\nThe set of physical types: unique in-memory …\nAn array where each slot has a known compile-time size.\ntypedef for <code>Arc&lt;ArrowSchema&gt;</code>.\nTime in seconds.\nSparse union\nA nested type that contains an arbitrary number of fields.\nA nested <code>ArrowDataType</code> with a given number of <code>Field</code>s.\nA 32-bit time representing the elapsed time since midnight …\nA 64-bit time representing the elapsed time since midnight …\nThe time units defined in Arrow.\nA <code>i64</code> representing a timestamp measured in <code>TimeUnit</code> with …\nAn unsigned 16-bit integer.\nAn <code>u16</code>\nAn unsigned 32-bit integer.\nAn <code>u32</code>\nAn unsigned 64-bit integer.\nAn <code>u64</code>\nAn unsigned 8-bit integer.\nAn <code>u8</code>\nA nested type that represents slots of differing types.\nA nested datatype that can represent slots of differing …\nMode of <code>ArrowDataType::Union</code>\nA type unknown to Arrow.\nA variable-length string in Unicode with UTF-8 encoding.\nA variable-length UTF-8 encoded string whose offsets are …\nA string type that inlines small values and can intern …\nA string type that inlines small values and can intern …\nThe number of elapsed whole months.\nReturns the <code>Field</code>’s <code>ArrowDataType</code>.\nIts logical <code>ArrowDataType</code>\nWhether this physical type equals <code>PhysicalType::Primitive</code> …\nThe fields composing this schema.\nReturns a new <code>ArrowSchema</code> with a subset of all fields …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nsupport get extension for metadata\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns whether the mode is dense\nIts nullability\nReturns whether the mode is sparse\nAdditional custom (opaque) metadata.\nOptional metadata.\nIts name\nCreates a new <code>Field</code>.\nConstructs a <code>UnionMode::Sparse</code> if the input bool is true, …\nReturns <code>&amp;self</code> for all but <code>ArrowDataType::Extension</code>. For …\nthe <code>PhysicalType</code> of this <code>ArrowDataType</code>.\nCreates a new <code>Field</code> with metadata.\nAttaches a <code>Metadata</code> to <code>ArrowSchema</code>\nABI-compatible struct for <code>ArrowArray</code>\nABI-compatible struct for <code>ArrowArrayStream</code>.\nImplements an iterator of <code>Array</code> consumed from the C stream …\nABI-compatible struct for <code>ArrowSchema</code>\ncreate an empty ArrowSchema\ncreates an empty <code>ArrowArray</code>, which can be used to import …\nCreates an empty <code>ArrowArrayStream</code> used to import from a …\nExports an <code>Box&lt;dyn Array&gt;</code> to the C data interface.\nExports a <code>Field</code> to the C data interface.\nExports an iterator to the C stream interface\nReturns the field provided by the stream\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nImports an <code>Array</code> from the C data interface.\nImports a <code>Field</code> from the C data interface.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nFunctionality to mmap in-memory data regions.\nAdvances this iterator by one array\nReturns a new <code>ArrowArrayStreamReader</code>\nCreates a (non-null) <code>BooleanArray</code> from a slice of bits. …\nCreates a (non-null) <code>BooleanArray</code> from a slice of bits. …\nCreates a (non-null) <code>PrimitiveArray</code> from a slice of values.\nCreates a (non-null) <code>PrimitiveArray</code> from a slice of values.\nAPIs to read from and write to Arrow’s IPC format.\nStruct containing <code>dictionary_id</code> and nested <code>IpcField</code>, …\nStruct containing fields and whether the file is written …\nA struct adapter of Read+Seek+Write to append to IPC files\ndictionary id\noptional children\nThe fields in the schema\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nEndianness of the file\nAPIs to read Arrow’s IPC format.\nAPIs to write to Arrow’s IPC format.\nhow dictionaries are tracked in this crate\nThe record contains a number of buffers that does not …\nMetadata of an Arrow IPC file, written in the footer of …\nAn iterator of <code>RecordBatch</code>s from an Arrow IPC file.\nA bitmap’s size is smaller than the required for the …\nA buffer’s size is smaller than the required for the …\nA buffer’s size is larger than the file size\nFixedSizeBinaryArray has invalid datatype.\nThe block is an invalid flatbuffer\nThe message’s body length is an invalid flatbuffer\nThe message’s buffers is an invalid flatbuffer\nThe compression is an invalid flatbuffer\nThe message’s data is an invalid flatbuffer\nThe footer’s dictionaries is an invalid flatbuffer\nThe footer is an invalid flatbuffer\nThe message’s header is an invalid flatbuffer\nThe dictionary id is an invalid flatbuffer\nThe dictionary is_delta is an invalid flatbuffer\nThe dictionary message is an invalid flatbuffer\nThe message’s nodes is an invalid flatbuffer\nThe footer’s record batches is an invalid flatbuffer\nThe footer’s schema is an invalid flatbuffer\nThe version is an invalid flatbuffer\nThe IPC file does not end with [b’A’, b’R’, b’R…\nThe IPC file does not start with [b’A’, b’R’, b’R…\nInvalid dictionary id\nField id is not a dictionary\nThe message does not contain data\nThe file’s schema does not contain fields\nRecordBatch messages do not contain buffers\nThe message does not contain a header\nRecordBatch messages does not contain nodes\nThe file’s footer does not contain record batches\nThe file’s footer does not contain a schema\nThe first 4 bytes of the last 10 bytes is &lt; 0\nThe different types of errors that reading from IPC can …\nNext item in the stream\nMetadata of an Arrow IPC stream, written at the start of …\nArrow Stream reader.\nEncodes the stream’s status after each read.\ndictionaries can only contain dictionary messages; record …\nRelative positions in the file is &lt; 0\nA live stream without data\nThe blocks in the file\nDeserialize an flatbuffers-encoded Schema message into …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nRead the row count by summing the length of the of the …\nGet the inner memory scratches so they can be reused in a …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConsumes this FileReader, returning the underlying reader\nThe files’ <code>IpcSchema</code>\nThe IPC fields tracking dictionaries\nCheck if the stream is finished\nReturns the <code>FileMetadata</code>\nReturn the schema of the stream\nCreates a new <code>FileReader</code>. Use <code>projection</code> to only take …\nTry to create a new stream reader\nReads the record batch at position <code>index</code> from the reader.\nReads all file’s dictionaries, if any This function is …\nRead the Arrow IPC file’s metadata\nReads the metadata of the stream\nReturn the schema of the file\nReturn the schema of the file\nThe schema that is read from the file footer\nThe schema that is read from the stream’s first message\nSet the inner memory scratches so they can be reused in a …\nThe total size of the file in bytes\nReturn the data inside this wrapper.\nThe IPC version of the stream\nThe size of the IPC buffer\nnumber of bytes of all buffers in the record\nthe size of the file\nDeclared number of elements in the buffer\nDeclared length of the bitmap\nNumber of bits on the IPC buffer\nThe requested dictionary id\nThe requested dictionary id\nBytes required for the <code>length</code> and <code>type</code>\nThe name of the <code>NativeType</code>\nCompression codec\nArrow file writer\nLZ4 (framed)\nAn array <code>RecordBatch</code> with optional accompanying IPC fields.\nArrow stream writer\nOptions declaring the behaviour of writing to IPC\nZSTD\nGet the Arrow columns in this record.\nWhether the buffers should be compressed and which codec …\nAssigns every dictionary field a unique ID\nGet the IPC fields for this record.\nWrite continuation bytes, and mark the stream as done\nWrite footer and closing tag, then mark the writer as done\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet the inner memory scratches so they can be reused in a …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConsumes itself, returning the inner writer.\nConsumes itself into the inner writer\nCreates a new <code>StreamWriter</code>\nCreates a new <code>FileWriter</code>.\nConverts a ArrowSchema and IpcFields to a …\nSet the inner memory scratches so they can be reused in a …\nStarts the stream by writing a Schema message to it. Use …\nWrites the header and first (schema) message to the file.\nCreates a new <code>FileWriter</code> from an existing file, seeking to …\nCreates a new <code>FileWriter</code> and writes the header to <code>writer</code>\nWrites an <code>Array</code> to <code>arrow_data</code>\nWrites <code>RecordBatch</code> to the stream\nWrites <code>RecordBatch</code> to the file\nA <code>StreamingIterator</code> with an internal buffer of <code>Vec&lt;u8&gt;</code> …\nThe type of the elements being iterated over.\nAn interface for dealing with streaming iterators.\nAdvances the iterator to the next element.\nDetermines if all elements of the iterator satisfy a …\nDetermines if any elements of the iterator satisfy a …\nBorrows an iterator, rather than consuming it.\nConsumes two iterators and returns a new iterator that …\nProduces a normal, non-streaming, iterator by cloning the …\nProduces a normal, non-streaming, iterator by copying the …\nConsumes the iterator, counting the number of remaining …\nCreates an iterator which uses a closure to determine if …\nCreates an iterator which both filters and maps by …\nCreates a regular, non-streaming iterator which both …\nReturns the first element of the iterator that satisfies …\nCreates an iterator which flattens iterators obtained by …\nReduces the iterator’s elements to a single, final value.\nCalls a closure on each element of an iterator.\nReturns the argument unchanged.\nCreates an iterator which is “well behaved” at the …\nReturns a reference to the current element of the iterator.\nCall a closure on each element, passing the element on. …\nCalls <code>U::from(self)</code>.\nChecks if <code>get()</code> will return <code>None</code>.\nCreates an iterator which transforms elements of this …\nCreates a regular, non-streaming iterator which transforms …\nCreates an iterator which transforms elements of this …\nAdvances the iterator and returns the next value.\nConsumes the first <code>n</code> elements of the iterator, returning …\nReturns the index of the first element of the iterator …\nCreates an iterator which returns elemens in the opposite …\nReturns the bounds on the remaining length of the iterator.\nCreates an iterator which skips the first <code>n</code> elements.\nCreates an iterator that skips initial elements matching a …\nCreates an iterator which only returns the first <code>n</code> …\nCreates an iterator which only returns initial elements …\nCast null arrays to inner type and ensure that all offsets …\nCreate a list-array from an iterator. Used in group_by …\nSafety\nCreate a list-array from an iterator. Used in group_by …\nCreate a list-array from an iterator. Used in group_by …\nCreate a list-array from an iterator. Used in group_by …\nSafety\nSafety\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nUtility trait to slice concrete arrow arrays whilst …\nSlices this <code>Array</code>.\nSlices the <code>Array</code>.\nReturns its underlying <code>Vec</code>, if possible.\nContains the error value\nContains the success value\nConstant that help with creating error messages dependent …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSet the function that will be called by the <code>polars_warn!</code> …\nTranslate the negative index to an offset.\nSafety\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nkernels that combine take and aggregations.\nConcatenate multiple <code>Array</code> of the same type into a single …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nConvert a list <code>[1, 2, 3]</code> to a list type of <code>[[1], [2], [3]]</code>\nCheck if an index is out of bounds for at least one …\nNo value.\nSome value of type <code>T</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nUpdate and recompute the window\nGeneric <code>Min</code> / <code>Max</code> kernel.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSafety\nSafety\nEfficiently sets value at the indices from the iterator to …\nSet values in a primitive array where the primitive array …\nSet values in a primitive array based on a mask array. …\nTake a clean-partitioned slice and return the groups slices\nNumerical stable online variance aggregation See: Welford, …\nTake kernel for single chunk and an iterator as index.\nTake kernel for single chunk and an iterator as index.\nTake kernel for single chunk without nulls and an iterator …\nTake kernel for single chunk and an iterator as index.\nTake kernel for single chunk and an iterator as index.\nTake kernel for single chunk and an iterator as index.\nTake kernel for single chunk and an iterator as index.\nTake kernel for single chunk and an iterator as index.\nTake kernel for single chunk and an iterator as index.\nTake kernel for single chunk and an iterator as index.\nTake kernel for single chunk and an iterator as index.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nExtend the array with an iterator who’s length can be …\nExtend the array with an iterator who’s length can be …\nSafety\nSafety\nWill push an item and not check if there is enough …\nSafety\nSafety\nTurn any iterator in a trusted length iterator\nMemory maps dictionaries from an IPC file into\nMemory maps an record batch from an IPC file into a …\nA wrapper type of <code>Vec&lt;O&gt;</code> representing the invariants of …\nA wrapper type of <code>Buffer&lt;O&gt;</code> that is guaranteed to:\nReturns the byte slice stored in this buffer\nReturns the byte slice stored in this buffer\nReturns a reference to its internal <code>Buffer</code>.\nReturns the capacity of <code>Offsets</code>.\nExtends itself with <code>additional</code> elements equal to the last …\nReturns the first offset.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the inner <code>Vec</code>.\nReturns the inner <code>Buffer</code>.\nCopy-on-write API to convert <code>OffsetsBuffer</code> into <code>Offsets</code>.\nReturns the last offset of this container.\nReturns the last offset.\nReturns the number of offsets in this container.\nReturns the number of offsets in this container.\nReturns the length an array with these offsets would be.\nReturns the length an array with these offsets would be.\nReturns an iterator with the lengths of the offsets\nReturns an empty <code>Offsets</code> (i.e. with a single element, the …\nReturns an empty <code>OffsetsBuffer</code> (i.e. with a single …\nReturns <code>Offsets</code> assuming that <code>offsets</code> fulfills its …\nSafety\nReturns an <code>Offsets</code> whose all lengths are zero.\nPops the last element\nReturns the range of the offsets.\nReserves <code>additional</code> entries.\nShrinks the capacity of self to fit.\nSlices this <code>OffsetsBuffer</code>.\nSlices this <code>OffsetsBuffer</code> starting at <code>offset</code>.\nReturns a range (start, end) corresponding to the position …\nReturns a range (start, end) corresponding to the position …\nReturns a range (start, end) corresponding to the position …\nReturns a range (start, end) corresponding to the position …\nTry extend from an iterator of lengths\nExtends itself from another <code>Offsets</code>\nExtends itself from another <code>Offsets</code> sliced by <code>start, length</code>\nCreates a new <code>Offsets</code> from an iterator of lengths\nTry to create a new <code>Offsets</code> from a sequence of <code>lengths</code>\nPushes a new element with a given length.\nReturns a new <code>Offsets</code> with a capacity, allocating at least …\nA private trait representing structs that can receive …\nA vector of trait objects of <code>Array</code> where every item has …\nreturns the <code>Array</code>s in <code>RecordBatch</code>\nreturns the <code>Array</code>s in <code>RecordBatch</code>\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nConsumes <code>RecordBatch</code> into its underlying arrays. The …\nreturns whether the columns have any rows\nreturns the number of rows of every array\nCreates a new <code>RecordBatch</code>.\nCreates a new <code>RecordBatch</code>.\nThe <code>Scalar</code> implementation of binary (<code>Option&lt;Vec&lt;u8&gt;&gt;</code>).\nThe implementation of <code>Scalar</code> for utf8, semantically …\nThe <code>Scalar</code> implementation of a boolean.\nThe <code>DictionaryArray</code> equivalent of <code>Array</code> for <code>Scalar</code>.\nThe <code>Scalar</code> implementation of fixed size binary ([…\nThe scalar equivalent of <code>FixedSizeListArray</code>. Like …\nThe scalar equivalent of <code>ListArray</code>. Like <code>ListArray</code>, this …\nThe scalar equivalent of <code>MapArray</code>. Like <code>MapArray</code>, this …\nThe representation of a single entry of a …\nThe implementation of <code>Scalar</code> for primitive, semantically …\nTrait object declaring an optional value with a …\nA single entry of a <code>crate::array::StructArray</code>.\nA single entry of a <code>crate::array::UnionArray</code>.\nThe implementation of <code>Scalar</code> for utf8, semantically …\nconvert itself to\nthe logical type.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nwhether it is valid\nreturns a new <code>DictionaryScalar</code>\nReturns a new <code>PrimitiveScalar</code>.\nReturns a new <code>Utf8Scalar</code>\nReturns a new <code>BinaryScalar</code>.\nReturns a new <code>BooleanScalar</code>\nreturns a new <code>ListScalar</code>\nreturns a new <code>MapScalar</code>\nA new <code>NullScalar</code>\nReturns a new <code>StructScalar</code>\nreturns a new <code>FixedSizeListScalar</code>\nReturns a new <code>FixedSizeBinaryScalar</code>.\nReturns a new <code>BinaryViewScalar</code>\nReturns a new <code>UnionScalar</code>\ncreates a new <code>Scalar</code> from an <code>Array</code>.\nReturns a new <code>PrimitiveScalar</code> with the same value but …\nReturns the type of the union scalar\nThe values of the <code>DictionaryScalar</code>\nReturns the optional value.\nReturns the value irrespectively of the validity.\nIts value\nThe value\nIts value\nReturns the value irrespectively of the validity.\nReturns the inner value\nThe values of the <code>ListScalar</code>\nThe values of the <code>MapScalar</code>\nReturns the values irrespectively of the validity.\nThe values of the <code>FixedSizeListScalar</code>\nNumber of days between 0001-01-01 and 1970-01-01\nNumber of microseconds in a second\nNumber of milliseconds in a second\nNumber of milliseconds in a day\nNumber of nanoseconds in a second\nNumber of seconds in a day\nconverts a <code>i32</code> representing a <code>date32</code> to <code>NaiveDate</code>\nconverts a <code>i32</code> representing a <code>date32</code> to <code>NaiveDate</code>\nconverts a <code>i32</code> representing a <code>date32</code> to <code>NaiveDateTime</code>\nconverts a <code>i32</code> representing a <code>date32</code> to <code>NaiveDateTime</code>\nconverts a <code>i64</code> representing a <code>date64</code> to <code>NaiveDate</code>\nconverts a <code>i64</code> representing a <code>date64</code> to <code>NaiveDateTime</code>\nconverts a <code>i64</code> representing a <code>duration(ms)</code> to <code>Duration</code>\nconverts a <code>i64</code> representing a <code>duration(ns)</code> to <code>Duration</code>\nconverts a <code>i64</code> representing a <code>duration(s)</code> to <code>Duration</code>\nconverts a <code>i64</code> representing a <code>duration(us)</code> to <code>Duration</code>\nParses an offset of the form <code>&quot;+WX:YZ&quot;</code> or <code>&quot;UTC&quot;</code> into …\nconverts a <code>i32</code> representing a <code>time32(ms)</code> to <code>NaiveTime</code>\nconverts a <code>i32</code> representing a <code>time32(s)</code> to <code>NaiveTime</code>\nconverts a <code>i64</code> representing a <code>time64(ns)</code> to <code>NaiveTime</code>\nconverts a <code>i64</code> representing a <code>time64(ns)</code> to <code>NaiveTime</code>\nconverts a <code>i64</code> representing a <code>time64(us)</code> to <code>NaiveTime</code>\nconverts a <code>i64</code> representing a <code>time64(us)</code> to <code>NaiveTime</code>\nconverts a <code>i64</code> representing a <code>timestamp(ms)</code> to …\nconverts a <code>i64</code> representing a <code>timestamp(ms)</code> to …\nconverts a <code>i64</code> representing a <code>timestamp(ns)</code> to …\nconverts a <code>i64</code> representing a <code>timestamp(ns)</code> to …\nconverts a <code>i64</code> representing a <code>timestamp(s)</code> to <code>NaiveDateTime</code>\nconverts a <code>i64</code> representing a <code>timestamp(s)</code> to <code>NaiveDateTime</code>\nConverts a timestamp in <code>time_unit</code> and <code>timezone</code> into …\nconverts a <code>i64</code> representing a <code>timestamp(us)</code> to …\nconverts a <code>i64</code> representing a <code>timestamp(us)</code> to …\nCalculates the scale factor between two TimeUnits. The …\nParses <code>value</code> to <code>Option&lt;i64&gt;</code> consistent with the Arrow’s …\nParses <code>value</code> to <code>Option&lt;i64&gt;</code> consistent with the Arrow’s …\nAn iterator of known, fixed size. A trait denoting Rusts’…\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nA chunk of bits. This is used to create masks of a given …\nAn [<code>Iterator&lt;Item=bool&gt;</code>] over a <code>BitChunk</code>. This iterator is …\nAn [<code>Iterator&lt;Item=usize&gt;</code>] over a <code>BitChunk</code> returning the …\nType denoting its representation as bytes. This is <code>[u8; N]</code> …\nTwo i32 representing days and ms\nThe difference between 1.0 and the next largest …\nA 16-bit floating point number.\nA 32-bit floating point number.\nA 64-bit floating point number.\nWhether it is <code>i32</code> (false) or <code>i64</code> (true).\nSealed trait describing the subset of <code>NativeType</code> (<code>i32</code>, <code>i64</code>…\nRange of <code>Index</code>, equivalent to <code>(a..b)</code>. <code>Step</code> is unstable in …\nA signed 128-bit integer.\nA signed 16-bit integer.\nA signed 256-bit integer.\nA signed 32-bit integer.\nA signed 64-bit integer.\nA signed 8-bit integer.\nmonths_days_ns(i32, i32, i64)\nSealed trait implemented by all physical types that can be …\nSealed trait describing the subset (<code>i32</code> and <code>i64</code>) of <code>Index</code> …\nThe corresponding variant of <code>PrimitiveType</code>.\nThe set of all implementations of the sealed trait …\nAn unsigned 128-bit integer.\nAn unsigned 16-bit integer.\nAn unsigned 32-bit integer.\nAn unsigned 64-bit integer.\nAn unsigned 8-bit integer.\nThe number of days\nThe number of days\nThe in-memory representation of the DayMillisecond variant …\nType representation of the Float16 physical type\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert itself from <code>usize</code>.\nFrom bytes in big endian\nCasts from u16.\nCasts an <code>f32</code> into <code>f16</code>\nFrom bytes in little endian\nconvert itself from bytes.\nConvert itself from <code>usize</code>.\nReturns a new <code>i256</code> from two <code>i128</code>.\nPhysical representation of a decimal\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe number of milliseconds\nThe number of months\nThe in-memory representation of the MonthDayNano variant …\nCreates a new <code>BitChunkIter</code> with <code>len</code> bits.\nCreates a new <code>BitChunkOnes</code> with <code>len</code> bits.\nReturns a new <code>IndexRange</code>.\nA new <code>days_ms</code>.\nA new <code>months_days_ns</code>.\nThe number of nanoseconds\nAn iterator from (inclusive) <code>start</code> to (exclusive) <code>end</code>.\nAn iterator from (inclusive) <code>start</code> to (exclusive) <code>end</code>.\nContains traits and implementations of multi-data used in …\nTo bytes in big endian\nCasts to u16.\nCasts this <code>f16</code> to <code>f32</code>\nTo bytes in little endian\nconvert itself into bytes.\nConvert itself to <code>usize</code>.\nThe type holding bits for masks.\nDescribes the ability to convert itself from a <code>BitChunk</code>.\nNumber of lanes\nType used for masking.\nThe <code>NativeType</code> of this struct. E.g. <code>f32</code> for a …\nA struct that lends itself well to be compiled leveraging …\nTrait implemented by some <code>NativeType</code> that have a SIMD …\nThe SIMD type associated with this trait. This type …\nReturns a tuple of 3 items whose middle item is itself, …\nMulti-Data correspondence of the native type\nMulti-Data correspondence of the native type\nMulti-Data correspondence of the native type\nMulti-Data correspondence of the native type\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert itself from a slice.\nConvert itself from a slice.\ncreates a new Self from <code>v</code> by populating items from <code>v</code> up to …\nMulti-Data correspondence of the native type\nMulti-Data correspondence of the native type\nMulti-Data correspondence of the native type\nMulti-Data correspondence of the native type\nMulti-Data correspondence of the native type\nMulti-Data correspondence of the native type\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMulti-Data correspondence of the native type\nSets values to <code>default</code> based on <code>mask</code>.\nMulti-Data correspondence of the native type\nMulti-Data correspondence of the native type\nMulti-Data correspondence of the native type\nMulti-Data correspondence of the native type")