searchState.loadedDescShard("i2c_linux_sys", 0, "SMBus 2.0\nTo determine what functionality is present\nPlain i2c-level commands (<code>I2C_RDWR</code>)\nGet the adapter functionality mask\n<code>I2C_M_NOSTART</code>\n<code>I2C_M_IGNORE_NAK</code> etc.\nSMBus 2.0\nI2C-like block xfer\nw/ 1-byte reg. addr.\nif <code>I2C_FUNC_PROTOCOL_MANGLING</code>\nif <code>I2C_FUNC_NOSTART</code>\nif <code>I2C_FUNC_PROTOCOL_MANGLING</code>\nread data, from slave to master\nlength will be first received byte\nif <code>I2C_FUNC_PROTOCOL_MANGLING</code>\nif <code>I2C_FUNC_PROTOCOL_MANGLING</code>\nthis is a ten bit chip address\n!= 0 to use PEC with SMBus\nCombined R/W transfer (one STOP only)\nnumber of times a device address should be polled when not …\nUse this slave address\nUse this slave address, even if it is already in use by a …\nSMBus transfer\nAs specified in SMBus standard\nSMBus 2.0\n0 for 7 bit addrs, != 0 for 10 bit\nset timeout in units of 10 ms\nif I2C_FUNC_PROTOCOL_MANGLING\nif I2C_FUNC_PROTOCOL_MANGLING\nI2C_FUNC_NOSTART\nI2C_M_NOSTART\nI2C_M_IGNORE_NAK etc.\nread data, from slave to master\nlength will be first received byte\nif I2C_FUNC_PROTOCOL_MANGLING\nSMBus 2.0\nI2C-like block xfer\nw/ 1-byte reg. addr.\nif I2C_FUNC_PROTOCOL_MANGLING\n<code>i2c_smbus_xfer</code> read or write markers\nSMBus transaction types (size parameter in the above …\nthis is a ten bit chip address\nHandles the 10-bit address extensions\nSlave address, either seven or ten bits.\nReturns the set containing all flags.\nReturns the set containing all flags.\nReturns the intersection between the two sets of flags.\nReturns the intersection between the two sets of flags.\nDisables all flags disabled in the set.\nDisables all flags disabled in the set.\nReturns the union of the two sets of flags.\nReturns the union of the two sets of flags.\nAdds the set of flags.\nAdds the set of flags.\nReturns the raw value of the flags currently stored.\nReturns the raw value of the flags currently stored.\nReturns the left flags, but with all the right flags …\nReturns the left flags, but with all the right flags …\nToggles the set of flags.\nToggles the set of flags.\n<code>block[0]</code> is used for length and one more for user-space …\nThe buffer into which data is read, or from which it’s …\nReturns the complement of this set of flags.\nReturns the complement of this set of flags.\nReturns <code>true</code> if all of the flags in <code>other</code> are contained …\nReturns <code>true</code> if all of the flags in <code>other</code> are contained …\nReturns the difference between the flags in <code>self</code> and <code>other</code>.\nReturns the difference between the flags in <code>self</code> and <code>other</code>.\nReturns an empty set of flags.\nReturns an empty set of flags.\n<code>I2C_M_RD</code> is handled by all adapters.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from underlying bit representation, unless that …\nConvert from underlying bit representation, unless that …\nConvert from underlying bit representation, dropping any …\nConvert from underlying bit representation, dropping any …\nConvert from underlying bit representation, preserving all …\nConvert from underlying bit representation, preserving all …\n<code>I2C_FUNCS</code>\nan I2C transaction segment beginning with START\n<code>I2C_PEC</code>\n<code>I2C_RDWR</code>\nThis is the structure as used in the <code>I2C_RDWR</code> ioctl call\n<code>I2C_RETRIES</code>\n<code>I2C_SLAVE</code> and <code>I2C_SLAVE_FORCE</code>\n<code>I2C_TENBIT</code>\n<code>I2C_TIMEOUT</code>\n<code>I2C_SMBUS</code>\nData for SMBus Messages\nThis is the structure as used in the I2C_SMBUS ioctl call\nInserts the specified flags in-place.\nInserts the specified flags in-place.\nReturns the intersection between the flags in <code>self</code> and …\nReturns the intersection between the flags in <code>self</code> and …\nReturns <code>true</code> if there are flags common to both <code>self</code> and …\nReturns <code>true</code> if there are flags common to both <code>self</code> and …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if all flags are currently set.\nReturns <code>true</code> if all flags are currently set.\nReturns <code>true</code> if no flags are currently stored.\nReturns <code>true</code> if no flags are currently stored.\nNumber of data bytes in <code>buf</code> being read from or written to …\nptr to array of simple messages\nnumber of messages to exchange\nReturns the complement of this set of flags.\nReturns the complement of this set of flags.\nRemoves the specified flags in-place.\nRemoves the specified flags in-place.\nInserts or removes the specified flags depending on the …\nInserts or removes the specified flags depending on the …\nReturns the set difference of the two sets of flags.\nReturns the set difference of the two sets of flags.\nDisables all flags enabled in the set.\nDisables all flags enabled in the set.\nReturns the symmetric difference between the flags in <code>self</code> …\nReturns the symmetric difference between the flags in <code>self</code> …\nToggles the specified flags in-place.\nToggles the specified flags in-place.\nReturns the union of between the flags in <code>self</code> and <code>other</code>.\nReturns the union of between the flags in <code>self</code> and <code>other</code>.")