searchState.loadedDescShard("systemstat", 0, "This library provides a way to access system information …\nThis module provides the data structures that represent …\nThis module reexports the OS-specific module that actually …\nThe size of an IPv4 address in bits.\nThe size of an IPv6 address in bits.\nAn IPv4 address representing the broadcast address: …\nAn ordered map based on a B-Tree.\nByte size representation\nA wrapper for a measurement that takes time.\nA <code>Duration</code> type to represent a span of time, typically …\nAn IPv4 address.\nAn IPv6 address.\nAn IPv4 address with the address pointing to localhost: …\nAn IPv6 address representing localhost: <code>::1</code>.\nThe maximum duration.\nThe duration of one microsecond.\nThe duration of one millisecond.\nThe duration of one nanosecond.\nA <code>PrimitiveDateTime</code> with a <code>UtcOffset</code>.\nThe duration of one second.\nMidnight, 1 January, 1970 (UTC).\nAn IPv4 address representing an unspecified address: …\nAn IPv6 address representing the unspecified address: <code>::</code>.\nA duration of zero time.\nComputes the absolute difference between <code>self</code> and <code>other</code>.\nPanics\nPanics\nPanics\nPanics\nPanics\nMoves all elements from <code>other</code> into <code>self</code>, leaving <code>other</code> …\nReturns the total number of whole microseconds contained …\nReturns the total number of whole milliseconds contained …\nReturns the number of milliseconds contained by this …\nReturns the number of milliseconds contained by this …\nReturns the total number of nanoseconds contained by this …\nReturns the number of <em>whole</em> seconds contained by this …\nReturns the number of seconds contained by this <code>Duration</code> …\nReturns the number of seconds contained by this <code>Duration</code> …\nFree bytes available to non-superuser\nComputes <code>self + duration</code>, returning <code>None</code> if an overflow …\nChecked <code>Duration</code> addition. Computes <code>self + other</code>, …\nChecked <code>Duration</code> division. Computes <code>self / other</code>, …\nChecked <code>Duration</code> multiplication. Computes <code>self * other</code>, …\nComputes <code>self - duration</code>, returning <code>None</code> if an overflow …\nChecked <code>Duration</code> subtraction. Computes <code>self - other</code>, …\nConvert the <code>OffsetDateTime</code> from the current <code>UtcOffset</code> to …\nClears the map, removing all elements.\nReturns <code>true</code> if the map contains a value for the specified …\nGet the <code>Date</code> in the stored offset.\nGet the day of the date in the stored offset.\nCreates an empty <code>BTreeMap</code>.\nDivides <code>Duration</code> by <code>Duration</code> and returns <code>f32</code>.\nDivides <code>Duration</code> by <code>Duration</code> and returns <code>f64</code>.\nDivides <code>Duration</code> by <code>f32</code>.\nDivides <code>Duration</code> by <code>f64</code>.\nGets the given key’s corresponding entry in the map for …\nCreates an iterator that visits all elements (key-value …\nUsed file nodes in filesystem\nFree nodes available to non-superuser\nTotal file nodes in filesystem\nReturns the first entry in the map for in-place …\nReturns the first key-value pair in the map. The key in …\nFormat the <code>OffsetDateTime</code> using the provided format …\nFormat the <code>OffsetDateTime</code> using the provided format …\nFree bytes in filesystem\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConverts a <code>[(K, V); N]</code> into a <code>BTreeMap&lt;(K, V)&gt;</code>.\nReturns the argument unchanged.\nCreates an <code>Ipv4Addr</code> from a four element byte array.\nReturns the argument unchanged.\nUses <code>Ipv4Addr::from_bits</code> to convert a host byte order <code>u32</code> …\nReturns the argument unchanged.\nCreates an <code>Ipv6Addr</code> from an eight element 16-bit array.\nCreates an <code>Ipv6Addr</code> from a sixteen element byte array.\nUses <code>Ipv6Addr::from_bits</code> to convert a host byte order <code>u128</code> …\nReturns the argument unchanged.\nConverts a native byte order <code>u32</code> into an IPv4 address.\nConverts a native byte order <code>u128</code> into an IPv6 address.\nCreates a new <code>Duration</code> from the specified number of days.\nCreates a new <code>Duration</code> from the specified number of hours.\nCreates a new <code>Duration</code> from the specified number of …\nCreates a new <code>Duration</code> from the specified number of …\nCreates a new <code>Duration</code> from the specified number of …\nCreates a new <code>Duration</code> from the specified number of …\nCreates an <code>Ipv4Addr</code> from a four element byte array.\nCreates an <code>Ipv6Addr</code> from a sixteen element byte array.\nCreates a new <code>Duration</code> from the specified number of whole …\nCreates a new <code>Duration</code> from the specified number of …\nCreates a new <code>Duration</code> from the specified number of …\nCreates an <code>Ipv6Addr</code> from an eight element 16-bit array.\nCreate an <code>OffsetDateTime</code> from the provided Unix timestamp. …\nConstruct an <code>OffsetDateTime</code> from the provided Unix …\nCreates a new <code>Duration</code> from the specified number of weeks.\nReturns a reference to the value corresponding to the key.\nReturns the key-value pair corresponding to the supplied …\nReturns a mutable reference to the value corresponding to …\nGet the clock hour in the stored offset.\nReturns a reference to the value corresponding to the …\nInserts a key-value pair into the map.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGets an owning iterator over the entries of the map, …\nCreates a consuming iterator visiting all the keys, in …\nCreates a consuming iterator visiting all the values, in …\nReturns <code>true</code> if this address part of the <code>198.18.0.0/15</code> …\nReturns <code>true</code> if this is an address reserved for …\nReturns <code>true</code> if this is a broadcast address (…\nReturns <code>true</code> if this address is in a range designated for …\nReturns <code>true</code> if this is an address reserved for …\nReturns <code>true</code> if the map contains no elements.\nReturns <code>true</code> if the address appears to be globally …\nReturns <code>true</code> if the address appears to be globally …\nReturns <code>true</code> if the address is an IPv4-mapped address (…\nReturns <code>true</code> if the address is link-local (<code>169.254.0.0/16</code>).\nReturns <code>true</code> if this is a loopback address (<code>127.0.0.0/8</code>).\nReturns <code>true</code> if this is the loopback address (<code>::1</code>), as …\nReturns <code>true</code> if this is a multicast address (<code>224.0.0.0/4</code>).\nReturns <code>true</code> if this is a multicast address (<code>ff00::/8</code>).\nReturns <code>true</code> if this is a private address.\nReturns <code>true</code> if this address is reserved by IANA for …\nReturns <code>true</code> if this address is part of the Shared Address …\nReturns <code>true</code> if this is a unicast address, as defined by …\nReturns <code>true</code> if the address is a globally routable unicast …\nReturns <code>true</code> if the address is a unicast address with …\nReturns <code>true</code> if this is a unique local address (<code>fc00::/7</code>).\nReturns <code>true</code> for the special ‘unspecified’ address (…\nReturns <code>true</code> for the special ‘unspecified’ address (<code>::</code>…\nReturns true if this <code>Duration</code> spans no time.\nGet the ISO week number of the date in the stored offset.\nGets an iterator over the entries of the map, sorted by …\nGets a mutable iterator over the entries of the map, …\nGets an iterator over the keys of the map, in sorted order.\nReturns the last entry in the map for in-place …\nReturns the last key-value pair in the map. The key in …\nReturns the number of elements in the map.\nReturns a <code>Cursor</code> pointing at the gap before the smallest …\nReturns a <code>CursorMut</code> pointing at the gap before the …\nGet the microseconds within the second in the stored …\nGet the milliseconds within the second in the stored …\nGet the minute within the hour in the stored offset.\nGet the week number where week 1 begins on the first …\nGet the month of the date in the stored offset.\nMultiplies <code>Duration</code> by <code>f32</code>.\nMultiplies <code>Duration</code> by <code>f64</code>.\nReturns the address’s multicast scope if the address is …\nMaximum filename length\nGet the nanoseconds within the second in the stored offset.\nMakes a new, empty <code>BTreeMap</code>.\nCreates a new IPv4 address from four eight-bit octets.\nCreates a new IPv6 address from eight 16-bit segments.\nCreates a new <code>Duration</code> from the specified number of whole …\nMakes a new empty BTreeMap with a reasonable choice for B.\nCreate a new <code>OffsetDateTime</code> with the given <code>Date</code>, <code>Time</code>, and …\nCreate a new <code>OffsetDateTime</code> with the given <code>Date</code> and <code>Time</code> …\nAttempt to create a new <code>OffsetDateTime</code> with the current …\nCreate a new <code>OffsetDateTime</code> with the current date and time …\nReturns the four eight-bit integers that make up this …\nReturns the sixteen eight-bit integers the IPv6 address …\nGet the <code>UtcOffset</code>.\nGet the day of the year of the date in the stored offset.\nParse an IPv4 address from a slice of bytes.\nParse an IPv6 address from a slice of bytes.\nRemoves and returns the first element in the map. The key …\nRemoves and returns the last element in the map. The key …\nConstructs a double-ended iterator over a sub-range of …\nConstructs a mutable double-ended iterator over a …\nRemoves a key from the map, returning the value at the key …\nRemoves a key from the map, returning the stored key and …\nReplace the date, which is assumed to be in the stored …\nReplace the date and time, which are assumed to be in the …\nReplace the day of the month.\nReplace the clock hour.\nReplace the microseconds within the second.\nReplace the milliseconds within the second.\nReplace the minutes within the hour.\nReplace the month of the year.\nReplace the nanoseconds within the second.\nReplace the offset. The date and time components remain …\nReplace the day of the year.\nReplace the seconds within the minute.\nReplace the time, which is assumed to be in the stored …\nReplace the year. The month and day will be unchanged.\nRetains only the elements specified by the predicate.\nComputes <code>self + duration</code>, saturating value on overflow.\nSaturating <code>Duration</code> addition. Computes <code>self + other</code>, …\nSaturating <code>Duration</code> multiplication. Computes <code>self * other</code>, …\nComputes <code>self - duration</code>, saturating value on overflow.\nSaturating <code>Duration</code> subtraction. Computes <code>self - other</code>, …\nGet the second within the minute in the stored offset.\nReturns the eight 16-bit segments that make up this …\nSplits the collection into two at the given key. Returns …\nPanics\nPanics\nPanics\nPanics\nPanics\nPanics\nPanics\nPanics\nReturns the fractional part of this <code>Duration</code>, in whole …\nReturns the fractional part of this <code>Duration</code>, in whole …\nReturns the fractional part of this <code>Duration</code>, in …\nGet the week number where week 1 begins on the first …\nGet the <code>Time</code> in the stored offset.\nConverts an IPv4 address into a <code>u32</code> representation using …\nConverts an IPv6 address into a <code>u128</code> representation using …\nGet the year, month, and day.\nConverts this address to an <code>IpAddr::V4</code> if it is an …\nGet the clock hour, minute, and second.\nGet the clock hour, minute, second, and microsecond.\nGet the clock hour, minute, second, and millisecond.\nGet the clock hour, minute, second, and nanosecond.\nConverts this address to an <code>IPv4</code> address if it is either …\nConverts this address to an <code>IPv4</code> address if it’s an …\nConverts this address to an IPv4-compatible <code>IPv6</code> address.\nConverts this address to an IPv4-mapped <code>IPv6</code> address.\nGet the ISO 8601 year, week number, and weekday.\nGet the Julian day for the date. The time is not taken …\nConvert the <code>OffsetDateTime</code> from the current <code>UtcOffset</code> to …\nGet the year and ordinal day number.\nTotal bytes in filesystem\nThe checked version of <code>from_secs_f32</code>.\nThe checked version of <code>from_secs_f64</code>.\nTries to insert a key-value pair into the map, and returns …\nGet the Unix timestamp.\nGet the Unix timestamp in nanoseconds.\nReturns a <code>Cursor</code> pointing at the gap after the greatest key\nReturns a <code>CursorMut</code> pointing at the gap after the greatest …\nGets an iterator over the values of the map, in order by …\nGets a mutable iterator over the values of the map, in …\nGet the weekday of the date in the stored offset.\nGet the year of the date in the stored offset.\nThe Platform trait declares all the functions for getting …\nReturns a battery life information object.\nReturns a map of block device statistics objects\nReturns the system boot time.\nReturns a delayed vector of CPU load statistics, one …\nReturns a delayed CPU load statistics object, average over …\nReturns the current CPU temperature in degrees Celsius.\nReturns a load average object.\nReturns a memory information object.\nReturns a swap and a memory information object. On some …\nReturns a filesystem mount information object for the …\nReturns a vector of filesystem mount information objects.\nReturns statistics for a given interface (bytes/packets …\nReturns a map of network intefrace information objects.\nReturns whether AC power is plugged in.\nReturns information about the number of sockets in use\nReturns a swap memory information object.\nReturns the system uptime.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.")