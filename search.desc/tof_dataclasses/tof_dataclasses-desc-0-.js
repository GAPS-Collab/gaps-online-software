searchState.loadedDescShard("tof_dataclasses", 0, "Tof dataclasses\nA type for the master trigger mappings Dsi -&gt; J -&gt; …\nA type for the mappings of RB channels - paddle edn ids …\nImplementations of analysis engine This is based on the …\nThe ReadoutBoardCalibration is the first stage in a 3 stage\nCommmands which can be issued to the various components of …\nPayloads for commands that configure an entity of the TOF …\nGlobal constants for TOF operations\nDatabase access &amp; entities of the TOF\nSpecific error types\nEvents\nHeartbeats - regularly (or on demand) sent software …\nDataio - readino/writing of different types\nImplementation of the IPBus protocoll for GAPS\nTof housekeeping/monitoring\nPackets are a way to send data over the network.\nSerialization/Deserialization helpers\nCompact data structures for analysis. Won’t get …\nDetector status indicators\nThread control structures FIXME - this should go to …\nAn approximation to calculate the energy deposition as …\nThe pedestal is the baseline of the waveform\nFind the onset time of a peak with a constant fraction …\nFind peaks in a given time window (in ns) by comparing the …\nZ-scores peak finding algorithm\nReturn the bin with the maximum ADC value\nCalculate the interaction time based on the peak timings …\nIntegrate a waveform\nCalculate the distance from the A side We will Always use …\nGiven a time in ns, find the bin most closely …\nCall to the calibration routine, using the set input data\nRemove events with invalid traces or event fragment bits …\nSimplified version of spike cleaning\nDiscard the data to reduce the memory footprint\nDesigned to match np.where(np.diff(np.signbit(trace)))[0] …\nReturns the argument unchanged.\nReturns the argument unchanged.\nRead an asci text file with calibration constants.\nGets the calibration from a file which has the …\nInfer the readoutboard id from the filename\nArguments:\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nApply the timing calibration to a single channel\nApply the spike cleaning to all channels\nVoltage calibration has to be applied\nApply the voltage calibration to a single channel FIXME - …\ncommand code for “Start Data taking”\ncommand code for “Stop Data taking”\nThe requested event is not ready yet. This means, it is …\nA unknown problem led to a non-execution of the command. …\ncommand code for “Get all waveforms”\nKill myself\ncommand code for putting liftof-cc in listening mode\nlock the cmd dispatcher\ncommand code for getting the monitoring data from the …\nDisable sending of RBWaveform packets\nDiesable sending of TofEventPacket\nen empty command just to check if stuff is online\ncommand code for “Run full calibration”\nDon’t decode any of the event data on the RB, just push …\nThe command got stuck somewhere and did not make it to the …\nresponse code for: A critical condition. This might need a …\nresponse code for: The severest error condition which can …\nresponse code for: Something did not work quite right, …\nresponse code for: If you see this, it is probably …\nThe command can’t be executed since currently data …\nThe command can’t be executed since currently data …\nresponse code for: Command can not be executed on the …\nresponse code for: The server has executed the command …\ncommand code for restarting systemd\nEnable sending of RBWaveform packets\nEnable sending of TOF packets\nSomehwere, a serialization error happened. It might be …\ncommand code for AnalysisEngineConfig\ncommand code for “Set LTB Thresholds”\ncommand code for “Configure MTB”\ncommand code for “Set preamp bias”\nEnable RB Channel Masks\ncommand code for setting the size of the rb buffers. …\nChange the settings of the event builder\ncommand code for putting liftof-cc in staging mode\ncommand code for “Start validation run”\nGeneral command class for ALL commands to the tof C&amp;C …\nA general command class with an arbitrary payload\nHow to operate the readout Default mode is to request …\nEach <code>TofCommand</code> triggers a <code>TofResponse</code> in reply\nunlock the cmd dispatcher\ncommand code for “Send the whole event cache over the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGenerate a TofCommand from a pair of code, value\nReturns the argument unchanged.\nReturns the argument unchanged.\nGenerate a TofCommand from the specific bytecode …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nTranslate a TofCommand into its specific byte …\nadjust the number of boards based on nrbes/mtb\nlike adaptive, but add usize to the expected number of …\nSame as adaptive, but check if the rb events follow the …\nAnalysis Engine Config Settings to change the …\nBuild Strategy\nSet ltb thresholds\nSet preamp voltages\nReadoutboard configuration for a specific run\nTOF Event Builder Settings Configuring the TOF event …\nEither “Physics” or a calibration related data type, …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nstart/stop run\nlimit run to number of events\nlimit run time to number of seconds\nThe value when the readout of the RB buffers is triggered. …\nan unique identifier for this run\ntof operation mode - either “StreamAny”, “…\nif different from 0, activate RB self trigger with fixed …\nif different from 0, activate RB self trigger in poisson …\nSpeed of light in the harting cables (divine number from …\nSpeed of light in the scintillator paddles (divine number …\nThe TimeStamp format for Human readable timestamps\nMasks for 32 bits commands (byte packets)\nNumber of Channels on the readoutboards\nNumber of entries for each waveform (voltage and timing …\nNumber of AVAILABLE channels per each LocalTriggerBoard\nNumber of AVAILABLE slots for LocalTriggerBoards\nPadding for 32 bits commands (byte packets)\nThe DB wrapper for the LocalTriggerBoard, for easy …\nA TOF Panel is a larger unit of paddles next to each other\nA Readoutboard with paddles connected\nA DSI card which is plugged into one of five slots on the …\nA single TOF paddle with 2 ends comnected\nRepresentation of a local trigger board.\nA Readoutboard with paddles connected\nA representation of a run\nUniversal function to connect to the database\nTrue if sane dsi and j values are assigned to this board\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet the j connetor for this specific RAT Raises ValueError …\nCreate a mapping of mtb link ids to rb ids\nCreate a mapping of rb id to mtb link ids\nReturns the ip address following a convention\nTrue if this RAT box is plugged in to any of the j …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLoad the newest calibration from the calibration file path\nTrue if all fields are filled with reasonable values and …\nGet the RAT where rb2id matched the argument\nIPBus provides a package format for sending UDP packets …\nError to be used for issues with the communication to the …\nIndicate issues with (de)serialization\nProblems in waveform analysis\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIf any of the RBEvents have Sync erros, we flag the tof …\nBoth of the bits (at least one for the cell sync errors) …\none of the channels cells CellSyncError bits has been set …\none of the channels ChannelSyncError bits has been set (RB)\nThe TofEvent timed out while waiting for more Readoutboards\nThe event status is good, but we did not perform any CRC32 …\nThe event is good, but we did not perform error checks\nThis can be used if there is a version missmatch and we …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nMasterTriggerEvent\nReadoutboard binary event formats, former denoted as BLOB …\nEvent strucutures for data reconrded byi the tof\nA generic data type\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\n-&gt; 1-10 “pysics” triggers\nSecond threshold, 32mV (? error in doc ?, about 2.5 minI\n200 -&gt; These triggers can not be set, they are merely the …\nAny paddle HIT in COR + any paddle HIT in CUB SIDES\nFirst threshold, 40mV, about 0.75 minI\nLTB Thresholds as passed on by the MTB See also\nmasks to decode LTB hit masks\nHold additional information about the status of the …\nAn event as observed by the MTB\n100 -&gt; Debug triggers\nAny paddle hit in UMB + any three paddles HIT in CUB\nAny paddle HIT in UMB + any paddle hit in COR + any paddle …\n-&gt; 20+ “Philip’s triggers” Any paddle HIT in UMB  + …\nAny paddle HIT in UMB + any paddle HIT in CUB top\nUse u8::MAX for Unknown, since 0 is pre-determined for “…\nImplementation version, might roughly correspond to fw …\nThird threshold, 375mV about 30 minI\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the trigger types which have to be defined as “…\nGet the RB link IDs according to the mask\nGet absolute timestamp as sent by the GPS\ncombine the tiu gps 16 and 32bit timestamps into a 48bit …\nGet the combination of triggered DSI/J/CH on the MTB which …\nGet the trigger sources from trigger source byte In case …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nInternal timestamp at the time of trigger (1 unit = 10 ns) …\nSecond received from the TIU (format?)\nTimestamp at the edge of the TIU GPS (1 unit = 10 ns)\nTrigger source:\nEvent data for each individual ReadoutBoard (RB)\nThe RBEvent header gets generated once per event per RB. …\nApply Jamie’s simple spike filter to the calibrated …\nStore the drs_deadtime instead of the fpga temperature\nDRS deadtime as read out from the register\nThe event ID as sent from the MTB or self-generated if not …\nGet the datatype from a bytestream when we know that it is …\nGet the event id from a RBEvent represented by bytestream …\nOnly get the eventid from a binary stream\nThe adc value for the temperature of the FPGA\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nJust return the channel mask and strip of the part which …\ndecode the len field in the in memroy represention of …\nDecode the channel mask into channel ids.\nGet the temperature value (Celsius) from the fpga_temp adc.\nGet the number of data channels + 1 for ch9\nDeconstruct the RBEvent to form RBWaveforms\nCheck if the channel 9 is present in the channel mask\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGet the channel mask from a bytestream.\nextract lock, drs busy and fpga temp from status field\nFIXME - this is form 0-8, but should it be from 1-9?\nReadoutboard ID - should be in the range 1-50 not …\nSet the channel mask with the 9bit number\nThe DRS stop cell. This is vital information which is …\nDRS4 stop cell\nGet the traces for a set of RBEvents\nRBEventMemoryView is the closest representation of actual …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe main event structure\nSmaller packet for in-flight telemetry stream\nEncode the sizes of the vectors holding the into an u32\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet all hits of all RBEvents in this event\nGet the RB link IDs according to the mask\nGet all waveforms of all RBEvents in this event\nGet the combination of triggered DSI/J/CH on the MTB which …\nGet the trigger sources from trigger source byte FIXME! …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSimple check if the event contains as much RBEvents as …\nA more advanced check, where events which are not in the …\nthe number of triggered paddles coming from the MTB …\nreconstructed primary beta\nreconstructed primary charge\nWaveform peak\nComprehensive paddle information\nThe Harting cable length to the RB will not get serialized …\nReturns the argument unchanged.\nReturns the argument unchanged.\nDeserialization\nGet the (official) paddle id\nCalculate the position across the paddle from the two …\nCalculate the interaction time based on the peak timings …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe ID of the paddle in TOF notation (1-160)\nThe paddle length will not get serialized and has to be …\nReconstructed particle interaction position across the …\nReconstructed particle interaction time\nSerialize the packet\nA very general and concise way to report RB activity\nprobe size for missing event id check\nlength of incoming buffer for the thread check for missing …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nlength of the incoming channel, which is basically packets …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nmission elapsed time in seconds\nbytes written to disk\nevent id check - chunksize\nevent id check - missing event ids\nnumber of packets written to disk\nRB identifier\nruntime of liftof-rb\nCalibration file for specific RB with id\nTypes of files\nheader bytes, e.g. 0xAAAA for TofPackets\nGenerics for packet reading (TofPacket, Telemetry packet,…\nEmit RBEvents from a stream of bytes from RBMemory\nRead RB binary (robin) files. These are also known as “…\nRead serialized TofPackets from an existing file\nWrite TofPackets to disk.\nInduce serialization to disk for a TofPacket\nCalculate the crc32 checksum for the channels everytime …\nError checking mode - check error bits for channels/cells\nTake in a stream by consuming it, that means moving This …\nCreate the event index, which is a map of event ids and …\nan index for the events in the stream this links eventid …\nlocation to store the file\nadd timestamps to filenames\nRead from this file\nRead only packets of type == PacketType\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nLoop over the whole file and create a mapping event_id -&gt; …\nA standardized name for calibration files saved by the …\nRetrive an RBEvent from a certain position\nGet RBEvents from the file in ascending order of event ID\nReturn the next tofpacket in the stream\nGet an index of the file - count number of packets\nA standardized name for regular run files saved by the …\nCreate date string in YYMMDD format\nGet a human readable timestamp\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhen in request mode, number of events the last event in …\nWhen in request mode, number of events the last event in …\nIgnore channels in this list\nThe maximum number of (Mega)bytes per file. After this a …\nInstantiate a new PacketWriter\nThe maximum number of packets for a single file. Ater this …\nRead an entire file into memory\nRewind the file, so it can be read again from the beginning\nRewind the underlying file back to the beginning\nHeaders are expected to be a 2byte signature, e.g. 0xaaaa.\nManage the internal cursor attribute\nSkip the first n packets\nStop reading after n packets\nRaw stream read out from the RB buffers.\nAn optional crossbeam::channel Sender, which will allow to …\nImplementation of an IPBus control packet\nThe IPBus standard encodes several packet types.\nFor reading multiple words, this will read the same …\nSleeptime between consequtive UDP queries in microsec\nThis is not following IPBus packet specs\nConnect to MTB Utp socket\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nSend a ipbus status packet and receive the response\nGet the packet id which is expected by the target\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIPBus Packet ID - this is then NEXT pid which will be sent\nRead a single value from a register\nMultiple read operations with a single UDP request\nSet the packet id to that what is expected from the targetr\nReceive number_of_bytes from UdpSocket and sleep after to …\nReconnect to the same address after timeout\nReceive number_of_bytes from UdpSocket and sleep after to …\nWrite a single value to a register\nSensors on the LTB\nMonitoring data shall share the same kind of interface.\nMonitoring the MTB\nPreamp temperature and bias data\nSensors on the power boards (PB)\nSensors on the individual RB\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nAccess the (data) members by name\nAccess the (data) members by name\nAccess the (data) members by name\nMonitoring data is always tied to a specific board. This …\nConvert ADC temp from adc values to Celsius\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nA list of the variables in this MoniData\nA list of the variables in this MoniData\nA list of the variables in this MoniData\nPrescale factor in per cent (might not be accurate)\ntiu_status[0] = emu_mode tiu_status[1] = use_aux_link …\nThe most basic of all packets\ncreation_time for the instance\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nmark a packet as not eligible to be sent over network …\nmark a packet as not eligible to be written to disk\nUnpack the TofPacket and return its content\nGenerate a bytestream of self for ZMQ, prefixed with BRCT …\nGenerate a bytestream of self for ZMQ, prefixed with RBX, …\na MultiPacket consists of other TofPackets\nTypes of serializable data structures used throughout the …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCan be wrapped within a TofPacket. To do, we just have to …\nThe SIZE is the size of the serialized bytestream …\nEncode/decode structs to <code>Vec::&lt;u8&gt;</code> to write to a file or …\nDecode a serializable from a bytestream\nDecode a serializable directly from a TofPacket\nWrap myself in a TofPacket\nGet u32 from a bytestream and move on the position marker\nBIG Endian version of parse_u32. NOT for botched event id …\nGet an u32 from a bytestream\nGet an 48bit number from a bytestream\nSearch for a certain number of type <code>u16</code> in a bytestream\nEncode a serializable to a bytestream\nConstruct byte slice out of self.\nConvert a vector of u16 into a vector of u8\nRestore a vector of u16 from a vector of u8\nRestore a vector of u16 from a vector of u8\nRestore a vector of u16 from a vector of u8, using the …\nVerify that the serialized representation of the struct …\nA MoniSeries is a collection of (primarily) monitoring …\nAdd another instance of the data container to the series\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nA list of boards in this series\nA HashMap of -&gt; rbid, Vec&lt;var&gt;\nGet a certain variable, but only for a single board\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nA list of the variables in this MoniSeries\nReport dead channels/non-active detectors for the TOF …\nReturns the argument unchanged.\nIndex of inactive channels in the range of 0-319. These …\nIndex of inactive channels in the range of 0-319. These …\nCalls <code>U::from(self)</code>.\nSend runtime information to threads via shared memory …\nTrigger calibration thread\nKeep track on how many calibration packets we have received\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe number of boards available\nThe current run id\nStop ALL threads\nalive indicator for cmd dispatch thread\nalive indicator for data sink thread\nalive indicator for event builder thread\nalive indicator for master trigger thread\nalive indicator for monitoring thread\nRunning readoutboard communicator threads - the key is …\nalive indicator for runner thread\nWrite data to disk\nUse the fisrt 3 bits (most significant) in the event …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.")