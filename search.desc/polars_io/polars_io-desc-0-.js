searchState.loadedDescShard("polars_io", 0, "Options for Hive partitioning.\nInterface with cloud storage through the object_store …\n(De)serializing CSV files\nTake the SerReader and return a parsed DataFrame.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCheck if the path is a cloud url.\nCreate a new instance of the <code>[SerReader]</code>\nMake sure that all columns are contiguous in memory by …\nOptions to connect to various cloud providers.\nReturns the argument unchanged.\nReturns the argument unchanged.\nParse a configuration from a Hashmap. This is the …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMultiple values that are used for all columns\nA single value that’s used for all columns\nThis puts quotes around every field. Always.\nCreate a new DataFrame by reading a csv file.\nWrite a DataFrame to csv.\nUtf8 encoding and unknown bytes are replaced with �\nA string that indicates the start of a comment line. This …\nTuples that map column names to null value of that column\nThis puts quotes around fields only when necessary.\nNever quote any fields, even if it would produce invalid …\nThis puts quotes around all fields that are non-numeric. …\nOptions to serialize logical types to CSV.\nA single byte character that indicates the start of a …\nUtf8 encoding\nSets the comment prefix from <code>CsvParserOptions</code> for internal …\nRead the number of rows without parsing columns useful for …\nUsed for <code>DataType::Date</code>.\nUsed for <code>DataType::Datetime</code>.\nRead the file and create the DataFrame.\nWrites the header of the csv file if not done already. …\nUsed for <code>DataType::Float64</code> and <code>DataType::Float32</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThis is the recommended way to create a csv reader as this …\nSet whether the CSV file has headers\nSet whether to write UTF-8 BOM.\nSet whether to write headers.\nSet the CSV reader to infer the schema of the file\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nString appended after every row.\nReduce memory consumption at the expense of performance\nCreate a new CsvReader from a file/ stream\nCreates a new <code>CommentPrefix</code>. If <code>Multi</code> variant is used and …\nCreates a new <code>CommentPrefix</code> for the <code>Single</code> variant.\nNull value representation.\nQuoting character.\nRaise an error if CSV is empty (otherwise return an empty …\nSets the size of the sample taken from the CSV file. The …\nUsed as separator.\nUsed for <code>DataType::Time</code>.\nTruncate lines that are longer than the schema.\nSet the batch size to use while writing the CSV.\nSets the chunk size used by the parser. This influences …\nColumns to select/ project\nSet the comment prefix for this instance. Lines starting …\nSet the CSV file’s date format.\nSet the CSV file’s datetime format.\nOverwrite the schema with the dtypes in this given Schema. …\nOverwrite the dtypes in the schema in the order of the …\nSet  <code>CsvEncoding</code>\nSet the CSV file’s float precision.\nContinue with next batch when a ParserError is encountered.\nSet the CSV file’s line terminator.\nTreat missing fields as null.\nTry to stop parsing when <code>n</code> rows are parsed. During …\nSet the number of threads used in CSV reading. The default …\nSet the CSV file’s null value representation.\nSet values that will be interpreted as missing/ null. Note …\nThe preferred way to initialize this builder. This allows …\nSet the reader’s column projection. This counts from 0, …\nSet the <code>char</code> used as quote char. The default is <code>b&#39;&quot;&#39;</code>. If …\nSet the single byte character used for quoting.\nSet the CSV file’s quoting behavior. See more on …\nRechunk the DataFrame to contiguous memory after the CSV …\nAdd a row index column.\nSet the CSV file’s schema. This only accepts datatypes …\nSet the CSV file’s column separator as a byte character\nSet the CSV file’s column separator as a byte character.\nSkip the first <code>n</code> rows during parsing. The header will be …\nSkip these rows after the header\nSet the CSV file’s time format.\nAutomatically try to parse dates/ datetimes and time. If …\nWrite a batch to the csv writer.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nInfer the schema of a CSV file by reading through the …\ncheck if csv file is compressed\nTrait used to get a hold to file handler or to the …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nA collection of column stats with a known schema.\nStatistics of the values in a column.\nCan take &amp;dyn Statistics and determine of a file should be …\nReturns the <code>ColumnStats</code> of all columns in the batch, if …\nReturns the <code>DataType</code> of the column.\nTake a <code>DataFrame</code> and produces a boolean <code>Series</code> that serves …\nReturns the argument unchanged.\nReturns the argument unchanged.\nConstructs a new <code>ColumnStats</code> from a single-value Series.\nConstructs a new <code>ColumnStats</code> with only the <code>Field</code> …\nReturns the maximum value of each row group of the column.\nReturns the minimum value of each row group of the column.\nReturns the null count of each row group of the column.\nReturns the <code>ColumnStats</code> of a single column in the batch.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConstructs a new <code>ColumnStats</code>.\nConstructs a new <code>BatchStats</code>.\nReturns the null count of the column.\nReturns the number of rows in the batch.\nReturns the <code>Schema</code> of the batch.\nReturns the maximum value of the column as a single-value …\nReturns the minimum value of the column as a single-value …\nReturns the minimum and maximum values of the column as a …\nChecks if the projected columns are equal\nChecks if the projected columns are equal\nCompute <code>remaining_rows_to_read</code> to be taken per file up …")