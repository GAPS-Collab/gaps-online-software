searchState.loadedDescShard("zmq", 0, "Module: zmq\nThe input string slice’s length was not a multiple of 5.\nHandle for a 0MQ context, used to create sockets.\nA CURVE key pair generated by 0MQ.\nFlag for socket <code>send</code> methods that specifies non-blocking …\nErrors that can occur while decoding Z85.\nErrors that can occur while encoding Z85.\nContains the error value\nAn error returned by a 0MQ API function.\nSecurity Mechanism\nHolds a 0MQ message.\nThe input string slice had embedded NUL bytes.\nContains the success value\nFor <code>poll()</code>, specifies to signal when an error condition is …\nFor <code>poll()</code>, specifies to signal when an error condition is …\nFor <code>poll()</code>, specifies to signal when a message/some data …\nFor <code>poll()</code>, specifies to signal when a message/some data …\nFor <code>poll()</code>, specifies to signal when a message/some data …\nFor <code>poll()</code>, specifies to signal when a message/some data …\nType representing pending socket events.\nRepresents a handle that can be <code>poll()</code>ed.\n<code>zmq</code>-specific Result type.\nFlag for socket <code>send</code> methods that specifies that more …\nSendable over a <code>Socket</code>.\nA socket, the central object in 0MQ.\nSocket Events\nSocket types\nReturns the set containing all flags.\nReturn the inner pointer to this Socket.\nCreate a <code>PollItem</code> from the socket.\nReturn the message content as a string slice if it is …\nAccept connections on a socket.\nReturns the intersection between the two sets of flags.\nDisables all flags disabled in the set.\nReturns the union of the two sets of flags.\nAdds the set of flags.\nReturns the raw value of the flags currently stored.\nReturns the left flags, but with all the right flags …\nToggles the set of flags.\nReturns the complement of this set of flags.\nConnect a socket.\nReturns <code>true</code> if all of the flags in <code>other</code> are contained …\nTry to destroy the context. This is different than the …\nReturns the difference between the flags in <code>self</code> and <code>other</code>.\nDisconnect a previously connected socket\nReturns an empty set of flags.\nConstruct a message from a byte vector without copying the …\nConstruct a message from a boxed slice without copying the …\nReturns the argument unchanged.\nConstruct a message from a string slice by copying the …\nConstruct a message from a string slice by copying the …\nConstruct a message from a byte slice by copying the data.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from underlying bit representation, unless that …\nConvert from underlying bit representation, dropping any …\nConvert from underlying bit representation, preserving all …\nConstruct a PollItem from a non-0MQ socket, given by its …\nCreate a Socket from a raw socket pointer.\nCreate a <code>Message</code> from a <code>&amp;[u8]</code>. This will copy <code>data</code> into …\nSet the <code>ZMQ_CURVE_PUBLICKEY</code> option value.\nGet the <code>ZMQ_CURVE_SECRETKEY</code> option value.\nGet <code>ZMQ_CURVE_SERVERKEY</code> option value.\nGet the currently pending events.\nGet the event notification file descriptor.\nGet the size of the ØMQ thread pool to handle I/O …\nReturn the address of the last endpoint this socket was …\nReturn the <code>ZMQ_MORE</code> flag, which indicates if more parts of …\nReturn true if there are more frames of a multipart …\nRetrieve the events that occurred for this handle.\nReturn the type of this socket.\nQuery a message metadata property.\nReturn true if the used 0MQ library has the given …\nReturns true if the polled socket is the given file …\nReturns true if the polled socket is the given 0MQ socket.\nInserts the specified flags in-place.\nReturns the intersection between the flags in <code>self</code> and …\nReturns <code>true</code> if there are flags common to both <code>self</code> and …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConsume the Socket and return the raw socket pointer.\nReturns <code>true</code> if all flags are currently set.\nAccessor for the <code>ZMQ_CONFLATE</code> option.\nReturns <code>true</code> if no flags are currently stored.\nReturns true if the polled socket encountered an error …\nAccessor for the <code>ZMQ_IMMEDIATE</code> option.\nAccessor for the <code>ZMQ_IPV6</code> option.\nAccessor for the <code>ZMQ_PLAIN_SERVER</code> option.\nReturns true if the polled socket has messages ready to …\nReturns true if the polled socket can accept messages to …\nReturns the error message provided by 0MQ.\nConfigure the socket for monitoring\nCreate an empty <code>Message</code>.\nCreate a new reference-counted context handle.\nCreate a new key pair.\nReturns the complement of this set of flags.\nPoll for events on multiple sockets.\nDo a call to <code>zmq_poll</code> with only this socket.\nStart a 0MQ proxy in the current thread.\nStart a 0MQ proxy in the current thread, with a control …\nStart a 0MQ proxy in the current thread, with capture and …\nStart a 0MQ proxy in the current thread, with a capture …\nReceive a message into a <code>Message</code>. The length passed to …\nReceive a message as a byte vector.\nReceive bytes into a slice. The length passed to <code>zmq_recv</code> …\nReceive a message into a fresh <code>Message</code>.\nReceive a multipart message from the socket.\nReceive a <code>String</code> from the socket.\nRemoves the specified flags in-place.\nSend a message.\nSend a <code>Message</code> message.\nInserts or removes the specified flags depending on the …\nAccessor for the <code>ZMQ_CONFLATE</code> option.\nChange the events to wait for.\nAccessor for the <code>ZMQ_IMMEDIATE</code> option.\nSet the size of the ØMQ thread pool to handle I/O …\nAccessor for the <code>ZMQ_IPV6</code> option.\nAccessor for the <code>ZMQ_PLAIN_SERVER</code> option.\nCreate a new socket.\nReturns the set difference of the two sets of flags.\nDisables all flags enabled in the set.\nReturns the symmetric difference between the flags in <code>self</code> …\nToggles the specified flags in-place.\nStop accepting connections on a socket\nReturns the union of between the flags in <code>self</code> and <code>other</code>.\nReturn the current zeromq version, as <code>(major, minor, patch)</code>…\nCreate a <code>Message</code> with space for <code>len</code> bytes that are …\nCreate a <code>Message</code> preallocated with <code>len</code> uninitialized bytes.\nCreate a <code>Message</code> with space for <code>len</code> bytes that are …\nDecode a binary key from Z85-encoded text.\nEncode a binary key as Z85 printable text.")