searchState.loadedDescShard("rusttype", 0, "RustType is a pure Rust alternative to libraries like …\nA single font. This may or may not own the font data.\nA single glyph of a font.\nThe “horizontal metrics” of a glyph. This is useful …\nA trait for types that can be converted into a <code>GlyphId</code>, in …\nA trait for glyph outline construction.\nA point in 2-dimensional space, with each dimension of …\nA glyph augmented with positioning and scaling …\nA rectangle, with top-left corner at <code>min</code>, and bottom-right …\nDefines the size of a rendered face of a font, in pixels, …\nA glyph augmented with scaling information. You can query …\nThe “vertical metrics” of a font at a particular …\nA vector in 2-dimensional space, with each dimension of …\nThe horizontal offset that the origin of the next glyph …\nThe highest point that any glyph in the font extends to …\nBuilds the outline of the glyph with the builder …\nBuilds the outline of the glyph with the builder …\nAppends a ClosePath segment.\nAppends a CurveTo segment.\nThe lowest point that any glyph in the font extends to …\nRasterises this glyph. For each pixel in the rect given by …\nThe bounding box of the shape of this glyph, not to be …\nThe font to which this glyph belongs.\nThe font to which this glyph belongs.\nThe font to which this glyph belongs.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the corresponding glyph for a Unicode code point …\nThe number of glyphs present in this font. Glyph …\nA convenience function.\nRetrieves the “horizontal metrics” of this glyph. See …\nThe glyph identifier for this glyph.\nThe glyph identifier for this glyph.\nThe glyph identifier for this glyph.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert <code>self</code> into a <code>GlyphId</code>, consulting the index map of …\nRemoves the positioning from this glyph\nA reference to this glyph without the scaling\nA convenience function for laying out glyphs for a string …\nThe horizontal offset between the origin of this glyph and …\nThe gap to leave between the descent of one line and the …\nAppends a LineTo segment.\nAppends a MoveTo segment.\nReturns additional kerning to apply as well as that given …\nThe conservative pixel-boundary bounding box for this …\nA convenience function for generating <code>Point</code>s.\nAugments this glyph with positioning information, making …\nAppends a QuadTo segment.\nComputes a scale factor to produce a font whose “height…\nAugments this glyph with scaling information, making …\nResets positioning information and recalculates the pixel …\nCreates a Font from byte-slice data.\nCreates a Font from byte-slice data &amp; a font collection …\nCreates a Font from owned font data.\nCreates a Font from owned font data &amp; a font collection …\nUniform scaling, equivalent to <code>Scale { x: s, y: s }</code>.\nReturns the units per EM square of this font\nA reference to this glyph without positioning\nRemoves the scaling from this glyph\nThe “vertical metrics” for this font at a given scale. …\nGet the unscaled VMetrics for this font, shared by all …\nA convenience function for generating <code>Vector</code>s.\nHorizontal scale, in pixels.\nVertical scale, in pixels.")