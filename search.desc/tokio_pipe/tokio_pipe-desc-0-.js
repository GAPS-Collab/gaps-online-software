searchState.loadedDescShard("tokio_pipe", 0, "Asynchronous pipe(2) library using tokio.\nA buffer that can be written atomically\n<code>IoSlice</code>s that can be written atomically\nPipe read\nPipe write\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\n<code>fd</code> - PipeRead would take the ownership of this fd.\n<code>fd</code> - PipeWrite would take the ownership of this fd.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIf buffer is more than PIPE_BUF, then return None.\nIf total length is more than PIPE_BUF, then return None.\nOpen pipe\nWrite buf atomically to the pipe, using guarantees …\nMoves data between pipes without copying between kernel …\nMoves data between fd and pipe without copying between …\nMoves data between pipe and fd without copying between …\nDuplicates up to len bytes of data from pipe_in to …")