searchState.loadedDescShard("polars_parquet", 0, "APIs to read from Parquet format.\nAPIs to write to Parquet format.\nType def for a sharable, boxed dyn <code>Iterator</code> of arrays\nThe error type of iteration.\nA fallible, streaming iterator.\nAn iterator of <code>RecordBatch</code>s coming from row groups of a …\nThe initial info of nested data types. The <code>bool</code> indicates …\nThe type being iterated over.\nList data types\nType def for a sharable, boxed dyn <code>Iterator</code> of …\nThe state of nested data types.\nTrait describing a <code>FallibleStreamingIterator</code> of <code>Page</code>\nPrimitive data types\nAn <code>Iterator</code> of <code>RecordBatch</code> that (dynamically) adapts a …\nAn [<code>Iterator&lt;Item=RowGroupDeserializer&gt;</code>] from row groups …\nStruct data types\nAn iterator adapter over <code>NestedArrayIter</code> assumed to be …\nAdvances the iterator to the next position.\nDetermines if all elements of the iterator satisfy a …\nDetermines if any elements of the iterator satisfy a …\nBorrows an iterator, rather than consuming it.\nAn iterator adapter that maps multiple iterators of …\nReturns the number of remaining elements in the iterator.\nCreates a new <code>ListArray</code> or <code>FixedSizeListArray</code>.\nCreates a new <code>MapArray</code>.\nReturns an iterator which filters elements by a predicate.\nReturns the first element of the iterator which satisfies …\nCalls a closure on each element of an iterator.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns an iterator which is well-behaved at the beginning …\nReturns the current element.\nReturns all <code>ColumnChunkMetaData</code> associated to <code>field_name</code>. …\nReturns all <code>ColumnChunkMetaData</code> associated to <code>field_name</code>. …\nCreates a new iterator of compressed pages.\nAPI to perform page-level filtering (also known as indexes)\nInitialize <code>NestedState</code> from <code>&amp;[InitNested]</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe number of rows in this state\nReturns an iterator which applies a transform to elements.\nReturns an iterator that applies a transform to errors.\nReturns an iterator which applies a transform to elements.\nReturns the number of (parquet) columns that a …\nThe nesteds composing <code>NestedState</code>.\nCreates a new <code>StructIterator</code> with <code>iters</code> and <code>fields</code>.\nReturns a new <code>FileReader</code>.\nReturns a new <code>RowGroupReader</code>\nCreates a new <code>RowGroupDeserializer</code>.\nCreates a new <code>NestedState</code>.\nAdvances the iterator, returning the next element.\nReturns the <code>nth</code> element of the iterator.\nReturns the number of rows on this row group\nReturns the position of the first element matching a …\nReads all columns that are part of the parquet field …\nReturns a vector of iterators of <code>Array</code> (<code>ArrayIter</code>) …\nReads parquets’ metadata synchronously.\nAPIs to handle Parquet &lt;-&gt; Arrow schemas.\nReturns the <code>ArrowSchema</code> associated to this file.\nReturns bounds on the number of remaining elements in the …\nReturns an iterator which skips the first <code>n</code> elements.\nReturns an iterator which skips the first sequence of …\nAPIs exposing <code>crate::parquet</code>’s statistics as arrow’s …\nReturns an iterator which only returns the first <code>n</code> …\nReturns an iterator which only returns the first sequence …\nConverts a vector of columns associated with the parquet …\n<code>ColumnPageStatistics</code> contains the minimum, maximum, and …\nPage statistics of an Arrow field.\nVariant used for fields with multiple parquet columns …\nVariant used for fields with a single parquet column (e.g. …\nReturns the set of (row) intervals of the pages.\nReturns the argument unchanged.\nReturns the argument unchanged.\nChecks whether the row group have page index information …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe maximum values in the pages\nThe minimum values in the pages\nThe number of null values in the pages.\nReads the column indexes from the reader assuming a valid …\nReads all page locations and index locations (IO-bounded) …\nWrapper struct to store key values\nOptions when inferring schemas from Parquet\nReturns the argument unchanged.\nInfers a <code>ArrowSchema</code> from parquet’s <code>FileMetaData</code>. This …\nLike <code>infer_schema</code> but with configurable options which …\nWhen inferring schemas from the Parquet INT96 timestamp …\nCalls <code>U::from(self)</code>.\nConverts <code>ParquetType</code>s to a <code>Field</code>, ignoring parquet fields …\nLike <code>parquet_to_arrow_schema</code> but with configurable options …\nReads an arrow schema from Parquet’s file metadata. …\nArrow-deserialized parquet Statistics of a file\nDeserializes the statistics in the column chunks from a …\nnumber of dictinct values. This is a <code>UInt64Array</code> for …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nMaximum\nMinimum\nnumber of nulls. This is a <code>UInt64Array</code> for non-nested types\nThe error type of iteration.\nA fallible, streaming iterator.\nAn interface to write a parquet to a <code>Write</code>\nWidth\nThe type being iterated over.\nWrapper struct to store key values\na list\na list\nDescriptor of nested information of a field\na primitive (leaf or parquet column)\nAn iterator adapter that converts an iterator over …\na struct\nDescription for file metadata\nCurrently supported options to write to parquet\nAdvances the iterator to the next position.\nDetermines if all elements of the iterator satisfy a …\nDetermines if any elements of the iterator satisfy a …\nReturns a vector of iterators of <code>Page</code>, one per leaf column …\nConverts an <code>Array</code> to a <code>CompressedPage</code> based on options, …\nConverts an <code>Array</code> to a <code>CompressedPage</code> based on options, …\nReturns an iterator of <code>Page</code>.\nBorrows an iterator, rather than consuming it.\nSort order used for the min_value and max_value fields in …\nThe compression to apply to every page\nReturns the number of remaining elements in the iterator.\nString for application that wrote this file.  This should …\nThe size to flush a page, defaults to 1024 * 1024 if None\nEncryption algorithm. This field is set only in encrypted …\nWrites the footer of the parquet file. Returns the total …\nReturns an iterator which filters elements by a predicate.\nReturns the first element of the iterator which satisfies …\nRetrieval metadata of key used for signing the footer. …\nCalls a closure on each element of an iterator.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns an iterator which is well-behaved at the beginning …\nReturns the current element.\nGet the length of <code>Array</code> that should be sliced.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConsumes this writer and returns the inner writer\nReturns the underlying writer and <code>ThriftFileMetaData</code>\nOptional key/value metadata *\nReturns the length (number of rows) of the element\nReturns an iterator which applies a transform to elements.\nReturns an iterator that applies a transform to errors.\nReturns an iterator which applies a transform to elements.\nAdvances the iterator, returning the next element.\nReturns the <code>nth</code> element of the iterator.\nNumber of rows in this file *\nreturn number values of the nested\nThe options assigned to the file\nThe <code>SchemaDescriptor</code> assigned to this file\nReturns the <code>SchemaDescriptor</code> of the <code>RowGroupIterator</code>.\nReturns the position of the first element matching a …\nMaps a <code>RecordBatch</code> and parquet-specific options to an …\nRow groups in this file *\nThe <code>ArrowSchema</code> assigned to this file\nParquet schema for this file.  This schema contains …\nReturns bounds on the number of remaining elements in the …\nReturns an iterator which skips the first <code>n</code> elements.\nReturns an iterator which skips the first sequence of …\nreturns offset and length to slice the leaf values\nSlices the <code>Array</code> to <code>Box&lt;dyn Array&gt;</code> and <code>Vec&lt;Nested&gt;</code>.\nReturns an iterator which only returns the first <code>n</code> …\nReturns an iterator which only returns the first sequence …\nConvert <code>Array</code> to <code>Vec&lt;&amp;dyn Array&gt;</code> leaves in DFS order.\nConstructs the necessary <code>Vec&lt;Vec&lt;Nested&gt;&gt;</code> to write the rep …\nConvert <code>ParquetType</code> to <code>Vec&lt;ParquetPrimitiveType&gt;</code> leaves in …\nCreates a parquet <code>SchemaDescriptor</code> from a <code>ArrowSchema</code>.\nCreates a <code>ParquetType</code> from a <code>Field</code>.\nTransverses the <code>data_type</code> up to its (parquet) columns and …\nReturns a new <code>FileWriter</code>.\nCreates a new <code>RowGroupIterator</code> from an iterator over …\nVersion of this file *\nThe page and file version to use\nWrites a row group to the file.\nwrites the def levels to a <code>Vec&lt;u8&gt;</code> and returns it.\nWrite <code>repetition_levels</code> and <code>definition_levels</code> to buffer.\nWhether to write statistics\nThe error type of iteration.\nA fallible, streaming iterator.\nThe type being iterated over.\nAdvances the iterator to the next position.\nDetermines if all elements of the iterator satisfy a …\nDetermines if any elements of the iterator satisfy a …\nBorrows an iterator, rather than consuming it.\nFunctionality to compress and decompress data according to …\nReturns the number of remaining elements in the iterator.\nContains <code>Error</code>\nReturns an iterator which filters elements by a predicate.\nReturns the first element of the iterator which satisfies …\nCalls a closure on each element of an iterator.\nReturns an iterator which is well-behaved at the beginning …\nReturns the current element.\nReturns an iterator which applies a transform to elements.\nReturns an iterator that applies a transform to errors.\nReturns an iterator which applies a transform to elements.\nAdvances the iterator, returning the next element.\nReturns the <code>nth</code> element of the iterator.\nReturns the position of the first element matching a …\nReturns bounds on the number of remaining elements in the …\nReturns an iterator which skips the first <code>n</code> elements.\nReturns an iterator which skips the first sequence of …\nReturns an iterator which only returns the first <code>n</code> …\nReturns an iterator which only returns the first sequence …\nRepresents a valid brotli compression level.\nDefines the compression settings for writing a parquet …\nRepresents a valid gzip compression level.\nRepresents a valid zstd compression level.\nCompresses data stored in slice <code>input_buf</code> and writes the …\nReturns the compression level.\nReturns the compression level.\nReturns the compression level.\nDecompresses data stored in slice <code>input_buf</code> and writes …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAttempts to create a brotli compression level.\nAttempts to create a gzip compression level.\nAttempts to create a zstd compression level from a given …\na bitmap (values, offset, length, skipped_set)\na bitmap\nWhen the maximum definition level is 1, the definition …\nTypedef of an iterator over PLAIN page values\nDecoder of definition levels.\nAn <code>Iterator</code> adapter over <code>HybridEncoded</code> that yields …\nThe decoding state of the hybrid-RLE decoder with a …\nType definition of a <code>FilteredHybridBitmapIter</code> of …\nType definition for a <code>HybridRleIter</code> using …\nThe decoding state of the hybrid-RLE decoder with a …\nAn iterator adapter that maps an iterator of <code>HybridEncoded</code> …\nType definition for a <code>HybridRleBooleanIter</code> using …\nAn iterator of <code>HybridEncoded</code>, adapter over …\nWhen the maximum definition level is larger than 1\nThe deserialization state of a <code>DataPage</code> of <code>Primitive</code> …\nA page of optional values\nA page of optional, dictionary-encoded values\nIterator adapter to convert an iterator of non-null values …\nA repeated item. The first attribute corresponds to …\nA page of required values\nA page of required, dictionary-encoded values\nWhen the run was skipped - contains the number of set …\nAn iterator adapter that converts an iterator over items …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the length of the run in number of items\nReturns the number of elements remaining. Note that each …\nReturns the length of the run in number of items\nthe number of elements in the iterator. Note that this <em>is </em>…\nViews the values of the data page as <code>Casted</code> to <code>NativeType</code>.\nReturns a new <code>HybridRleIter</code>\nReturn a new <code>SliceFilteredIter</code>\nNumber of elements remaining. This may not be the items of …\nTries to create <code>NativePageState</code>\nBit packed encoding.  This can only be used if the data …\nEncoding for floating-point data. K byte-streams are …\nDelta encoding for integers. This can be used for int …\nIncremental-encoded byte array. Prefix lengths are encoded …\nEncoding for byte arrays to separate the length values and …\nDefault encoding. BOOLEAN - 1 bit per value. 0 is false; 1 …\nDeprecated: Dictionary encoding. The values in the …\nGroup packed run length encoding. Usable for …\nDictionary encoding: the ids are encoded using the RLE …\nReturns the ceil of value / 8\nReturns the argument unchanged.\nPanics\nCalls <code>U::from(self)</code>.\nAn <code>Iterator</code> of <code>Unpackable</code> unpacked from a bitpacked slice …\nA byte slice (e.g. <code>[u8; 8]</code>) denoting types that represent …\nA type representing a type that can be bitpacked and …\nA byte slice of <code>Unpackable</code> denoting complete unpacked …\nEncodes (packs) a slice of <code>Unpackable</code> into bitpacked bytes …\nEncodes (packs) a potentially incomplete pack of <code>Unpackable</code>…\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns a <code>Decoder</code> with <code>T</code> encoded in <code>packed</code> with <code>num_bits</code>.\nDecoder of parquets’ <code>DELTA_BINARY_PACKED</code>. Implements …\nReturns the total number of bytes consumed up to this …\nEncodes an iterator of <code>i64</code> according to parquet’s …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nDecodes according to Delta strings, prefixes, lengths and …\nEncodes an iterator of according to DELTA_BYTE_ARRAY\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nDecodes Delta-length byte array lengths and values.\nEncodes a clonable iterator of <code>&amp;[u8]</code> into <code>buffer</code>. This …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nConsumes this decoder and returns the slice of …\nReturns the slice of concatenated values.\nAn <code>Iterator</code> of bool that decodes a bitmap. This is a …\nA bitpacked slice. The consumer must know its bit-width to …\nAn <code>Iterator</code> of <code>HybridEncoded</code>.\nThe two possible states of an RLE-encoded run.\n<code>Iterator</code> of <code>u32</code> from a byte slice of Hybrid-RLE encoded …\nA RLE-encoded slice. The first attribute corresponds to …\nWrites an iterator of bools into writer, with LSB first.\nthe bitpacked part of the encoder.\nRLE-hybrid encoding of <code>u32</code>. This currently only yields …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns a new <code>BitmapIter</code>.\nReturns a new <code>Decoder</code>\nReturns the number of bits being used by this decoder.\nReturns a new <code>HybridRleDecoder</code>\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nEncodes <code>value</code> in ULEB128 into <code>container</code>. The exact number …\nBrotli compression and decompression\nContains the error value\nErrors generated by this crate\nList of features whose non-activation may cause a runtime …\nError presented when trying to use a code branch that …\nError presented when trying to use a feature from parquet …\nGzip compression and decompression\nWhen encoding, the user passed an invalid parameter\nLz4 raw compression and decompression\nContains the success value\nWhen the parquet file is known to be out of spec.\nA specialized <code>Result</code> for Parquet errors.\nSnappy compression and decompression\nWhen decoding or decompressing, the page would allocate …\nZstd compression and decompression\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAn index of a column of boolean physical type\nEnum to annotate whether lists of min/max elements inside …\nAn index of a column of bytes physical type\nAn enum describing a page that was either selected in a …\nAn index of a column of fixed len byte physical type\nTrait object representing a <code>ColumnIndex</code> in Rust’s native …\nAn interval\nAn index of a column of <code>NativeType</code> physical representation\nThe index of a page, containing the min and max values of …\nthe order\nSize of the page, including header. Sum of …\nReturns the set of intervals <code>(start, len)</code> containing all …\nIndex within the RowGroup of the first row of the page; …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe indexes, one item per page\nThe indexes, one item per page\nThe indexes, one item per page\nThe indexes, one item per page\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIts length\nThe maximum value in the page. It is None when all values …\nThe minimum value in the page. It is None when all values …\nCreate a new interval\nThe number of null values in the page\nOffset of the page in the file *\nThe primitive type\nThe <code>PrimitiveType</code>.\nThe <code>PrimitiveType</code>.\nGiven a set of selected Intervals of rows and the set of …\nrows to select from the page\nIts start\nLocation of the page in the file\nMetadata for a column chunk.\nA descriptor for leaf-level primitive columns. This …\nColumn order that specifies what method was used to …\nA descriptor of a parquet column. It contains the …\nMetadata for a Parquet file.\nWrapper struct to store key values\nMetadata for a row group.\nA schema descriptor. This encapsulates the top-level …\nSigned (either value or legacy byte-wise) comparison.\nSort order for page and column statistics.\nDescription for file metadata\nColumn uses the order defined by its logical or physical …\nUndefined column order, means legacy behaviour before …\nComparison is undefined.\nUnsigned (depending on physical type either value or …\nThe <code>ParquetType</code> this descriptor is a leaf of\nReturns the offset and length in bytes of the column chunk …\nReturns this column’s <code>ColumnChunk</code>\nReturns the encoding for this column\nReturns column order for <code>i</code>th column in this file. If …\nSort order used for the min_value and max_value fields in …\nColumn (sort) order used for <code>min</code> and <code>max</code> values of each …\nReturns slice of column chunk metadata.\nThe <code>ColumnDescriptor</code> (leaves) of this schema.\nReturns the total compressed data size of this column …\nTotal size of all compressed column data in this row group.\n<code>Compression</code> for this column.\nString for application that wrote this file.  This should …\nString message for application that wrote this file.\nReturns the offset for the column data.\nThe <code>ColumnDescriptor</code> for this column. This descriptor …\nThe descriptor this columns’ leaf.\nReturns the offset for the dictionary page, if any.\nEncryption algorithm. This field is set only in encrypted …\nThe schemas’ fields.\nByte offset in <code>file_path()</code>.\nFile where the column chunk is stored.\nRetrieval metadata of key used for signing the footer. …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns sort order for a physical/logical type.\nReturns <code>true</code> if this column chunk contains a index page, …\nReturns the offset for the index page.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMethod to convert to Thrift.\nSerializes itself to thrift’s …\nreturns the metadata\nOptional key/value metadata *\nkey_value_metadata of this file.\nThe maximum definition level\nThe maximum repetition level\nThe column’s <code>ColumnMetaData</code>\nThe schemas’ name.\nReturns a new <code>ColumnChunkMetaData</code>\nCreates new descriptor for leaf-level column.\nCreate a new <code>RowGroupMetaData</code>\nCreates new schema descriptor from Parquet schema.\nNumber of rows in this row group.\nNumber of rows in this file *\nnumber of rows in the file.\nTotal number of values in this column chunk. Note that …\nThe path of this column. For instance, “a.b.c.d”.\nThe <code>PhysicalType</code> of this column.\nThe <code>PrimitiveType</code> of this column\nRow groups in this file *\nThe row groups of this file\nReturns the <code>SchemaDescriptor</code> that describes schema of this …\nParquet schema for this file.  This schema contains …\nschema descriptor.\nReturns sort order associated with this column order.\nDecodes the raw statistics into <code>Statistics</code>.\nTotal byte size of all uncompressed column data in this …\nCreates a schema from\nDeserializes <code>crate::parquet::thrift_format::FileMetaData</code> …\nReturns the total uncompressed data size of this column …\nVersion of this file *\nversion of this file.\nA <code>CompressedDataPage</code> is compressed, encoded representation …\nA compressed, encoded dictionary page.\nA <code>CompressedPage</code> is a compressed, encoded representation …\nA <code>DataPage</code>\nA <code>DataPage</code> is an uncompressed, encoded representation of a …\nData page header\nNew page format allowing reading levels without …\nA <code>DictPage</code>\nAn uncompressed, encoded dictionary page.\nA <code>Page</code> is an uncompressed, encoded representation of a …\nReturns a mutable reference to the internal buffer. Useful …\nCompressed (and potentially encrypted) page size in bytes, …\nThe compression of the data in this page. Note that what …\nThe compression of the data in this page.\nThe 32bit CRC for the page, to be be calculated as follows:\nEncoding used for definition levels *\nlength of the definition levels\nEncoding used for this data page *\nEncoding used for data in this page *\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nwhether the values are compressed. Which means the section …\nReturns a new <code>CompressedDataPage</code>.\nNumber of NULL values, in this data page. Number of …\nNumber of rows in this data page. which means pages change …\nNumber of values, including NULLs, in this data page. *\nNumber of values, including NULLs, in this data page. *\nEncoding used for repetition levels *\nlength of the repetition levels\nthe rows to be selected by this page. When <code>None</code>, all rows …\nthe rows to be selected by this page. When <code>None</code>, all rows …\nSplits the page buffer into 3 slices corresponding to …\nSplits the page buffer into 3 slices corresponding to …\nSplits the page buffer into 3 slices corresponding to …\nDecodes the raw statistics into a statistics\nDecodes the raw statistics into a statistics\nOptional statistics for the data in this page*\noptional statistics for the data in this page *\nthe type of the page: indicates which of the *_header …\nUncompressed page size in bytes (not including this …\nA <code>FallibleStreamingIterator</code> that decompresses …\nA <code>MutStreamingIterator</code> that reads column chunks one by one,\nDecompressor that allows re-using the page buffer of …\nIterator finished\nA fallible <code>Iterator</code> of <code>CompressedPage</code>. This iterator …\nA special kind of fallible streaming iterator where <code>advance</code>…\nType declaration for a page filter\nThis meta is a small part of <code>ColumnChunkMetaData</code>.\nA fallible <code>Iterator</code> of <code>CompressedDataPage</code>. This iterator …\nA <code>MutStreamingIterator</code> of pre-read column chunks\nIterator still has elements\nState of <code>MutStreamingIterator</code>.\nThe start offset of this column chunk in file.\nCompression type\nDecompresses the page, using <code>buffer</code> for decompression. If …\nThe descriptor of this parquet column\nParse loaded metadata bytes\nFilters row group metadata to only those row groups, for …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns a <code>ColumnIterator</code> of column chunks corresponding to …\nReturns all <code>ColumnChunkMetaData</code> associated to <code>field_name</code>. …\nReturns a new <code>PageReader</code> by seeking <code>reader</code> to the …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns two buffers: the first buffer corresponds to the …\nReturns its internal buffer, consuming itself.\nconsumes self into the reader and the two internal buffers\nReturns the reader and this Readers’ interval buffer\nReturns a new <code>ColumnIterator</code> <code>max_page_size</code> is the maximum …\nCreates a new <code>Decompressor</code>.\nReturns a new <code>BasicDecompressor</code>.\nReturns a new <code>IndexedPageReader</code>.\nReturns a new <code>PageReader</code>.\nReturns a new <code>ReadColumnIterator</code>\nReturns a new <code>PageMetaData</code>.\nReturns a new <code>IndexedPageReader</code> with <code>PageMetaData</code>.\nCreate a a new <code>PageReader</code> with <code>PageMetaData</code>.\nThe number of values in this column chunk.\nReads a column chunk into memory This operation is …\nReads all columns that are part of the parquet field …\nReads the column indexes of all <code>ColumnChunkMetaData</code> and …\nReads a <code>FileMetaData</code> from the reader, located at the end …\nReads a <code>FileMetaData</code> from the reader, located at the end …\nRead <code>PageLocation</code>s from the <code>ColumnChunkMetaData</code>s. Returns …\nReturns the number of bits needed to store the given …\nWhen the field may have null values\nWhen the field may be repeated (list field)\nThe repetition of a parquet field\nWhen the field has no null values\nRepresents a element inside a schema definition.\nDEPRECATED: When the schema is the result of a conversion …\nWhen the original schema supports field ids, this will …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe logical type of this SchemaElement\nName of the field in the schema\nNested fields.  Since thrift does not support nested …\nrepetition of the field. The root of the schema does not …\nDEPRECATED: Used when this column contains decimal data. …\nData type for this field. Not set if the current element …\nIf type is FIXED_LEN_BYTE_ARRAY, this is the byte length …\nParses message type as string into a Parquet <code>ParquetType</code> …\nAn embedded BSON document\nA Date\nA decimal value.\nan enum is converted into a binary field\nCommon type information.\nA signed integer value.\nEnum of all valid logical integer types\nAn interval of time\nAn embedded JSON document\na list is converted into an optional field containing a …\na map is converted as an optional field containing a …\na key/value pair is converted into a group of two fields\nRepresentation of a Parquet type describing primitive and …\nThe set of all physical types representable in Parquet\nThe complete description of a parquet column\nA time.\nA time\nA date/time combination\nA date/time combination\nAn unsigned integer value.\nChecks if <code>sub_type</code> schema is part of current schema. This …\nThe optional converted type\nThe fields’ generic information\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nHelper method to create an optional field with no logical …\nHelper method to create a <code>ParquetType::PrimitiveType</code> …\nReturns <code>FieldInfo</code> information about the type.\nthe optional id, to select fields by id\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe optional logical type\nReturns this type’s field name.\nThe field name\nThe physical type\nThe repetition\nError\nMethod to convert from Thrift.\nStatistics per row group and per page All fields are …\nA trait used to describe specific statistics. Each …\nDeserializes a raw parquet statistics into <code>Statistics</code>.\ncount of distinct values occurring\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDEPRECATED: min and max value of the column. Use min_value …\nMin and max values for the column, determined by its …\ncount of null value in the column\nSerializes <code>Statistics</code> into a raw parquet statistics.\nA physical native representation of a Parquet fixed-sized …\nReturns the ordering of two binary values.\nA <code>FallibleStreamingIterator</code> that consumes <code>Page</code> and yields …\n<code>DynIter</code> is an implementation of a single-threaded, …\nDynamically-typed <code>FallibleStreamingIterator</code>.\nAn interface to write a parquet file. Use <code>start</code> to write …\nThe parquet version to use\nWrite options of different interfaces on this crate\nCompresses an [<code>EncodedPage</code>] into a <code>CompressedPage</code> using …\nWrites the footer of the parquet file. Returns the total …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDeconstructs itself into its iterator and scratch buffer.\nReturns the underlying writer.\nReturns the underlying writer and <code>ThriftFileMetaData</code>\nReturns the <code>ThriftFileMetaData</code>. This is Some iff the …\nCreates a new <code>Compressor</code>\nReturns a new <code>FileWriter</code>.\nReturns a new <code>DynIter</code>, boxing the incoming iterator\nReturns a new <code>DynStreamingIterator</code>, boxing the incoming …\nCreates a new <code>Compressor</code> (same as <code>new</code>)\nThe options assigned to the file\nThe <code>SchemaDescriptor</code> assigned to this file\nWhich Parquet version to use\nWrites a row group to the file.\nWrites a parquet file containing only the header and footer\nWhether to write statistics, including indexes")