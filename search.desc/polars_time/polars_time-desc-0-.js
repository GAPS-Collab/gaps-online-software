searchState.loadedDescShard("polars_time", 0, "Represents a window in time\nIn cases sortedness cannot be checked by the sorted flag, …\nIn cases sortedness cannot be checked by the sorted flag, …\nTraits and utilities for temporal data.\nCreate a <code>DatetimeChunked</code> from a given <code>start</code> and <code>end</code> date …\nStart a window at this interval.\nReturns the argument unchanged.\nReturns the argument unchanged.\nAdd the boundaries to the DataFrame.\nTime or index column.\nTime or index column.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nTruncate the time column values to the window.\nOffset window boundaries.\nWindow duration.\nWindow duration.\nCreate a <code>TimeChunked</code> from a given <code>start</code> and <code>end</code> date and a …\nUpsample a <code>DataFrame</code> at a regular frequency.\nUpsample a <code>DataFrame</code> at a regular frequency.\nExtract day from underlying NaiveDate representation. …\nExtract day from underlying NaiveDate representation. …\nExtract day from underlying NaiveDateTime representation. …\nExtract day from underlying NaiveDateTime representation. …\nExtract the days from a <code>Duration</code>\nExtract hour from underlying NaiveDateTime representation. …\nExtract hour from underlying NaiveDateTime representation. …\nExtract hour from underlying NaiveDateTime representation. …\nExtract the hours from a <code>Duration</code>\nExtract year from underlying NaiveDate representation. …\nExtract year from underlying NaiveDate representation. …\nExtract year from underlying NaiveDate representation. …\nExtract year from underlying NaiveDate representation. …\nThis year number might not match the calendar year number.\nThis year number might not match the calendar year number.\nExtract the microseconds from a <code>Duration</code>\nExtract the milliseconds from a <code>Duration</code>\nExtract minute from underlying NaiveDateTime …\nExtract minute from underlying NaiveDateTime …\nExtract minute from underlying NaiveDateTime …\nExtract the minutes from a <code>Duration</code>\nExtract month from underlying NaiveDateTime representation.\nExtract month from underlying NaiveDateTime representation.\nExtract month from underlying NaiveDateTime representation.\nExtract month from underlying NaiveDateTime representation.\nExtract second from underlying NaiveDateTime …\nExtract second from underlying NaiveDateTime …\nExtract second from underlying NaiveDateTime …\nExtract the nanoseconds from a <code>Duration</code>\nReturns the day of year starting from 1.\nReturns the day of year starting from 1.\nReturns the day of year starting from 1.\nReturns the day of year starting from 1.\nExtract month from underlying NaiveDateTime representation.\nExtract month from underlying NaiveDateTime representation.\nExtract quarter from underlying NaiveDateTime …\nExtract quarter from underlying NaiveDateTime …\nExtract second from underlying NaiveDateTime …\nExtract second from underlying NaiveDateTime …\nExtract second from underlying NaiveDateTime …\nExtract the seconds from a <code>Duration</code>\nReturns the ISO week number starting from 1. The return …\nReturns the ISO week number starting from 1. The return …\nReturns the ISO week number starting from 1. The return …\nReturns the ISO week number starting from 1. The return …\nExtract ISO weekday from underlying NaiveDate …\nExtract ISO weekday from underlying NaiveDate …\nExtract ISO weekday from underlying NaiveDateTime …\nExtract ISO weekday from underlying NaiveDateTime …\nExtract month from underlying NaiveDate representation. …\nExtract month from underlying NaiveDate representation. …\nExtract month from underlying NaiveDateTime representation.\nExtract month from underlying NaiveDateTime representation.\nParsing string values and return a <code>DateChunked</code>\nParsing string values and return a <code>DateChunked</code> Different …\nParsing string values and return a <code>DatetimeChunked</code>.\nParsing string values and return a <code>DatetimeChunked</code> …\nParsing string values and return a <code>TimeChunked</code>\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nonly useful if periods are weekly\nRepresents a window in time\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nreturns the bounds for the earliest window bounds that …\nDifferent from <code>group_by_windows</code>, where define window …\nBased on the given <code>Window</code>, which has an\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns whether the duration consists of full days.\n<code>true</code> if zero duration.\nReturns the nanoseconds from the <code>Duration</code> without the …\nReturns whether duration is negative.\nCreate a new integer size <code>Duration</code>\nParse a string into a <code>Duration</code>\nRound the given ms timestamp by the window boundary.\nRound the given ns timestamp by the window boundary.\nRound the given us timestamp by the window boundary.\nTruncate the given ns timestamp by the window boundary.\nTruncate the given us timestamp by the window boundary.\nCalculate the millennium from the underlying NaiveDateTime …\nExtract day from underlying NaiveDateTime representation. …\nExtract hour from underlying NaiveDateTime representation. …\nExtract year from underlying NaiveDateTime representation. …\nCalculate the millennium from the underlying NaiveDateTime …\nExtract minute from underlying NaiveDateTime …\nExtract month from underlying NaiveDateTime representation.\nReturns the number of nanoseconds since the whole non-leap …\nReturns the day of year starting from 1.\nExtract ordinal year from underlying NaiveDateTime …\nExtract quarter from underlying NaiveDateTime …\nExtract second from underlying NaiveDateTime …\nConvert from Time into String with the given format. See …\nConvert date(time) object to timestamp in <code>TimeUnit</code>.\nConvert Time into String with the given format. See chrono …\nReturns the ISO week number starting from 1. The return …\nReturns the ISO weekday number where monday = 1 and sunday …\nExtract year from underlying NaiveDateTime representation. …")