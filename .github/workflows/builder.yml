name: BuildBot

on:
  workflow_dispatch:
  push:
    branches:
    - LELEWAA-0.10
    - main
  pull_request:
    branches: 
    - LELEWAA-0.10
    - main
env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
      with: 
        submodules: 'true'
        show-progress: 'true'
        token: ${{ secrets.PAT_TOKEN }}
    - name: Set up GCC
      uses: egor-tensin/setup-gcc@v1
      with:
        version: 13
        platform: x64   

    - name: Set up rye
      uses: eifinger/setup-rye@v4
      with:
        enable-cache: true

    - name: Install dependencies
      run : sudo apt update && sudo apt install doxygen pybind11-dev graphviz cargo lm-sensors libsqlite3-dev
    
    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: cmake -DCMAKE_INSTALL_PREFIX=${{github.workspace}}/install -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DBUILD_LIFTOF=ON -DBUILD_CXXPYBINDINGS=ON -DBUILD_RUSTPYBINDINGS=ON -DBUILD_CXXDB=ON -DBUILD_CXXBINDINGS=ON -DBUILD_RUSTTELEMETRY -DBUILD_EXAMPLES=ON

    - name: Build
      # Build your program with the given configuration
      #run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}
      run: cd ${{github.workspace}}/build && make -j 4 && make doc && make install

    - name: Docs
      run: cd ${{github.workspace}}/build && make doc && make liftof-doc && make go-pybindings-rust-doc
      
    - name: Test-Dataclasses
      working-directory: ${{github.workspace}}/build
      # Execute tests defined by the CMake configuration.
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      #run: ctest -C ${{env.BUILD_TYPE}}
      run: cd ${{github.workspace}}/tof/dataclasses/rust/tof-dataclasses && cargo test --features="random" && cargo test --all-features
    
    - name: Test-LiftofLib
      working-directory: ${{github.workspace}}/build
      # Execute tests defined by the CMake configuration.
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      #run: ctest -C ${{env.BUILD_TYPE}}
      run: cd ${{github.workspace}}/tof/liftof/liftof-lib && cargo test --all-features && cargo test 

    - name: Create .nojekyll
      run: touch ${{ github.workspace }}/build/doc/html/.nojekyll
      shell: bash

    - name: Create python API docs
      run: source ${{github.workspace }}/install/setup-env.sh && cd ${{ github.workspace }}/python/doc/ && ${{ github.workspace }}/python/doc/build-sphinx.sh

    - name: Consolidate docs
      run: cp -r ${{ github.workspace }}/tof/liftof/target/doc/* ${{ github.workspace }}/build/doc/html/
      shell: bash
      
    - name: Consolidate pydocs
      run: cp -r ${{ github.workspace }}/python/doc/build/html ${{ github.workspace }}/build/doc/html/gaps_online
      shell: bash
      
    - name: Deploy to GitHub Pages
      uses: JamesIves/github-pages-deploy-action@3.7.1
      with:
        github_token: ${{ secrets.PAT_TOKEN }}
        #branch: ${{ inputs.branch }}
        folder: ${{ github.workspace }}/build/doc/html/
        branch: gh-pages

